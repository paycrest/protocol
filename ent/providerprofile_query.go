// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/user"
)

// ProviderProfileQuery is the builder for querying ProviderProfile entities.
type ProviderProfileQuery struct {
	config
	ctx                  *QueryContext
	order                []providerprofile.OrderOption
	inters               []Interceptor
	predicates           []predicate.ProviderProfile
	withUser             *UserQuery
	withAPIKey           *APIKeyQuery
	withCurrencies       *FiatCurrencyQuery
	withProvisionBuckets *ProvisionBucketQuery
	withOrderTokens      *ProviderOrderTokenQuery
	withProviderRating   *ProviderRatingQuery
	withAssignedOrders   *LockPaymentOrderQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProviderProfileQuery builder.
func (ppq *ProviderProfileQuery) Where(ps ...predicate.ProviderProfile) *ProviderProfileQuery {
	ppq.predicates = append(ppq.predicates, ps...)
	return ppq
}

// Limit the number of records to be returned by this query.
func (ppq *ProviderProfileQuery) Limit(limit int) *ProviderProfileQuery {
	ppq.ctx.Limit = &limit
	return ppq
}

// Offset to start from.
func (ppq *ProviderProfileQuery) Offset(offset int) *ProviderProfileQuery {
	ppq.ctx.Offset = &offset
	return ppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ppq *ProviderProfileQuery) Unique(unique bool) *ProviderProfileQuery {
	ppq.ctx.Unique = &unique
	return ppq
}

// Order specifies how the records should be ordered.
func (ppq *ProviderProfileQuery) Order(o ...providerprofile.OrderOption) *ProviderProfileQuery {
	ppq.order = append(ppq.order, o...)
	return ppq
}

// QueryUser chains the current query on the "user" edge.
func (ppq *ProviderProfileQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, providerprofile.UserTable, providerprofile.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAPIKey chains the current query on the "api_key" edge.
func (ppq *ProviderProfileQuery) QueryAPIKey() *APIKeyQuery {
	query := (&APIKeyClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, providerprofile.APIKeyTable, providerprofile.APIKeyColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrencies chains the current query on the "currencies" edge.
func (ppq *ProviderProfileQuery) QueryCurrencies() *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, providerprofile.CurrenciesTable, providerprofile.CurrenciesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionBuckets chains the current query on the "provision_buckets" edge.
func (ppq *ProviderProfileQuery) QueryProvisionBuckets() *ProvisionBucketQuery {
	query := (&ProvisionBucketClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(provisionbucket.Table, provisionbucket.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, providerprofile.ProvisionBucketsTable, providerprofile.ProvisionBucketsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderTokens chains the current query on the "order_tokens" edge.
func (ppq *ProviderProfileQuery) QueryOrderTokens() *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerprofile.OrderTokensTable, providerprofile.OrderTokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProviderRating chains the current query on the "provider_rating" edge.
func (ppq *ProviderProfileQuery) QueryProviderRating() *ProviderRatingQuery {
	query := (&ProviderRatingClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(providerrating.Table, providerrating.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, providerprofile.ProviderRatingTable, providerprofile.ProviderRatingColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedOrders chains the current query on the "assigned_orders" edge.
func (ppq *ProviderProfileQuery) QueryAssignedOrders() *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: ppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, selector),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerprofile.AssignedOrdersTable, providerprofile.AssignedOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProviderProfile entity from the query.
// Returns a *NotFoundError when no ProviderProfile was found.
func (ppq *ProviderProfileQuery) First(ctx context.Context) (*ProviderProfile, error) {
	nodes, err := ppq.Limit(1).All(setContextOp(ctx, ppq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{providerprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppq *ProviderProfileQuery) FirstX(ctx context.Context) *ProviderProfile {
	node, err := ppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProviderProfile ID from the query.
// Returns a *NotFoundError when no ProviderProfile ID was found.
func (ppq *ProviderProfileQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ppq.Limit(1).IDs(setContextOp(ctx, ppq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{providerprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppq *ProviderProfileQuery) FirstIDX(ctx context.Context) string {
	id, err := ppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProviderProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProviderProfile entity is found.
// Returns a *NotFoundError when no ProviderProfile entities are found.
func (ppq *ProviderProfileQuery) Only(ctx context.Context) (*ProviderProfile, error) {
	nodes, err := ppq.Limit(2).All(setContextOp(ctx, ppq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{providerprofile.Label}
	default:
		return nil, &NotSingularError{providerprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppq *ProviderProfileQuery) OnlyX(ctx context.Context) *ProviderProfile {
	node, err := ppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProviderProfile ID in the query.
// Returns a *NotSingularError when more than one ProviderProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (ppq *ProviderProfileQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ppq.Limit(2).IDs(setContextOp(ctx, ppq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{providerprofile.Label}
	default:
		err = &NotSingularError{providerprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppq *ProviderProfileQuery) OnlyIDX(ctx context.Context) string {
	id, err := ppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProviderProfiles.
func (ppq *ProviderProfileQuery) All(ctx context.Context) ([]*ProviderProfile, error) {
	ctx = setContextOp(ctx, ppq.ctx, ent.OpQueryAll)
	if err := ppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProviderProfile, *ProviderProfileQuery]()
	return withInterceptors[[]*ProviderProfile](ctx, ppq, qr, ppq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ppq *ProviderProfileQuery) AllX(ctx context.Context) []*ProviderProfile {
	nodes, err := ppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProviderProfile IDs.
func (ppq *ProviderProfileQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ppq.ctx.Unique == nil && ppq.path != nil {
		ppq.Unique(true)
	}
	ctx = setContextOp(ctx, ppq.ctx, ent.OpQueryIDs)
	if err = ppq.Select(providerprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppq *ProviderProfileQuery) IDsX(ctx context.Context) []string {
	ids, err := ppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppq *ProviderProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ppq.ctx, ent.OpQueryCount)
	if err := ppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ppq, querierCount[*ProviderProfileQuery](), ppq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ppq *ProviderProfileQuery) CountX(ctx context.Context) int {
	count, err := ppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppq *ProviderProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ppq.ctx, ent.OpQueryExist)
	switch _, err := ppq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ppq *ProviderProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := ppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProviderProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppq *ProviderProfileQuery) Clone() *ProviderProfileQuery {
	if ppq == nil {
		return nil
	}
	return &ProviderProfileQuery{
		config:               ppq.config,
		ctx:                  ppq.ctx.Clone(),
		order:                append([]providerprofile.OrderOption{}, ppq.order...),
		inters:               append([]Interceptor{}, ppq.inters...),
		predicates:           append([]predicate.ProviderProfile{}, ppq.predicates...),
		withUser:             ppq.withUser.Clone(),
		withAPIKey:           ppq.withAPIKey.Clone(),
		withCurrencies:       ppq.withCurrencies.Clone(),
		withProvisionBuckets: ppq.withProvisionBuckets.Clone(),
		withOrderTokens:      ppq.withOrderTokens.Clone(),
		withProviderRating:   ppq.withProviderRating.Clone(),
		withAssignedOrders:   ppq.withAssignedOrders.Clone(),
		// clone intermediate query.
		sql:  ppq.sql.Clone(),
		path: ppq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithUser(opts ...func(*UserQuery)) *ProviderProfileQuery {
	query := (&UserClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withUser = query
	return ppq
}

// WithAPIKey tells the query-builder to eager-load the nodes that are connected to
// the "api_key" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithAPIKey(opts ...func(*APIKeyQuery)) *ProviderProfileQuery {
	query := (&APIKeyClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withAPIKey = query
	return ppq
}

// WithCurrencies tells the query-builder to eager-load the nodes that are connected to
// the "currencies" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithCurrencies(opts ...func(*FiatCurrencyQuery)) *ProviderProfileQuery {
	query := (&FiatCurrencyClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withCurrencies = query
	return ppq
}

// WithProvisionBuckets tells the query-builder to eager-load the nodes that are connected to
// the "provision_buckets" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithProvisionBuckets(opts ...func(*ProvisionBucketQuery)) *ProviderProfileQuery {
	query := (&ProvisionBucketClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProvisionBuckets = query
	return ppq
}

// WithOrderTokens tells the query-builder to eager-load the nodes that are connected to
// the "order_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithOrderTokens(opts ...func(*ProviderOrderTokenQuery)) *ProviderProfileQuery {
	query := (&ProviderOrderTokenClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withOrderTokens = query
	return ppq
}

// WithProviderRating tells the query-builder to eager-load the nodes that are connected to
// the "provider_rating" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithProviderRating(opts ...func(*ProviderRatingQuery)) *ProviderProfileQuery {
	query := (&ProviderRatingClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProviderRating = query
	return ppq
}

// WithAssignedOrders tells the query-builder to eager-load the nodes that are connected to
// the "assigned_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProviderProfileQuery) WithAssignedOrders(opts ...func(*LockPaymentOrderQuery)) *ProviderProfileQuery {
	query := (&LockPaymentOrderClient{config: ppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ppq.withAssignedOrders = query
	return ppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TradingName string `json:"trading_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProviderProfile.Query().
//		GroupBy(providerprofile.FieldTradingName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ppq *ProviderProfileQuery) GroupBy(field string, fields ...string) *ProviderProfileGroupBy {
	ppq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProviderProfileGroupBy{build: ppq}
	grbuild.flds = &ppq.ctx.Fields
	grbuild.label = providerprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TradingName string `json:"trading_name,omitempty"`
//	}
//
//	client.ProviderProfile.Query().
//		Select(providerprofile.FieldTradingName).
//		Scan(ctx, &v)
func (ppq *ProviderProfileQuery) Select(fields ...string) *ProviderProfileSelect {
	ppq.ctx.Fields = append(ppq.ctx.Fields, fields...)
	sbuild := &ProviderProfileSelect{ProviderProfileQuery: ppq}
	sbuild.label = providerprofile.Label
	sbuild.flds, sbuild.scan = &ppq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProviderProfileSelect configured with the given aggregations.
func (ppq *ProviderProfileQuery) Aggregate(fns ...AggregateFunc) *ProviderProfileSelect {
	return ppq.Select().Aggregate(fns...)
}

func (ppq *ProviderProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ppq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ppq); err != nil {
				return err
			}
		}
	}
	for _, f := range ppq.ctx.Fields {
		if !providerprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ppq.path != nil {
		prev, err := ppq.path(ctx)
		if err != nil {
			return err
		}
		ppq.sql = prev
	}
	return nil
}

func (ppq *ProviderProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProviderProfile, error) {
	var (
		nodes       = []*ProviderProfile{}
		withFKs     = ppq.withFKs
		_spec       = ppq.querySpec()
		loadedTypes = [7]bool{
			ppq.withUser != nil,
			ppq.withAPIKey != nil,
			ppq.withCurrencies != nil,
			ppq.withProvisionBuckets != nil,
			ppq.withOrderTokens != nil,
			ppq.withProviderRating != nil,
			ppq.withAssignedOrders != nil,
		}
	)
	if ppq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, providerprofile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProviderProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProviderProfile{config: ppq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ppq.withUser; query != nil {
		if err := ppq.loadUser(ctx, query, nodes, nil,
			func(n *ProviderProfile, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withAPIKey; query != nil {
		if err := ppq.loadAPIKey(ctx, query, nodes, nil,
			func(n *ProviderProfile, e *APIKey) { n.Edges.APIKey = e }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withCurrencies; query != nil {
		if err := ppq.loadCurrencies(ctx, query, nodes,
			func(n *ProviderProfile) { n.Edges.Currencies = []*FiatCurrency{} },
			func(n *ProviderProfile, e *FiatCurrency) { n.Edges.Currencies = append(n.Edges.Currencies, e) }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withProvisionBuckets; query != nil {
		if err := ppq.loadProvisionBuckets(ctx, query, nodes,
			func(n *ProviderProfile) { n.Edges.ProvisionBuckets = []*ProvisionBucket{} },
			func(n *ProviderProfile, e *ProvisionBucket) {
				n.Edges.ProvisionBuckets = append(n.Edges.ProvisionBuckets, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ppq.withOrderTokens; query != nil {
		if err := ppq.loadOrderTokens(ctx, query, nodes,
			func(n *ProviderProfile) { n.Edges.OrderTokens = []*ProviderOrderToken{} },
			func(n *ProviderProfile, e *ProviderOrderToken) { n.Edges.OrderTokens = append(n.Edges.OrderTokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withProviderRating; query != nil {
		if err := ppq.loadProviderRating(ctx, query, nodes, nil,
			func(n *ProviderProfile, e *ProviderRating) { n.Edges.ProviderRating = e }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withAssignedOrders; query != nil {
		if err := ppq.loadAssignedOrders(ctx, query, nodes,
			func(n *ProviderProfile) { n.Edges.AssignedOrders = []*LockPaymentOrder{} },
			func(n *ProviderProfile, e *LockPaymentOrder) {
				n.Edges.AssignedOrders = append(n.Edges.AssignedOrders, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ppq *ProviderProfileQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProviderProfile)
	for i := range nodes {
		if nodes[i].user_provider_profile == nil {
			continue
		}
		fk := *nodes[i].user_provider_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_provider_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadAPIKey(ctx context.Context, query *APIKeyQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *APIKey)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ProviderProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.APIKey(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(providerprofile.APIKeyColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_profile_api_key
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_profile_api_key" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provider_profile_api_key" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadCurrencies(ctx context.Context, query *FiatCurrencyQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *FiatCurrency)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ProviderProfile)
	nids := make(map[uuid.UUID]map[*ProviderProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(providerprofile.CurrenciesTable)
		s.Join(joinT).On(s.C(fiatcurrency.FieldID), joinT.C(providerprofile.CurrenciesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(providerprofile.CurrenciesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(providerprofile.CurrenciesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProviderProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*FiatCurrency](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "currencies" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadProvisionBuckets(ctx context.Context, query *ProvisionBucketQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *ProvisionBucket)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ProviderProfile)
	nids := make(map[int]map[*ProviderProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(providerprofile.ProvisionBucketsTable)
		s.Join(joinT).On(s.C(provisionbucket.FieldID), joinT.C(providerprofile.ProvisionBucketsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(providerprofile.ProvisionBucketsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(providerprofile.ProvisionBucketsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProviderProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ProvisionBucket](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "provision_buckets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadOrderTokens(ctx context.Context, query *ProviderOrderTokenQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *ProviderOrderToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ProviderProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProviderOrderToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(providerprofile.OrderTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_profile_order_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_profile_order_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provider_profile_order_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadProviderRating(ctx context.Context, query *ProviderRatingQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *ProviderRating)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ProviderProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProviderRating(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(providerprofile.ProviderRatingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_profile_provider_rating
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_profile_provider_rating" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provider_profile_provider_rating" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ppq *ProviderProfileQuery) loadAssignedOrders(ctx context.Context, query *LockPaymentOrderQuery, nodes []*ProviderProfile, init func(*ProviderProfile), assign func(*ProviderProfile, *LockPaymentOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ProviderProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.LockPaymentOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(providerprofile.AssignedOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_profile_assigned_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_profile_assigned_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provider_profile_assigned_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ppq *ProviderProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppq.querySpec()
	_spec.Node.Columns = ppq.ctx.Fields
	if len(ppq.ctx.Fields) > 0 {
		_spec.Unique = ppq.ctx.Unique != nil && *ppq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ppq.driver, _spec)
}

func (ppq *ProviderProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(providerprofile.Table, providerprofile.Columns, sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString))
	_spec.From = ppq.sql
	if unique := ppq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ppq.path != nil {
		_spec.Unique = true
	}
	if fields := ppq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerprofile.FieldID)
		for i := range fields {
			if fields[i] != providerprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ppq *ProviderProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ppq.driver.Dialect())
	t1 := builder.Table(providerprofile.Table)
	columns := ppq.ctx.Fields
	if len(columns) == 0 {
		columns = providerprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ppq.sql != nil {
		selector = ppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ppq.ctx.Unique != nil && *ppq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ppq.predicates {
		p(selector)
	}
	for _, p := range ppq.order {
		p(selector)
	}
	if offset := ppq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProviderProfileGroupBy is the group-by builder for ProviderProfile entities.
type ProviderProfileGroupBy struct {
	selector
	build *ProviderProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppgb *ProviderProfileGroupBy) Aggregate(fns ...AggregateFunc) *ProviderProfileGroupBy {
	ppgb.fns = append(ppgb.fns, fns...)
	return ppgb
}

// Scan applies the selector query and scans the result into the given value.
func (ppgb *ProviderProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ppgb.build.ctx, ent.OpQueryGroupBy)
	if err := ppgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProviderProfileQuery, *ProviderProfileGroupBy](ctx, ppgb.build, ppgb, ppgb.build.inters, v)
}

func (ppgb *ProviderProfileGroupBy) sqlScan(ctx context.Context, root *ProviderProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ppgb.fns))
	for _, fn := range ppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ppgb.flds)+len(ppgb.fns))
		for _, f := range *ppgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ppgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProviderProfileSelect is the builder for selecting fields of ProviderProfile entities.
type ProviderProfileSelect struct {
	*ProviderProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pps *ProviderProfileSelect) Aggregate(fns ...AggregateFunc) *ProviderProfileSelect {
	pps.fns = append(pps.fns, fns...)
	return pps
}

// Scan applies the selector query and scans the result into the given value.
func (pps *ProviderProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pps.ctx, ent.OpQuerySelect)
	if err := pps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProviderProfileQuery, *ProviderProfileSelect](ctx, pps.ProviderProfileQuery, pps, pps.inters, v)
}

func (pps *ProviderProfileSelect) sqlScan(ctx context.Context, root *ProviderProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pps.fns))
	for _, fn := range pps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
