// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
)

// PaymentOrderRecipientCreate is the builder for creating a PaymentOrderRecipient entity.
type PaymentOrderRecipientCreate struct {
	config
	mutation *PaymentOrderRecipientMutation
	hooks    []Hook
}

// SetInstitution sets the "institution" field.
func (porc *PaymentOrderRecipientCreate) SetInstitution(s string) *PaymentOrderRecipientCreate {
	porc.mutation.SetInstitution(s)
	return porc
}

// SetAccountIdentifier sets the "account_identifier" field.
func (porc *PaymentOrderRecipientCreate) SetAccountIdentifier(s string) *PaymentOrderRecipientCreate {
	porc.mutation.SetAccountIdentifier(s)
	return porc
}

// SetAccountName sets the "account_name" field.
func (porc *PaymentOrderRecipientCreate) SetAccountName(s string) *PaymentOrderRecipientCreate {
	porc.mutation.SetAccountName(s)
	return porc
}

// SetMemo sets the "memo" field.
func (porc *PaymentOrderRecipientCreate) SetMemo(s string) *PaymentOrderRecipientCreate {
	porc.mutation.SetMemo(s)
	return porc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (porc *PaymentOrderRecipientCreate) SetNillableMemo(s *string) *PaymentOrderRecipientCreate {
	if s != nil {
		porc.SetMemo(*s)
	}
	return porc
}

// SetProviderID sets the "provider_id" field.
func (porc *PaymentOrderRecipientCreate) SetProviderID(s string) *PaymentOrderRecipientCreate {
	porc.mutation.SetProviderID(s)
	return porc
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (porc *PaymentOrderRecipientCreate) SetNillableProviderID(s *string) *PaymentOrderRecipientCreate {
	if s != nil {
		porc.SetProviderID(*s)
	}
	return porc
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (porc *PaymentOrderRecipientCreate) SetPaymentOrderID(id uuid.UUID) *PaymentOrderRecipientCreate {
	porc.mutation.SetPaymentOrderID(id)
	return porc
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (porc *PaymentOrderRecipientCreate) SetPaymentOrder(p *PaymentOrder) *PaymentOrderRecipientCreate {
	return porc.SetPaymentOrderID(p.ID)
}

// Mutation returns the PaymentOrderRecipientMutation object of the builder.
func (porc *PaymentOrderRecipientCreate) Mutation() *PaymentOrderRecipientMutation {
	return porc.mutation
}

// Save creates the PaymentOrderRecipient in the database.
func (porc *PaymentOrderRecipientCreate) Save(ctx context.Context) (*PaymentOrderRecipient, error) {
	return withHooks(ctx, porc.sqlSave, porc.mutation, porc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (porc *PaymentOrderRecipientCreate) SaveX(ctx context.Context) *PaymentOrderRecipient {
	v, err := porc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (porc *PaymentOrderRecipientCreate) Exec(ctx context.Context) error {
	_, err := porc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (porc *PaymentOrderRecipientCreate) ExecX(ctx context.Context) {
	if err := porc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (porc *PaymentOrderRecipientCreate) check() error {
	if _, ok := porc.mutation.Institution(); !ok {
		return &ValidationError{Name: "institution", err: errors.New(`ent: missing required field "PaymentOrderRecipient.institution"`)}
	}
	if _, ok := porc.mutation.AccountIdentifier(); !ok {
		return &ValidationError{Name: "account_identifier", err: errors.New(`ent: missing required field "PaymentOrderRecipient.account_identifier"`)}
	}
	if _, ok := porc.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "PaymentOrderRecipient.account_name"`)}
	}
	if len(porc.mutation.PaymentOrderIDs()) == 0 {
		return &ValidationError{Name: "payment_order", err: errors.New(`ent: missing required edge "PaymentOrderRecipient.payment_order"`)}
	}
	return nil
}

func (porc *PaymentOrderRecipientCreate) sqlSave(ctx context.Context) (*PaymentOrderRecipient, error) {
	if err := porc.check(); err != nil {
		return nil, err
	}
	_node, _spec := porc.createSpec()
	if err := sqlgraph.CreateNode(ctx, porc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	porc.mutation.id = &_node.ID
	porc.mutation.done = true
	return _node, nil
}

func (porc *PaymentOrderRecipientCreate) createSpec() (*PaymentOrderRecipient, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentOrderRecipient{config: porc.config}
		_spec = sqlgraph.NewCreateSpec(paymentorderrecipient.Table, sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt))
	)
	if value, ok := porc.mutation.Institution(); ok {
		_spec.SetField(paymentorderrecipient.FieldInstitution, field.TypeString, value)
		_node.Institution = value
	}
	if value, ok := porc.mutation.AccountIdentifier(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountIdentifier, field.TypeString, value)
		_node.AccountIdentifier = value
	}
	if value, ok := porc.mutation.AccountName(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountName, field.TypeString, value)
		_node.AccountName = value
	}
	if value, ok := porc.mutation.Memo(); ok {
		_spec.SetField(paymentorderrecipient.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := porc.mutation.ProviderID(); ok {
		_spec.SetField(paymentorderrecipient.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if nodes := porc.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentorderrecipient.PaymentOrderTable,
			Columns: []string{paymentorderrecipient.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_order_recipient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentOrderRecipientCreateBulk is the builder for creating many PaymentOrderRecipient entities in bulk.
type PaymentOrderRecipientCreateBulk struct {
	config
	err      error
	builders []*PaymentOrderRecipientCreate
}

// Save creates the PaymentOrderRecipient entities in the database.
func (porcb *PaymentOrderRecipientCreateBulk) Save(ctx context.Context) ([]*PaymentOrderRecipient, error) {
	if porcb.err != nil {
		return nil, porcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(porcb.builders))
	nodes := make([]*PaymentOrderRecipient, len(porcb.builders))
	mutators := make([]Mutator, len(porcb.builders))
	for i := range porcb.builders {
		func(i int, root context.Context) {
			builder := porcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentOrderRecipientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, porcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, porcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, porcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (porcb *PaymentOrderRecipientCreateBulk) SaveX(ctx context.Context) []*PaymentOrderRecipient {
	v, err := porcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (porcb *PaymentOrderRecipientCreateBulk) Exec(ctx context.Context) error {
	_, err := porcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (porcb *PaymentOrderRecipientCreateBulk) ExecX(ctx context.Context) {
	if err := porcb.Exec(ctx); err != nil {
		panic(err)
	}
}
