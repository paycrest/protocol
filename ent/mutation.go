// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
	"github.com/paycrest/aggregator/ent/institution"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/receiveaddress"
	"github.com/paycrest/aggregator/ent/senderordertoken"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/paycrest/aggregator/ent/transactionlog"
	"github.com/paycrest/aggregator/ent/user"
	"github.com/paycrest/aggregator/ent/verificationtoken"
	"github.com/paycrest/aggregator/ent/webhookretryattempt"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPIKey                      = "APIKey"
	TypeFiatCurrency                = "FiatCurrency"
	TypeIdentityVerificationRequest = "IdentityVerificationRequest"
	TypeInstitution                 = "Institution"
	TypeLinkedAddress               = "LinkedAddress"
	TypeLockOrderFulfillment        = "LockOrderFulfillment"
	TypeLockPaymentOrder            = "LockPaymentOrder"
	TypeNetwork                     = "Network"
	TypePaymentOrder                = "PaymentOrder"
	TypePaymentOrderRecipient       = "PaymentOrderRecipient"
	TypeProviderOrderToken          = "ProviderOrderToken"
	TypeProviderProfile             = "ProviderProfile"
	TypeProviderRating              = "ProviderRating"
	TypeProvisionBucket             = "ProvisionBucket"
	TypeReceiveAddress              = "ReceiveAddress"
	TypeSenderOrderToken            = "SenderOrderToken"
	TypeSenderProfile               = "SenderProfile"
	TypeToken                       = "Token"
	TypeTransactionLog              = "TransactionLog"
	TypeUser                        = "User"
	TypeVerificationToken           = "VerificationToken"
	TypeWebhookRetryAttempt         = "WebhookRetryAttempt"
)

// APIKeyMutation represents an operation that mutates the APIKey nodes in the graph.
type APIKeyMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	secret                  *string
	clearedFields           map[string]struct{}
	sender_profile          *uuid.UUID
	clearedsender_profile   bool
	provider_profile        *string
	clearedprovider_profile bool
	payment_orders          map[uuid.UUID]struct{}
	removedpayment_orders   map[uuid.UUID]struct{}
	clearedpayment_orders   bool
	done                    bool
	oldValue                func(context.Context) (*APIKey, error)
	predicates              []predicate.APIKey
}

var _ ent.Mutation = (*APIKeyMutation)(nil)

// apikeyOption allows management of the mutation configuration using functional options.
type apikeyOption func(*APIKeyMutation)

// newAPIKeyMutation creates new mutation for the APIKey entity.
func newAPIKeyMutation(c config, op Op, opts ...apikeyOption) *APIKeyMutation {
	m := &APIKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeAPIKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIKeyID sets the ID field of the mutation.
func withAPIKeyID(id uuid.UUID) apikeyOption {
	return func(m *APIKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *APIKey
		)
		m.oldValue = func(ctx context.Context) (*APIKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().APIKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPIKey sets the old APIKey of the mutation.
func withAPIKey(node *APIKey) apikeyOption {
	return func(m *APIKeyMutation) {
		m.oldValue = func(context.Context) (*APIKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of APIKey entities.
func (m *APIKeyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *APIKeyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *APIKeyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().APIKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSecret sets the "secret" field.
func (m *APIKeyMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *APIKeyMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *APIKeyMutation) ResetSecret() {
	m.secret = nil
}

// SetSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by id.
func (m *APIKeyMutation) SetSenderProfileID(id uuid.UUID) {
	m.sender_profile = &id
}

// ClearSenderProfile clears the "sender_profile" edge to the SenderProfile entity.
func (m *APIKeyMutation) ClearSenderProfile() {
	m.clearedsender_profile = true
}

// SenderProfileCleared reports if the "sender_profile" edge to the SenderProfile entity was cleared.
func (m *APIKeyMutation) SenderProfileCleared() bool {
	return m.clearedsender_profile
}

// SenderProfileID returns the "sender_profile" edge ID in the mutation.
func (m *APIKeyMutation) SenderProfileID() (id uuid.UUID, exists bool) {
	if m.sender_profile != nil {
		return *m.sender_profile, true
	}
	return
}

// SenderProfileIDs returns the "sender_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderProfileID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) SenderProfileIDs() (ids []uuid.UUID) {
	if id := m.sender_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSenderProfile resets all changes to the "sender_profile" edge.
func (m *APIKeyMutation) ResetSenderProfile() {
	m.sender_profile = nil
	m.clearedsender_profile = false
}

// SetProviderProfileID sets the "provider_profile" edge to the ProviderProfile entity by id.
func (m *APIKeyMutation) SetProviderProfileID(id string) {
	m.provider_profile = &id
}

// ClearProviderProfile clears the "provider_profile" edge to the ProviderProfile entity.
func (m *APIKeyMutation) ClearProviderProfile() {
	m.clearedprovider_profile = true
}

// ProviderProfileCleared reports if the "provider_profile" edge to the ProviderProfile entity was cleared.
func (m *APIKeyMutation) ProviderProfileCleared() bool {
	return m.clearedprovider_profile
}

// ProviderProfileID returns the "provider_profile" edge ID in the mutation.
func (m *APIKeyMutation) ProviderProfileID() (id string, exists bool) {
	if m.provider_profile != nil {
		return *m.provider_profile, true
	}
	return
}

// ProviderProfileIDs returns the "provider_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderProfileID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) ProviderProfileIDs() (ids []string) {
	if id := m.provider_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderProfile resets all changes to the "provider_profile" edge.
func (m *APIKeyMutation) ResetProviderProfile() {
	m.provider_profile = nil
	m.clearedprovider_profile = false
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *APIKeyMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *APIKeyMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *APIKeyMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *APIKeyMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *APIKeyMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *APIKeyMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *APIKeyMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// Where appends a list predicates to the APIKeyMutation builder.
func (m *APIKeyMutation) Where(ps ...predicate.APIKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the APIKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *APIKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.APIKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *APIKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *APIKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (APIKey).
func (m *APIKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIKeyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.secret != nil {
		fields = append(fields, apikey.FieldSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apikey.FieldSecret:
		return m.Secret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apikey.FieldSecret:
		return m.OldSecret(ctx)
	}
	return nil, fmt.Errorf("unknown APIKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apikey.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown APIKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown APIKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIKeyMutation) ResetField(name string) error {
	switch name {
	case apikey.FieldSecret:
		m.ResetSecret()
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sender_profile != nil {
		edges = append(edges, apikey.EdgeSenderProfile)
	}
	if m.provider_profile != nil {
		edges = append(edges, apikey.EdgeProviderProfile)
	}
	if m.payment_orders != nil {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apikey.EdgeSenderProfile:
		if id := m.sender_profile; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgeProviderProfile:
		if id := m.provider_profile; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpayment_orders != nil {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case apikey.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsender_profile {
		edges = append(edges, apikey.EdgeSenderProfile)
	}
	if m.clearedprovider_profile {
		edges = append(edges, apikey.EdgeProviderProfile)
	}
	if m.clearedpayment_orders {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case apikey.EdgeSenderProfile:
		return m.clearedsender_profile
	case apikey.EdgeProviderProfile:
		return m.clearedprovider_profile
	case apikey.EdgePaymentOrders:
		return m.clearedpayment_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIKeyMutation) ClearEdge(name string) error {
	switch name {
	case apikey.EdgeSenderProfile:
		m.ClearSenderProfile()
		return nil
	case apikey.EdgeProviderProfile:
		m.ClearProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown APIKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIKeyMutation) ResetEdge(name string) error {
	switch name {
	case apikey.EdgeSenderProfile:
		m.ResetSenderProfile()
		return nil
	case apikey.EdgeProviderProfile:
		m.ResetProviderProfile()
		return nil
	case apikey.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	}
	return fmt.Errorf("unknown APIKey edge %s", name)
}

// FiatCurrencyMutation represents an operation that mutates the FiatCurrency nodes in the graph.
type FiatCurrencyMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	code                     *string
	short_name               *string
	decimals                 *int
	adddecimals              *int
	symbol                   *string
	name                     *string
	market_rate              *decimal.Decimal
	addmarket_rate           *decimal.Decimal
	is_enabled               *bool
	clearedFields            map[string]struct{}
	providers                map[string]struct{}
	removedproviders         map[string]struct{}
	clearedproviders         bool
	provision_buckets        map[int]struct{}
	removedprovision_buckets map[int]struct{}
	clearedprovision_buckets bool
	institutions             map[int]struct{}
	removedinstitutions      map[int]struct{}
	clearedinstitutions      bool
	done                     bool
	oldValue                 func(context.Context) (*FiatCurrency, error)
	predicates               []predicate.FiatCurrency
}

var _ ent.Mutation = (*FiatCurrencyMutation)(nil)

// fiatcurrencyOption allows management of the mutation configuration using functional options.
type fiatcurrencyOption func(*FiatCurrencyMutation)

// newFiatCurrencyMutation creates new mutation for the FiatCurrency entity.
func newFiatCurrencyMutation(c config, op Op, opts ...fiatcurrencyOption) *FiatCurrencyMutation {
	m := &FiatCurrencyMutation{
		config:        c,
		op:            op,
		typ:           TypeFiatCurrency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFiatCurrencyID sets the ID field of the mutation.
func withFiatCurrencyID(id uuid.UUID) fiatcurrencyOption {
	return func(m *FiatCurrencyMutation) {
		var (
			err   error
			once  sync.Once
			value *FiatCurrency
		)
		m.oldValue = func(ctx context.Context) (*FiatCurrency, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FiatCurrency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiatCurrency sets the old FiatCurrency of the mutation.
func withFiatCurrency(node *FiatCurrency) fiatcurrencyOption {
	return func(m *FiatCurrencyMutation) {
		m.oldValue = func(context.Context) (*FiatCurrency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FiatCurrencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FiatCurrencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FiatCurrency entities.
func (m *FiatCurrencyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FiatCurrencyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FiatCurrencyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FiatCurrency.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FiatCurrencyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FiatCurrencyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FiatCurrencyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FiatCurrencyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FiatCurrencyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FiatCurrencyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCode sets the "code" field.
func (m *FiatCurrencyMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *FiatCurrencyMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *FiatCurrencyMutation) ResetCode() {
	m.code = nil
}

// SetShortName sets the "short_name" field.
func (m *FiatCurrencyMutation) SetShortName(s string) {
	m.short_name = &s
}

// ShortName returns the value of the "short_name" field in the mutation.
func (m *FiatCurrencyMutation) ShortName() (r string, exists bool) {
	v := m.short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShortName returns the old "short_name" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortName: %w", err)
	}
	return oldValue.ShortName, nil
}

// ResetShortName resets all changes to the "short_name" field.
func (m *FiatCurrencyMutation) ResetShortName() {
	m.short_name = nil
}

// SetDecimals sets the "decimals" field.
func (m *FiatCurrencyMutation) SetDecimals(i int) {
	m.decimals = &i
	m.adddecimals = nil
}

// Decimals returns the value of the "decimals" field in the mutation.
func (m *FiatCurrencyMutation) Decimals() (r int, exists bool) {
	v := m.decimals
	if v == nil {
		return
	}
	return *v, true
}

// OldDecimals returns the old "decimals" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldDecimals(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDecimals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDecimals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDecimals: %w", err)
	}
	return oldValue.Decimals, nil
}

// AddDecimals adds i to the "decimals" field.
func (m *FiatCurrencyMutation) AddDecimals(i int) {
	if m.adddecimals != nil {
		*m.adddecimals += i
	} else {
		m.adddecimals = &i
	}
}

// AddedDecimals returns the value that was added to the "decimals" field in this mutation.
func (m *FiatCurrencyMutation) AddedDecimals() (r int, exists bool) {
	v := m.adddecimals
	if v == nil {
		return
	}
	return *v, true
}

// ResetDecimals resets all changes to the "decimals" field.
func (m *FiatCurrencyMutation) ResetDecimals() {
	m.decimals = nil
	m.adddecimals = nil
}

// SetSymbol sets the "symbol" field.
func (m *FiatCurrencyMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *FiatCurrencyMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *FiatCurrencyMutation) ResetSymbol() {
	m.symbol = nil
}

// SetName sets the "name" field.
func (m *FiatCurrencyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FiatCurrencyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FiatCurrencyMutation) ResetName() {
	m.name = nil
}

// SetMarketRate sets the "market_rate" field.
func (m *FiatCurrencyMutation) SetMarketRate(d decimal.Decimal) {
	m.market_rate = &d
	m.addmarket_rate = nil
}

// MarketRate returns the value of the "market_rate" field in the mutation.
func (m *FiatCurrencyMutation) MarketRate() (r decimal.Decimal, exists bool) {
	v := m.market_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketRate returns the old "market_rate" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldMarketRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketRate: %w", err)
	}
	return oldValue.MarketRate, nil
}

// AddMarketRate adds d to the "market_rate" field.
func (m *FiatCurrencyMutation) AddMarketRate(d decimal.Decimal) {
	if m.addmarket_rate != nil {
		*m.addmarket_rate = m.addmarket_rate.Add(d)
	} else {
		m.addmarket_rate = &d
	}
}

// AddedMarketRate returns the value that was added to the "market_rate" field in this mutation.
func (m *FiatCurrencyMutation) AddedMarketRate() (r decimal.Decimal, exists bool) {
	v := m.addmarket_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketRate resets all changes to the "market_rate" field.
func (m *FiatCurrencyMutation) ResetMarketRate() {
	m.market_rate = nil
	m.addmarket_rate = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *FiatCurrencyMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *FiatCurrencyMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *FiatCurrencyMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// AddProviderIDs adds the "providers" edge to the ProviderProfile entity by ids.
func (m *FiatCurrencyMutation) AddProviderIDs(ids ...string) {
	if m.providers == nil {
		m.providers = make(map[string]struct{})
	}
	for i := range ids {
		m.providers[ids[i]] = struct{}{}
	}
}

// ClearProviders clears the "providers" edge to the ProviderProfile entity.
func (m *FiatCurrencyMutation) ClearProviders() {
	m.clearedproviders = true
}

// ProvidersCleared reports if the "providers" edge to the ProviderProfile entity was cleared.
func (m *FiatCurrencyMutation) ProvidersCleared() bool {
	return m.clearedproviders
}

// RemoveProviderIDs removes the "providers" edge to the ProviderProfile entity by IDs.
func (m *FiatCurrencyMutation) RemoveProviderIDs(ids ...string) {
	if m.removedproviders == nil {
		m.removedproviders = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.providers, ids[i])
		m.removedproviders[ids[i]] = struct{}{}
	}
}

// RemovedProviders returns the removed IDs of the "providers" edge to the ProviderProfile entity.
func (m *FiatCurrencyMutation) RemovedProvidersIDs() (ids []string) {
	for id := range m.removedproviders {
		ids = append(ids, id)
	}
	return
}

// ProvidersIDs returns the "providers" edge IDs in the mutation.
func (m *FiatCurrencyMutation) ProvidersIDs() (ids []string) {
	for id := range m.providers {
		ids = append(ids, id)
	}
	return
}

// ResetProviders resets all changes to the "providers" edge.
func (m *FiatCurrencyMutation) ResetProviders() {
	m.providers = nil
	m.clearedproviders = false
	m.removedproviders = nil
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by ids.
func (m *FiatCurrencyMutation) AddProvisionBucketIDs(ids ...int) {
	if m.provision_buckets == nil {
		m.provision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		m.provision_buckets[ids[i]] = struct{}{}
	}
}

// ClearProvisionBuckets clears the "provision_buckets" edge to the ProvisionBucket entity.
func (m *FiatCurrencyMutation) ClearProvisionBuckets() {
	m.clearedprovision_buckets = true
}

// ProvisionBucketsCleared reports if the "provision_buckets" edge to the ProvisionBucket entity was cleared.
func (m *FiatCurrencyMutation) ProvisionBucketsCleared() bool {
	return m.clearedprovision_buckets
}

// RemoveProvisionBucketIDs removes the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (m *FiatCurrencyMutation) RemoveProvisionBucketIDs(ids ...int) {
	if m.removedprovision_buckets == nil {
		m.removedprovision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.provision_buckets, ids[i])
		m.removedprovision_buckets[ids[i]] = struct{}{}
	}
}

// RemovedProvisionBuckets returns the removed IDs of the "provision_buckets" edge to the ProvisionBucket entity.
func (m *FiatCurrencyMutation) RemovedProvisionBucketsIDs() (ids []int) {
	for id := range m.removedprovision_buckets {
		ids = append(ids, id)
	}
	return
}

// ProvisionBucketsIDs returns the "provision_buckets" edge IDs in the mutation.
func (m *FiatCurrencyMutation) ProvisionBucketsIDs() (ids []int) {
	for id := range m.provision_buckets {
		ids = append(ids, id)
	}
	return
}

// ResetProvisionBuckets resets all changes to the "provision_buckets" edge.
func (m *FiatCurrencyMutation) ResetProvisionBuckets() {
	m.provision_buckets = nil
	m.clearedprovision_buckets = false
	m.removedprovision_buckets = nil
}

// AddInstitutionIDs adds the "institutions" edge to the Institution entity by ids.
func (m *FiatCurrencyMutation) AddInstitutionIDs(ids ...int) {
	if m.institutions == nil {
		m.institutions = make(map[int]struct{})
	}
	for i := range ids {
		m.institutions[ids[i]] = struct{}{}
	}
}

// ClearInstitutions clears the "institutions" edge to the Institution entity.
func (m *FiatCurrencyMutation) ClearInstitutions() {
	m.clearedinstitutions = true
}

// InstitutionsCleared reports if the "institutions" edge to the Institution entity was cleared.
func (m *FiatCurrencyMutation) InstitutionsCleared() bool {
	return m.clearedinstitutions
}

// RemoveInstitutionIDs removes the "institutions" edge to the Institution entity by IDs.
func (m *FiatCurrencyMutation) RemoveInstitutionIDs(ids ...int) {
	if m.removedinstitutions == nil {
		m.removedinstitutions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.institutions, ids[i])
		m.removedinstitutions[ids[i]] = struct{}{}
	}
}

// RemovedInstitutions returns the removed IDs of the "institutions" edge to the Institution entity.
func (m *FiatCurrencyMutation) RemovedInstitutionsIDs() (ids []int) {
	for id := range m.removedinstitutions {
		ids = append(ids, id)
	}
	return
}

// InstitutionsIDs returns the "institutions" edge IDs in the mutation.
func (m *FiatCurrencyMutation) InstitutionsIDs() (ids []int) {
	for id := range m.institutions {
		ids = append(ids, id)
	}
	return
}

// ResetInstitutions resets all changes to the "institutions" edge.
func (m *FiatCurrencyMutation) ResetInstitutions() {
	m.institutions = nil
	m.clearedinstitutions = false
	m.removedinstitutions = nil
}

// Where appends a list predicates to the FiatCurrencyMutation builder.
func (m *FiatCurrencyMutation) Where(ps ...predicate.FiatCurrency) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FiatCurrencyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FiatCurrencyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FiatCurrency, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FiatCurrencyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FiatCurrencyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FiatCurrency).
func (m *FiatCurrencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FiatCurrencyMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, fiatcurrency.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fiatcurrency.FieldUpdatedAt)
	}
	if m.code != nil {
		fields = append(fields, fiatcurrency.FieldCode)
	}
	if m.short_name != nil {
		fields = append(fields, fiatcurrency.FieldShortName)
	}
	if m.decimals != nil {
		fields = append(fields, fiatcurrency.FieldDecimals)
	}
	if m.symbol != nil {
		fields = append(fields, fiatcurrency.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, fiatcurrency.FieldName)
	}
	if m.market_rate != nil {
		fields = append(fields, fiatcurrency.FieldMarketRate)
	}
	if m.is_enabled != nil {
		fields = append(fields, fiatcurrency.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FiatCurrencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		return m.CreatedAt()
	case fiatcurrency.FieldUpdatedAt:
		return m.UpdatedAt()
	case fiatcurrency.FieldCode:
		return m.Code()
	case fiatcurrency.FieldShortName:
		return m.ShortName()
	case fiatcurrency.FieldDecimals:
		return m.Decimals()
	case fiatcurrency.FieldSymbol:
		return m.Symbol()
	case fiatcurrency.FieldName:
		return m.Name()
	case fiatcurrency.FieldMarketRate:
		return m.MarketRate()
	case fiatcurrency.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FiatCurrencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fiatcurrency.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fiatcurrency.FieldCode:
		return m.OldCode(ctx)
	case fiatcurrency.FieldShortName:
		return m.OldShortName(ctx)
	case fiatcurrency.FieldDecimals:
		return m.OldDecimals(ctx)
	case fiatcurrency.FieldSymbol:
		return m.OldSymbol(ctx)
	case fiatcurrency.FieldName:
		return m.OldName(ctx)
	case fiatcurrency.FieldMarketRate:
		return m.OldMarketRate(ctx)
	case fiatcurrency.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown FiatCurrency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fiatcurrency.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fiatcurrency.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case fiatcurrency.FieldShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortName(v)
		return nil
	case fiatcurrency.FieldDecimals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDecimals(v)
		return nil
	case fiatcurrency.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case fiatcurrency.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case fiatcurrency.FieldMarketRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketRate(v)
		return nil
	case fiatcurrency.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FiatCurrencyMutation) AddedFields() []string {
	var fields []string
	if m.adddecimals != nil {
		fields = append(fields, fiatcurrency.FieldDecimals)
	}
	if m.addmarket_rate != nil {
		fields = append(fields, fiatcurrency.FieldMarketRate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FiatCurrencyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrency.FieldDecimals:
		return m.AddedDecimals()
	case fiatcurrency.FieldMarketRate:
		return m.AddedMarketRate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fiatcurrency.FieldDecimals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDecimals(v)
		return nil
	case fiatcurrency.FieldMarketRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketRate(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FiatCurrencyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FiatCurrencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FiatCurrencyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FiatCurrency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FiatCurrencyMutation) ResetField(name string) error {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fiatcurrency.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fiatcurrency.FieldCode:
		m.ResetCode()
		return nil
	case fiatcurrency.FieldShortName:
		m.ResetShortName()
		return nil
	case fiatcurrency.FieldDecimals:
		m.ResetDecimals()
		return nil
	case fiatcurrency.FieldSymbol:
		m.ResetSymbol()
		return nil
	case fiatcurrency.FieldName:
		m.ResetName()
		return nil
	case fiatcurrency.FieldMarketRate:
		m.ResetMarketRate()
		return nil
	case fiatcurrency.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FiatCurrencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.providers != nil {
		edges = append(edges, fiatcurrency.EdgeProviders)
	}
	if m.provision_buckets != nil {
		edges = append(edges, fiatcurrency.EdgeProvisionBuckets)
	}
	if m.institutions != nil {
		edges = append(edges, fiatcurrency.EdgeInstitutions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FiatCurrencyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fiatcurrency.EdgeProviders:
		ids := make([]ent.Value, 0, len(m.providers))
		for id := range m.providers {
			ids = append(ids, id)
		}
		return ids
	case fiatcurrency.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.provision_buckets))
		for id := range m.provision_buckets {
			ids = append(ids, id)
		}
		return ids
	case fiatcurrency.EdgeInstitutions:
		ids := make([]ent.Value, 0, len(m.institutions))
		for id := range m.institutions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FiatCurrencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedproviders != nil {
		edges = append(edges, fiatcurrency.EdgeProviders)
	}
	if m.removedprovision_buckets != nil {
		edges = append(edges, fiatcurrency.EdgeProvisionBuckets)
	}
	if m.removedinstitutions != nil {
		edges = append(edges, fiatcurrency.EdgeInstitutions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FiatCurrencyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fiatcurrency.EdgeProviders:
		ids := make([]ent.Value, 0, len(m.removedproviders))
		for id := range m.removedproviders {
			ids = append(ids, id)
		}
		return ids
	case fiatcurrency.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.removedprovision_buckets))
		for id := range m.removedprovision_buckets {
			ids = append(ids, id)
		}
		return ids
	case fiatcurrency.EdgeInstitutions:
		ids := make([]ent.Value, 0, len(m.removedinstitutions))
		for id := range m.removedinstitutions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FiatCurrencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproviders {
		edges = append(edges, fiatcurrency.EdgeProviders)
	}
	if m.clearedprovision_buckets {
		edges = append(edges, fiatcurrency.EdgeProvisionBuckets)
	}
	if m.clearedinstitutions {
		edges = append(edges, fiatcurrency.EdgeInstitutions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FiatCurrencyMutation) EdgeCleared(name string) bool {
	switch name {
	case fiatcurrency.EdgeProviders:
		return m.clearedproviders
	case fiatcurrency.EdgeProvisionBuckets:
		return m.clearedprovision_buckets
	case fiatcurrency.EdgeInstitutions:
		return m.clearedinstitutions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FiatCurrencyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FiatCurrency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FiatCurrencyMutation) ResetEdge(name string) error {
	switch name {
	case fiatcurrency.EdgeProviders:
		m.ResetProviders()
		return nil
	case fiatcurrency.EdgeProvisionBuckets:
		m.ResetProvisionBuckets()
		return nil
	case fiatcurrency.EdgeInstitutions:
		m.ResetInstitutions()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency edge %s", name)
}

// IdentityVerificationRequestMutation represents an operation that mutates the IdentityVerificationRequest nodes in the graph.
type IdentityVerificationRequestMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	wallet_address      *string
	wallet_signature    *string
	platform            *identityverificationrequest.Platform
	platform_ref        *string
	verification_url    *string
	status              *identityverificationrequest.Status
	fee_reclaimed       *bool
	updated_at          *time.Time
	last_url_created_at *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*IdentityVerificationRequest, error)
	predicates          []predicate.IdentityVerificationRequest
}

var _ ent.Mutation = (*IdentityVerificationRequestMutation)(nil)

// identityverificationrequestOption allows management of the mutation configuration using functional options.
type identityverificationrequestOption func(*IdentityVerificationRequestMutation)

// newIdentityVerificationRequestMutation creates new mutation for the IdentityVerificationRequest entity.
func newIdentityVerificationRequestMutation(c config, op Op, opts ...identityverificationrequestOption) *IdentityVerificationRequestMutation {
	m := &IdentityVerificationRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeIdentityVerificationRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIdentityVerificationRequestID sets the ID field of the mutation.
func withIdentityVerificationRequestID(id uuid.UUID) identityverificationrequestOption {
	return func(m *IdentityVerificationRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *IdentityVerificationRequest
		)
		m.oldValue = func(ctx context.Context) (*IdentityVerificationRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IdentityVerificationRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIdentityVerificationRequest sets the old IdentityVerificationRequest of the mutation.
func withIdentityVerificationRequest(node *IdentityVerificationRequest) identityverificationrequestOption {
	return func(m *IdentityVerificationRequestMutation) {
		m.oldValue = func(context.Context) (*IdentityVerificationRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IdentityVerificationRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IdentityVerificationRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IdentityVerificationRequest entities.
func (m *IdentityVerificationRequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IdentityVerificationRequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IdentityVerificationRequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IdentityVerificationRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletAddress sets the "wallet_address" field.
func (m *IdentityVerificationRequestMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *IdentityVerificationRequestMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *IdentityVerificationRequestMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetWalletSignature sets the "wallet_signature" field.
func (m *IdentityVerificationRequestMutation) SetWalletSignature(s string) {
	m.wallet_signature = &s
}

// WalletSignature returns the value of the "wallet_signature" field in the mutation.
func (m *IdentityVerificationRequestMutation) WalletSignature() (r string, exists bool) {
	v := m.wallet_signature
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletSignature returns the old "wallet_signature" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldWalletSignature(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletSignature: %w", err)
	}
	return oldValue.WalletSignature, nil
}

// ResetWalletSignature resets all changes to the "wallet_signature" field.
func (m *IdentityVerificationRequestMutation) ResetWalletSignature() {
	m.wallet_signature = nil
}

// SetPlatform sets the "platform" field.
func (m *IdentityVerificationRequestMutation) SetPlatform(i identityverificationrequest.Platform) {
	m.platform = &i
}

// Platform returns the value of the "platform" field in the mutation.
func (m *IdentityVerificationRequestMutation) Platform() (r identityverificationrequest.Platform, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldPlatform(ctx context.Context) (v identityverificationrequest.Platform, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *IdentityVerificationRequestMutation) ResetPlatform() {
	m.platform = nil
}

// SetPlatformRef sets the "platform_ref" field.
func (m *IdentityVerificationRequestMutation) SetPlatformRef(s string) {
	m.platform_ref = &s
}

// PlatformRef returns the value of the "platform_ref" field in the mutation.
func (m *IdentityVerificationRequestMutation) PlatformRef() (r string, exists bool) {
	v := m.platform_ref
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformRef returns the old "platform_ref" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldPlatformRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformRef: %w", err)
	}
	return oldValue.PlatformRef, nil
}

// ResetPlatformRef resets all changes to the "platform_ref" field.
func (m *IdentityVerificationRequestMutation) ResetPlatformRef() {
	m.platform_ref = nil
}

// SetVerificationURL sets the "verification_url" field.
func (m *IdentityVerificationRequestMutation) SetVerificationURL(s string) {
	m.verification_url = &s
}

// VerificationURL returns the value of the "verification_url" field in the mutation.
func (m *IdentityVerificationRequestMutation) VerificationURL() (r string, exists bool) {
	v := m.verification_url
	if v == nil {
		return
	}
	return *v, true
}

// OldVerificationURL returns the old "verification_url" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldVerificationURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerificationURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerificationURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerificationURL: %w", err)
	}
	return oldValue.VerificationURL, nil
}

// ResetVerificationURL resets all changes to the "verification_url" field.
func (m *IdentityVerificationRequestMutation) ResetVerificationURL() {
	m.verification_url = nil
}

// SetStatus sets the "status" field.
func (m *IdentityVerificationRequestMutation) SetStatus(i identityverificationrequest.Status) {
	m.status = &i
}

// Status returns the value of the "status" field in the mutation.
func (m *IdentityVerificationRequestMutation) Status() (r identityverificationrequest.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldStatus(ctx context.Context) (v identityverificationrequest.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *IdentityVerificationRequestMutation) ResetStatus() {
	m.status = nil
}

// SetFeeReclaimed sets the "fee_reclaimed" field.
func (m *IdentityVerificationRequestMutation) SetFeeReclaimed(b bool) {
	m.fee_reclaimed = &b
}

// FeeReclaimed returns the value of the "fee_reclaimed" field in the mutation.
func (m *IdentityVerificationRequestMutation) FeeReclaimed() (r bool, exists bool) {
	v := m.fee_reclaimed
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeReclaimed returns the old "fee_reclaimed" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldFeeReclaimed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeReclaimed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeReclaimed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeReclaimed: %w", err)
	}
	return oldValue.FeeReclaimed, nil
}

// ResetFeeReclaimed resets all changes to the "fee_reclaimed" field.
func (m *IdentityVerificationRequestMutation) ResetFeeReclaimed() {
	m.fee_reclaimed = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IdentityVerificationRequestMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IdentityVerificationRequestMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IdentityVerificationRequestMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLastURLCreatedAt sets the "last_url_created_at" field.
func (m *IdentityVerificationRequestMutation) SetLastURLCreatedAt(t time.Time) {
	m.last_url_created_at = &t
}

// LastURLCreatedAt returns the value of the "last_url_created_at" field in the mutation.
func (m *IdentityVerificationRequestMutation) LastURLCreatedAt() (r time.Time, exists bool) {
	v := m.last_url_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastURLCreatedAt returns the old "last_url_created_at" field's value of the IdentityVerificationRequest entity.
// If the IdentityVerificationRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityVerificationRequestMutation) OldLastURLCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastURLCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastURLCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastURLCreatedAt: %w", err)
	}
	return oldValue.LastURLCreatedAt, nil
}

// ResetLastURLCreatedAt resets all changes to the "last_url_created_at" field.
func (m *IdentityVerificationRequestMutation) ResetLastURLCreatedAt() {
	m.last_url_created_at = nil
}

// Where appends a list predicates to the IdentityVerificationRequestMutation builder.
func (m *IdentityVerificationRequestMutation) Where(ps ...predicate.IdentityVerificationRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IdentityVerificationRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IdentityVerificationRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IdentityVerificationRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IdentityVerificationRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IdentityVerificationRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IdentityVerificationRequest).
func (m *IdentityVerificationRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IdentityVerificationRequestMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.wallet_address != nil {
		fields = append(fields, identityverificationrequest.FieldWalletAddress)
	}
	if m.wallet_signature != nil {
		fields = append(fields, identityverificationrequest.FieldWalletSignature)
	}
	if m.platform != nil {
		fields = append(fields, identityverificationrequest.FieldPlatform)
	}
	if m.platform_ref != nil {
		fields = append(fields, identityverificationrequest.FieldPlatformRef)
	}
	if m.verification_url != nil {
		fields = append(fields, identityverificationrequest.FieldVerificationURL)
	}
	if m.status != nil {
		fields = append(fields, identityverificationrequest.FieldStatus)
	}
	if m.fee_reclaimed != nil {
		fields = append(fields, identityverificationrequest.FieldFeeReclaimed)
	}
	if m.updated_at != nil {
		fields = append(fields, identityverificationrequest.FieldUpdatedAt)
	}
	if m.last_url_created_at != nil {
		fields = append(fields, identityverificationrequest.FieldLastURLCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IdentityVerificationRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case identityverificationrequest.FieldWalletAddress:
		return m.WalletAddress()
	case identityverificationrequest.FieldWalletSignature:
		return m.WalletSignature()
	case identityverificationrequest.FieldPlatform:
		return m.Platform()
	case identityverificationrequest.FieldPlatformRef:
		return m.PlatformRef()
	case identityverificationrequest.FieldVerificationURL:
		return m.VerificationURL()
	case identityverificationrequest.FieldStatus:
		return m.Status()
	case identityverificationrequest.FieldFeeReclaimed:
		return m.FeeReclaimed()
	case identityverificationrequest.FieldUpdatedAt:
		return m.UpdatedAt()
	case identityverificationrequest.FieldLastURLCreatedAt:
		return m.LastURLCreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IdentityVerificationRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case identityverificationrequest.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case identityverificationrequest.FieldWalletSignature:
		return m.OldWalletSignature(ctx)
	case identityverificationrequest.FieldPlatform:
		return m.OldPlatform(ctx)
	case identityverificationrequest.FieldPlatformRef:
		return m.OldPlatformRef(ctx)
	case identityverificationrequest.FieldVerificationURL:
		return m.OldVerificationURL(ctx)
	case identityverificationrequest.FieldStatus:
		return m.OldStatus(ctx)
	case identityverificationrequest.FieldFeeReclaimed:
		return m.OldFeeReclaimed(ctx)
	case identityverificationrequest.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case identityverificationrequest.FieldLastURLCreatedAt:
		return m.OldLastURLCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown IdentityVerificationRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityVerificationRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case identityverificationrequest.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case identityverificationrequest.FieldWalletSignature:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletSignature(v)
		return nil
	case identityverificationrequest.FieldPlatform:
		v, ok := value.(identityverificationrequest.Platform)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case identityverificationrequest.FieldPlatformRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformRef(v)
		return nil
	case identityverificationrequest.FieldVerificationURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerificationURL(v)
		return nil
	case identityverificationrequest.FieldStatus:
		v, ok := value.(identityverificationrequest.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case identityverificationrequest.FieldFeeReclaimed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeReclaimed(v)
		return nil
	case identityverificationrequest.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case identityverificationrequest.FieldLastURLCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastURLCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown IdentityVerificationRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IdentityVerificationRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IdentityVerificationRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityVerificationRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IdentityVerificationRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IdentityVerificationRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IdentityVerificationRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IdentityVerificationRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IdentityVerificationRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IdentityVerificationRequestMutation) ResetField(name string) error {
	switch name {
	case identityverificationrequest.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case identityverificationrequest.FieldWalletSignature:
		m.ResetWalletSignature()
		return nil
	case identityverificationrequest.FieldPlatform:
		m.ResetPlatform()
		return nil
	case identityverificationrequest.FieldPlatformRef:
		m.ResetPlatformRef()
		return nil
	case identityverificationrequest.FieldVerificationURL:
		m.ResetVerificationURL()
		return nil
	case identityverificationrequest.FieldStatus:
		m.ResetStatus()
		return nil
	case identityverificationrequest.FieldFeeReclaimed:
		m.ResetFeeReclaimed()
		return nil
	case identityverificationrequest.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case identityverificationrequest.FieldLastURLCreatedAt:
		m.ResetLastURLCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown IdentityVerificationRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IdentityVerificationRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IdentityVerificationRequestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IdentityVerificationRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IdentityVerificationRequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IdentityVerificationRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IdentityVerificationRequestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IdentityVerificationRequestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown IdentityVerificationRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IdentityVerificationRequestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown IdentityVerificationRequest edge %s", name)
}

// InstitutionMutation represents an operation that mutates the Institution nodes in the graph.
type InstitutionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	created_at           *time.Time
	updated_at           *time.Time
	code                 *string
	name                 *string
	_type                *institution.Type
	clearedFields        map[string]struct{}
	fiat_currency        *uuid.UUID
	clearedfiat_currency bool
	done                 bool
	oldValue             func(context.Context) (*Institution, error)
	predicates           []predicate.Institution
}

var _ ent.Mutation = (*InstitutionMutation)(nil)

// institutionOption allows management of the mutation configuration using functional options.
type institutionOption func(*InstitutionMutation)

// newInstitutionMutation creates new mutation for the Institution entity.
func newInstitutionMutation(c config, op Op, opts ...institutionOption) *InstitutionMutation {
	m := &InstitutionMutation{
		config:        c,
		op:            op,
		typ:           TypeInstitution,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstitutionID sets the ID field of the mutation.
func withInstitutionID(id int) institutionOption {
	return func(m *InstitutionMutation) {
		var (
			err   error
			once  sync.Once
			value *Institution
		)
		m.oldValue = func(ctx context.Context) (*Institution, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Institution.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstitution sets the old Institution of the mutation.
func withInstitution(node *Institution) institutionOption {
	return func(m *InstitutionMutation) {
		m.oldValue = func(context.Context) (*Institution, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstitutionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstitutionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstitutionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InstitutionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Institution.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *InstitutionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InstitutionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InstitutionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InstitutionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InstitutionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InstitutionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCode sets the "code" field.
func (m *InstitutionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *InstitutionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *InstitutionMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *InstitutionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InstitutionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InstitutionMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *InstitutionMutation) SetType(i institution.Type) {
	m._type = &i
}

// GetType returns the value of the "type" field in the mutation.
func (m *InstitutionMutation) GetType() (r institution.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldType(ctx context.Context) (v institution.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *InstitutionMutation) ResetType() {
	m._type = nil
}

// SetFiatCurrencyID sets the "fiat_currency" edge to the FiatCurrency entity by id.
func (m *InstitutionMutation) SetFiatCurrencyID(id uuid.UUID) {
	m.fiat_currency = &id
}

// ClearFiatCurrency clears the "fiat_currency" edge to the FiatCurrency entity.
func (m *InstitutionMutation) ClearFiatCurrency() {
	m.clearedfiat_currency = true
}

// FiatCurrencyCleared reports if the "fiat_currency" edge to the FiatCurrency entity was cleared.
func (m *InstitutionMutation) FiatCurrencyCleared() bool {
	return m.clearedfiat_currency
}

// FiatCurrencyID returns the "fiat_currency" edge ID in the mutation.
func (m *InstitutionMutation) FiatCurrencyID() (id uuid.UUID, exists bool) {
	if m.fiat_currency != nil {
		return *m.fiat_currency, true
	}
	return
}

// FiatCurrencyIDs returns the "fiat_currency" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FiatCurrencyID instead. It exists only for internal usage by the builders.
func (m *InstitutionMutation) FiatCurrencyIDs() (ids []uuid.UUID) {
	if id := m.fiat_currency; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFiatCurrency resets all changes to the "fiat_currency" edge.
func (m *InstitutionMutation) ResetFiatCurrency() {
	m.fiat_currency = nil
	m.clearedfiat_currency = false
}

// Where appends a list predicates to the InstitutionMutation builder.
func (m *InstitutionMutation) Where(ps ...predicate.Institution) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InstitutionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InstitutionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Institution, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InstitutionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InstitutionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Institution).
func (m *InstitutionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstitutionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, institution.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, institution.FieldUpdatedAt)
	}
	if m.code != nil {
		fields = append(fields, institution.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, institution.FieldName)
	}
	if m._type != nil {
		fields = append(fields, institution.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstitutionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case institution.FieldCreatedAt:
		return m.CreatedAt()
	case institution.FieldUpdatedAt:
		return m.UpdatedAt()
	case institution.FieldCode:
		return m.Code()
	case institution.FieldName:
		return m.Name()
	case institution.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstitutionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case institution.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case institution.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case institution.FieldCode:
		return m.OldCode(ctx)
	case institution.FieldName:
		return m.OldName(ctx)
	case institution.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Institution field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case institution.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case institution.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case institution.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case institution.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case institution.FieldType:
		v, ok := value.(institution.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstitutionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstitutionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Institution numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstitutionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstitutionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstitutionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Institution nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstitutionMutation) ResetField(name string) error {
	switch name {
	case institution.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case institution.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case institution.FieldCode:
		m.ResetCode()
		return nil
	case institution.FieldName:
		m.ResetName()
		return nil
	case institution.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstitutionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.fiat_currency != nil {
		edges = append(edges, institution.EdgeFiatCurrency)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstitutionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case institution.EdgeFiatCurrency:
		if id := m.fiat_currency; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstitutionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstitutionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstitutionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfiat_currency {
		edges = append(edges, institution.EdgeFiatCurrency)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstitutionMutation) EdgeCleared(name string) bool {
	switch name {
	case institution.EdgeFiatCurrency:
		return m.clearedfiat_currency
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstitutionMutation) ClearEdge(name string) error {
	switch name {
	case institution.EdgeFiatCurrency:
		m.ClearFiatCurrency()
		return nil
	}
	return fmt.Errorf("unknown Institution unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstitutionMutation) ResetEdge(name string) error {
	switch name {
	case institution.EdgeFiatCurrency:
		m.ResetFiatCurrency()
		return nil
	}
	return fmt.Errorf("unknown Institution edge %s", name)
}

// LinkedAddressMutation represents an operation that mutates the LinkedAddress nodes in the graph.
type LinkedAddressMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	created_at            *time.Time
	updated_at            *time.Time
	address               *string
	salt                  *[]byte
	institution           *string
	account_identifier    *string
	account_name          *string
	owner_address         *string
	last_indexed_block    *int64
	addlast_indexed_block *int64
	tx_hash               *string
	clearedFields         map[string]struct{}
	payment_orders        map[uuid.UUID]struct{}
	removedpayment_orders map[uuid.UUID]struct{}
	clearedpayment_orders bool
	done                  bool
	oldValue              func(context.Context) (*LinkedAddress, error)
	predicates            []predicate.LinkedAddress
}

var _ ent.Mutation = (*LinkedAddressMutation)(nil)

// linkedaddressOption allows management of the mutation configuration using functional options.
type linkedaddressOption func(*LinkedAddressMutation)

// newLinkedAddressMutation creates new mutation for the LinkedAddress entity.
func newLinkedAddressMutation(c config, op Op, opts ...linkedaddressOption) *LinkedAddressMutation {
	m := &LinkedAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeLinkedAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinkedAddressID sets the ID field of the mutation.
func withLinkedAddressID(id int) linkedaddressOption {
	return func(m *LinkedAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *LinkedAddress
		)
		m.oldValue = func(ctx context.Context) (*LinkedAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinkedAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinkedAddress sets the old LinkedAddress of the mutation.
func withLinkedAddress(node *LinkedAddress) linkedaddressOption {
	return func(m *LinkedAddressMutation) {
		m.oldValue = func(context.Context) (*LinkedAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinkedAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinkedAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinkedAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LinkedAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LinkedAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LinkedAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LinkedAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LinkedAddressMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LinkedAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LinkedAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LinkedAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAddress sets the "address" field.
func (m *LinkedAddressMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *LinkedAddressMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *LinkedAddressMutation) ResetAddress() {
	m.address = nil
}

// SetSalt sets the "salt" field.
func (m *LinkedAddressMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *LinkedAddressMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *LinkedAddressMutation) ResetSalt() {
	m.salt = nil
}

// SetInstitution sets the "institution" field.
func (m *LinkedAddressMutation) SetInstitution(s string) {
	m.institution = &s
}

// Institution returns the value of the "institution" field in the mutation.
func (m *LinkedAddressMutation) Institution() (r string, exists bool) {
	v := m.institution
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitution returns the old "institution" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldInstitution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitution: %w", err)
	}
	return oldValue.Institution, nil
}

// ResetInstitution resets all changes to the "institution" field.
func (m *LinkedAddressMutation) ResetInstitution() {
	m.institution = nil
}

// SetAccountIdentifier sets the "account_identifier" field.
func (m *LinkedAddressMutation) SetAccountIdentifier(s string) {
	m.account_identifier = &s
}

// AccountIdentifier returns the value of the "account_identifier" field in the mutation.
func (m *LinkedAddressMutation) AccountIdentifier() (r string, exists bool) {
	v := m.account_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountIdentifier returns the old "account_identifier" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldAccountIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountIdentifier: %w", err)
	}
	return oldValue.AccountIdentifier, nil
}

// ResetAccountIdentifier resets all changes to the "account_identifier" field.
func (m *LinkedAddressMutation) ResetAccountIdentifier() {
	m.account_identifier = nil
}

// SetAccountName sets the "account_name" field.
func (m *LinkedAddressMutation) SetAccountName(s string) {
	m.account_name = &s
}

// AccountName returns the value of the "account_name" field in the mutation.
func (m *LinkedAddressMutation) AccountName() (r string, exists bool) {
	v := m.account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountName returns the old "account_name" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldAccountName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountName: %w", err)
	}
	return oldValue.AccountName, nil
}

// ResetAccountName resets all changes to the "account_name" field.
func (m *LinkedAddressMutation) ResetAccountName() {
	m.account_name = nil
}

// SetOwnerAddress sets the "owner_address" field.
func (m *LinkedAddressMutation) SetOwnerAddress(s string) {
	m.owner_address = &s
}

// OwnerAddress returns the value of the "owner_address" field in the mutation.
func (m *LinkedAddressMutation) OwnerAddress() (r string, exists bool) {
	v := m.owner_address
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerAddress returns the old "owner_address" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldOwnerAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerAddress: %w", err)
	}
	return oldValue.OwnerAddress, nil
}

// ResetOwnerAddress resets all changes to the "owner_address" field.
func (m *LinkedAddressMutation) ResetOwnerAddress() {
	m.owner_address = nil
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (m *LinkedAddressMutation) SetLastIndexedBlock(i int64) {
	m.last_indexed_block = &i
	m.addlast_indexed_block = nil
}

// LastIndexedBlock returns the value of the "last_indexed_block" field in the mutation.
func (m *LinkedAddressMutation) LastIndexedBlock() (r int64, exists bool) {
	v := m.last_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// OldLastIndexedBlock returns the old "last_indexed_block" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldLastIndexedBlock(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastIndexedBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastIndexedBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastIndexedBlock: %w", err)
	}
	return oldValue.LastIndexedBlock, nil
}

// AddLastIndexedBlock adds i to the "last_indexed_block" field.
func (m *LinkedAddressMutation) AddLastIndexedBlock(i int64) {
	if m.addlast_indexed_block != nil {
		*m.addlast_indexed_block += i
	} else {
		m.addlast_indexed_block = &i
	}
}

// AddedLastIndexedBlock returns the value that was added to the "last_indexed_block" field in this mutation.
func (m *LinkedAddressMutation) AddedLastIndexedBlock() (r int64, exists bool) {
	v := m.addlast_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (m *LinkedAddressMutation) ClearLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	m.clearedFields[linkedaddress.FieldLastIndexedBlock] = struct{}{}
}

// LastIndexedBlockCleared returns if the "last_indexed_block" field was cleared in this mutation.
func (m *LinkedAddressMutation) LastIndexedBlockCleared() bool {
	_, ok := m.clearedFields[linkedaddress.FieldLastIndexedBlock]
	return ok
}

// ResetLastIndexedBlock resets all changes to the "last_indexed_block" field.
func (m *LinkedAddressMutation) ResetLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	delete(m.clearedFields, linkedaddress.FieldLastIndexedBlock)
}

// SetTxHash sets the "tx_hash" field.
func (m *LinkedAddressMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *LinkedAddressMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the LinkedAddress entity.
// If the LinkedAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkedAddressMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *LinkedAddressMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[linkedaddress.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *LinkedAddressMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[linkedaddress.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *LinkedAddressMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, linkedaddress.FieldTxHash)
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *LinkedAddressMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *LinkedAddressMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *LinkedAddressMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *LinkedAddressMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *LinkedAddressMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *LinkedAddressMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *LinkedAddressMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// Where appends a list predicates to the LinkedAddressMutation builder.
func (m *LinkedAddressMutation) Where(ps ...predicate.LinkedAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LinkedAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LinkedAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LinkedAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LinkedAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LinkedAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LinkedAddress).
func (m *LinkedAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinkedAddressMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, linkedaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, linkedaddress.FieldUpdatedAt)
	}
	if m.address != nil {
		fields = append(fields, linkedaddress.FieldAddress)
	}
	if m.salt != nil {
		fields = append(fields, linkedaddress.FieldSalt)
	}
	if m.institution != nil {
		fields = append(fields, linkedaddress.FieldInstitution)
	}
	if m.account_identifier != nil {
		fields = append(fields, linkedaddress.FieldAccountIdentifier)
	}
	if m.account_name != nil {
		fields = append(fields, linkedaddress.FieldAccountName)
	}
	if m.owner_address != nil {
		fields = append(fields, linkedaddress.FieldOwnerAddress)
	}
	if m.last_indexed_block != nil {
		fields = append(fields, linkedaddress.FieldLastIndexedBlock)
	}
	if m.tx_hash != nil {
		fields = append(fields, linkedaddress.FieldTxHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinkedAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linkedaddress.FieldCreatedAt:
		return m.CreatedAt()
	case linkedaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case linkedaddress.FieldAddress:
		return m.Address()
	case linkedaddress.FieldSalt:
		return m.Salt()
	case linkedaddress.FieldInstitution:
		return m.Institution()
	case linkedaddress.FieldAccountIdentifier:
		return m.AccountIdentifier()
	case linkedaddress.FieldAccountName:
		return m.AccountName()
	case linkedaddress.FieldOwnerAddress:
		return m.OwnerAddress()
	case linkedaddress.FieldLastIndexedBlock:
		return m.LastIndexedBlock()
	case linkedaddress.FieldTxHash:
		return m.TxHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinkedAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linkedaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case linkedaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case linkedaddress.FieldAddress:
		return m.OldAddress(ctx)
	case linkedaddress.FieldSalt:
		return m.OldSalt(ctx)
	case linkedaddress.FieldInstitution:
		return m.OldInstitution(ctx)
	case linkedaddress.FieldAccountIdentifier:
		return m.OldAccountIdentifier(ctx)
	case linkedaddress.FieldAccountName:
		return m.OldAccountName(ctx)
	case linkedaddress.FieldOwnerAddress:
		return m.OldOwnerAddress(ctx)
	case linkedaddress.FieldLastIndexedBlock:
		return m.OldLastIndexedBlock(ctx)
	case linkedaddress.FieldTxHash:
		return m.OldTxHash(ctx)
	}
	return nil, fmt.Errorf("unknown LinkedAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkedAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linkedaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case linkedaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case linkedaddress.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case linkedaddress.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case linkedaddress.FieldInstitution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitution(v)
		return nil
	case linkedaddress.FieldAccountIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountIdentifier(v)
		return nil
	case linkedaddress.FieldAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountName(v)
		return nil
	case linkedaddress.FieldOwnerAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerAddress(v)
		return nil
	case linkedaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastIndexedBlock(v)
		return nil
	case linkedaddress.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	}
	return fmt.Errorf("unknown LinkedAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinkedAddressMutation) AddedFields() []string {
	var fields []string
	if m.addlast_indexed_block != nil {
		fields = append(fields, linkedaddress.FieldLastIndexedBlock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinkedAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case linkedaddress.FieldLastIndexedBlock:
		return m.AddedLastIndexedBlock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkedAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case linkedaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastIndexedBlock(v)
		return nil
	}
	return fmt.Errorf("unknown LinkedAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinkedAddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(linkedaddress.FieldLastIndexedBlock) {
		fields = append(fields, linkedaddress.FieldLastIndexedBlock)
	}
	if m.FieldCleared(linkedaddress.FieldTxHash) {
		fields = append(fields, linkedaddress.FieldTxHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinkedAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinkedAddressMutation) ClearField(name string) error {
	switch name {
	case linkedaddress.FieldLastIndexedBlock:
		m.ClearLastIndexedBlock()
		return nil
	case linkedaddress.FieldTxHash:
		m.ClearTxHash()
		return nil
	}
	return fmt.Errorf("unknown LinkedAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinkedAddressMutation) ResetField(name string) error {
	switch name {
	case linkedaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case linkedaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case linkedaddress.FieldAddress:
		m.ResetAddress()
		return nil
	case linkedaddress.FieldSalt:
		m.ResetSalt()
		return nil
	case linkedaddress.FieldInstitution:
		m.ResetInstitution()
		return nil
	case linkedaddress.FieldAccountIdentifier:
		m.ResetAccountIdentifier()
		return nil
	case linkedaddress.FieldAccountName:
		m.ResetAccountName()
		return nil
	case linkedaddress.FieldOwnerAddress:
		m.ResetOwnerAddress()
		return nil
	case linkedaddress.FieldLastIndexedBlock:
		m.ResetLastIndexedBlock()
		return nil
	case linkedaddress.FieldTxHash:
		m.ResetTxHash()
		return nil
	}
	return fmt.Errorf("unknown LinkedAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinkedAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_orders != nil {
		edges = append(edges, linkedaddress.EdgePaymentOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinkedAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case linkedaddress.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinkedAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpayment_orders != nil {
		edges = append(edges, linkedaddress.EdgePaymentOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinkedAddressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case linkedaddress.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinkedAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_orders {
		edges = append(edges, linkedaddress.EdgePaymentOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinkedAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case linkedaddress.EdgePaymentOrders:
		return m.clearedpayment_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinkedAddressMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown LinkedAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinkedAddressMutation) ResetEdge(name string) error {
	switch name {
	case linkedaddress.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	}
	return fmt.Errorf("unknown LinkedAddress edge %s", name)
}

// LockOrderFulfillmentMutation represents an operation that mutates the LockOrderFulfillment nodes in the graph.
type LockOrderFulfillmentMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	tx_id             *string
	psp               *string
	validation_status *lockorderfulfillment.ValidationStatus
	validation_error  *string
	clearedFields     map[string]struct{}
	_order            *uuid.UUID
	cleared_order     bool
	done              bool
	oldValue          func(context.Context) (*LockOrderFulfillment, error)
	predicates        []predicate.LockOrderFulfillment
}

var _ ent.Mutation = (*LockOrderFulfillmentMutation)(nil)

// lockorderfulfillmentOption allows management of the mutation configuration using functional options.
type lockorderfulfillmentOption func(*LockOrderFulfillmentMutation)

// newLockOrderFulfillmentMutation creates new mutation for the LockOrderFulfillment entity.
func newLockOrderFulfillmentMutation(c config, op Op, opts ...lockorderfulfillmentOption) *LockOrderFulfillmentMutation {
	m := &LockOrderFulfillmentMutation{
		config:        c,
		op:            op,
		typ:           TypeLockOrderFulfillment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLockOrderFulfillmentID sets the ID field of the mutation.
func withLockOrderFulfillmentID(id uuid.UUID) lockorderfulfillmentOption {
	return func(m *LockOrderFulfillmentMutation) {
		var (
			err   error
			once  sync.Once
			value *LockOrderFulfillment
		)
		m.oldValue = func(ctx context.Context) (*LockOrderFulfillment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LockOrderFulfillment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLockOrderFulfillment sets the old LockOrderFulfillment of the mutation.
func withLockOrderFulfillment(node *LockOrderFulfillment) lockorderfulfillmentOption {
	return func(m *LockOrderFulfillmentMutation) {
		m.oldValue = func(context.Context) (*LockOrderFulfillment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LockOrderFulfillmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LockOrderFulfillmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LockOrderFulfillment entities.
func (m *LockOrderFulfillmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LockOrderFulfillmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LockOrderFulfillmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LockOrderFulfillment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LockOrderFulfillmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LockOrderFulfillmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LockOrderFulfillmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LockOrderFulfillmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LockOrderFulfillmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LockOrderFulfillmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTxID sets the "tx_id" field.
func (m *LockOrderFulfillmentMutation) SetTxID(s string) {
	m.tx_id = &s
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *LockOrderFulfillmentMutation) TxID() (r string, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldTxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *LockOrderFulfillmentMutation) ResetTxID() {
	m.tx_id = nil
}

// SetPsp sets the "psp" field.
func (m *LockOrderFulfillmentMutation) SetPsp(s string) {
	m.psp = &s
}

// Psp returns the value of the "psp" field in the mutation.
func (m *LockOrderFulfillmentMutation) Psp() (r string, exists bool) {
	v := m.psp
	if v == nil {
		return
	}
	return *v, true
}

// OldPsp returns the old "psp" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldPsp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPsp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPsp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPsp: %w", err)
	}
	return oldValue.Psp, nil
}

// ClearPsp clears the value of the "psp" field.
func (m *LockOrderFulfillmentMutation) ClearPsp() {
	m.psp = nil
	m.clearedFields[lockorderfulfillment.FieldPsp] = struct{}{}
}

// PspCleared returns if the "psp" field was cleared in this mutation.
func (m *LockOrderFulfillmentMutation) PspCleared() bool {
	_, ok := m.clearedFields[lockorderfulfillment.FieldPsp]
	return ok
}

// ResetPsp resets all changes to the "psp" field.
func (m *LockOrderFulfillmentMutation) ResetPsp() {
	m.psp = nil
	delete(m.clearedFields, lockorderfulfillment.FieldPsp)
}

// SetValidationStatus sets the "validation_status" field.
func (m *LockOrderFulfillmentMutation) SetValidationStatus(ls lockorderfulfillment.ValidationStatus) {
	m.validation_status = &ls
}

// ValidationStatus returns the value of the "validation_status" field in the mutation.
func (m *LockOrderFulfillmentMutation) ValidationStatus() (r lockorderfulfillment.ValidationStatus, exists bool) {
	v := m.validation_status
	if v == nil {
		return
	}
	return *v, true
}

// OldValidationStatus returns the old "validation_status" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldValidationStatus(ctx context.Context) (v lockorderfulfillment.ValidationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidationStatus: %w", err)
	}
	return oldValue.ValidationStatus, nil
}

// ResetValidationStatus resets all changes to the "validation_status" field.
func (m *LockOrderFulfillmentMutation) ResetValidationStatus() {
	m.validation_status = nil
}

// SetValidationError sets the "validation_error" field.
func (m *LockOrderFulfillmentMutation) SetValidationError(s string) {
	m.validation_error = &s
}

// ValidationError returns the value of the "validation_error" field in the mutation.
func (m *LockOrderFulfillmentMutation) ValidationError() (r string, exists bool) {
	v := m.validation_error
	if v == nil {
		return
	}
	return *v, true
}

// OldValidationError returns the old "validation_error" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldValidationError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidationError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidationError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidationError: %w", err)
	}
	return oldValue.ValidationError, nil
}

// ClearValidationError clears the value of the "validation_error" field.
func (m *LockOrderFulfillmentMutation) ClearValidationError() {
	m.validation_error = nil
	m.clearedFields[lockorderfulfillment.FieldValidationError] = struct{}{}
}

// ValidationErrorCleared returns if the "validation_error" field was cleared in this mutation.
func (m *LockOrderFulfillmentMutation) ValidationErrorCleared() bool {
	_, ok := m.clearedFields[lockorderfulfillment.FieldValidationError]
	return ok
}

// ResetValidationError resets all changes to the "validation_error" field.
func (m *LockOrderFulfillmentMutation) ResetValidationError() {
	m.validation_error = nil
	delete(m.clearedFields, lockorderfulfillment.FieldValidationError)
}

// SetOrderID sets the "order" edge to the LockPaymentOrder entity by id.
func (m *LockOrderFulfillmentMutation) SetOrderID(id uuid.UUID) {
	m._order = &id
}

// ClearOrder clears the "order" edge to the LockPaymentOrder entity.
func (m *LockOrderFulfillmentMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the LockPaymentOrder entity was cleared.
func (m *LockOrderFulfillmentMutation) OrderCleared() bool {
	return m.cleared_order
}

// OrderID returns the "order" edge ID in the mutation.
func (m *LockOrderFulfillmentMutation) OrderID() (id uuid.UUID, exists bool) {
	if m._order != nil {
		return *m._order, true
	}
	return
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *LockOrderFulfillmentMutation) OrderIDs() (ids []uuid.UUID) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *LockOrderFulfillmentMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the LockOrderFulfillmentMutation builder.
func (m *LockOrderFulfillmentMutation) Where(ps ...predicate.LockOrderFulfillment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LockOrderFulfillmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LockOrderFulfillmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LockOrderFulfillment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LockOrderFulfillmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LockOrderFulfillmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LockOrderFulfillment).
func (m *LockOrderFulfillmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LockOrderFulfillmentMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, lockorderfulfillment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lockorderfulfillment.FieldUpdatedAt)
	}
	if m.tx_id != nil {
		fields = append(fields, lockorderfulfillment.FieldTxID)
	}
	if m.psp != nil {
		fields = append(fields, lockorderfulfillment.FieldPsp)
	}
	if m.validation_status != nil {
		fields = append(fields, lockorderfulfillment.FieldValidationStatus)
	}
	if m.validation_error != nil {
		fields = append(fields, lockorderfulfillment.FieldValidationError)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LockOrderFulfillmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		return m.CreatedAt()
	case lockorderfulfillment.FieldUpdatedAt:
		return m.UpdatedAt()
	case lockorderfulfillment.FieldTxID:
		return m.TxID()
	case lockorderfulfillment.FieldPsp:
		return m.Psp()
	case lockorderfulfillment.FieldValidationStatus:
		return m.ValidationStatus()
	case lockorderfulfillment.FieldValidationError:
		return m.ValidationError()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LockOrderFulfillmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lockorderfulfillment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lockorderfulfillment.FieldTxID:
		return m.OldTxID(ctx)
	case lockorderfulfillment.FieldPsp:
		return m.OldPsp(ctx)
	case lockorderfulfillment.FieldValidationStatus:
		return m.OldValidationStatus(ctx)
	case lockorderfulfillment.FieldValidationError:
		return m.OldValidationError(ctx)
	}
	return nil, fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockOrderFulfillmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lockorderfulfillment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lockorderfulfillment.FieldTxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case lockorderfulfillment.FieldPsp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPsp(v)
		return nil
	case lockorderfulfillment.FieldValidationStatus:
		v, ok := value.(lockorderfulfillment.ValidationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidationStatus(v)
		return nil
	case lockorderfulfillment.FieldValidationError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidationError(v)
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LockOrderFulfillmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LockOrderFulfillmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockOrderFulfillmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LockOrderFulfillment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LockOrderFulfillmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lockorderfulfillment.FieldPsp) {
		fields = append(fields, lockorderfulfillment.FieldPsp)
	}
	if m.FieldCleared(lockorderfulfillment.FieldValidationError) {
		fields = append(fields, lockorderfulfillment.FieldValidationError)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LockOrderFulfillmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ClearField(name string) error {
	switch name {
	case lockorderfulfillment.FieldPsp:
		m.ClearPsp()
		return nil
	case lockorderfulfillment.FieldValidationError:
		m.ClearValidationError()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ResetField(name string) error {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lockorderfulfillment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lockorderfulfillment.FieldTxID:
		m.ResetTxID()
		return nil
	case lockorderfulfillment.FieldPsp:
		m.ResetPsp()
		return nil
	case lockorderfulfillment.FieldValidationStatus:
		m.ResetValidationStatus()
		return nil
	case lockorderfulfillment.FieldValidationError:
		m.ResetValidationError()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LockOrderFulfillmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._order != nil {
		edges = append(edges, lockorderfulfillment.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LockOrderFulfillmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LockOrderFulfillmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LockOrderFulfillmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LockOrderFulfillmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_order {
		edges = append(edges, lockorderfulfillment.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LockOrderFulfillmentMutation) EdgeCleared(name string) bool {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ClearEdge(name string) error {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ResetEdge(name string) error {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment edge %s", name)
}

// LockPaymentOrderMutation represents an operation that mutates the LockPaymentOrder nodes in the graph.
type LockPaymentOrderMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	created_at                 *time.Time
	updated_at                 *time.Time
	gateway_id                 *string
	amount                     *decimal.Decimal
	addamount                  *decimal.Decimal
	rate                       *decimal.Decimal
	addrate                    *decimal.Decimal
	order_percent              *decimal.Decimal
	addorder_percent           *decimal.Decimal
	tx_hash                    *string
	status                     *lockpaymentorder.Status
	block_number               *int64
	addblock_number            *int64
	institution                *string
	account_identifier         *string
	account_name               *string
	memo                       *string
	cancellation_count         *int
	addcancellation_count      *int
	cancellation_reasons       *[]string
	appendcancellation_reasons []string
	clearedFields              map[string]struct{}
	token                      *int
	clearedtoken               bool
	provision_bucket           *int
	clearedprovision_bucket    bool
	provider                   *string
	clearedprovider            bool
	fulfillments               map[uuid.UUID]struct{}
	removedfulfillments        map[uuid.UUID]struct{}
	clearedfulfillments        bool
	transactions               map[uuid.UUID]struct{}
	removedtransactions        map[uuid.UUID]struct{}
	clearedtransactions        bool
	done                       bool
	oldValue                   func(context.Context) (*LockPaymentOrder, error)
	predicates                 []predicate.LockPaymentOrder
}

var _ ent.Mutation = (*LockPaymentOrderMutation)(nil)

// lockpaymentorderOption allows management of the mutation configuration using functional options.
type lockpaymentorderOption func(*LockPaymentOrderMutation)

// newLockPaymentOrderMutation creates new mutation for the LockPaymentOrder entity.
func newLockPaymentOrderMutation(c config, op Op, opts ...lockpaymentorderOption) *LockPaymentOrderMutation {
	m := &LockPaymentOrderMutation{
		config:        c,
		op:            op,
		typ:           TypeLockPaymentOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLockPaymentOrderID sets the ID field of the mutation.
func withLockPaymentOrderID(id uuid.UUID) lockpaymentorderOption {
	return func(m *LockPaymentOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *LockPaymentOrder
		)
		m.oldValue = func(ctx context.Context) (*LockPaymentOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LockPaymentOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLockPaymentOrder sets the old LockPaymentOrder of the mutation.
func withLockPaymentOrder(node *LockPaymentOrder) lockpaymentorderOption {
	return func(m *LockPaymentOrderMutation) {
		m.oldValue = func(context.Context) (*LockPaymentOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LockPaymentOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LockPaymentOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LockPaymentOrder entities.
func (m *LockPaymentOrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LockPaymentOrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LockPaymentOrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LockPaymentOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LockPaymentOrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LockPaymentOrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LockPaymentOrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LockPaymentOrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LockPaymentOrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LockPaymentOrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGatewayID sets the "gateway_id" field.
func (m *LockPaymentOrderMutation) SetGatewayID(s string) {
	m.gateway_id = &s
}

// GatewayID returns the value of the "gateway_id" field in the mutation.
func (m *LockPaymentOrderMutation) GatewayID() (r string, exists bool) {
	v := m.gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayID returns the old "gateway_id" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldGatewayID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayID: %w", err)
	}
	return oldValue.GatewayID, nil
}

// ResetGatewayID resets all changes to the "gateway_id" field.
func (m *LockPaymentOrderMutation) ResetGatewayID() {
	m.gateway_id = nil
}

// SetAmount sets the "amount" field.
func (m *LockPaymentOrderMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *LockPaymentOrderMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *LockPaymentOrderMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *LockPaymentOrderMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *LockPaymentOrderMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetRate sets the "rate" field.
func (m *LockPaymentOrderMutation) SetRate(d decimal.Decimal) {
	m.rate = &d
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *LockPaymentOrderMutation) Rate() (r decimal.Decimal, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds d to the "rate" field.
func (m *LockPaymentOrderMutation) AddRate(d decimal.Decimal) {
	if m.addrate != nil {
		*m.addrate = m.addrate.Add(d)
	} else {
		m.addrate = &d
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *LockPaymentOrderMutation) AddedRate() (r decimal.Decimal, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate resets all changes to the "rate" field.
func (m *LockPaymentOrderMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
}

// SetOrderPercent sets the "order_percent" field.
func (m *LockPaymentOrderMutation) SetOrderPercent(d decimal.Decimal) {
	m.order_percent = &d
	m.addorder_percent = nil
}

// OrderPercent returns the value of the "order_percent" field in the mutation.
func (m *LockPaymentOrderMutation) OrderPercent() (r decimal.Decimal, exists bool) {
	v := m.order_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderPercent returns the old "order_percent" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldOrderPercent(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderPercent: %w", err)
	}
	return oldValue.OrderPercent, nil
}

// AddOrderPercent adds d to the "order_percent" field.
func (m *LockPaymentOrderMutation) AddOrderPercent(d decimal.Decimal) {
	if m.addorder_percent != nil {
		*m.addorder_percent = m.addorder_percent.Add(d)
	} else {
		m.addorder_percent = &d
	}
}

// AddedOrderPercent returns the value that was added to the "order_percent" field in this mutation.
func (m *LockPaymentOrderMutation) AddedOrderPercent() (r decimal.Decimal, exists bool) {
	v := m.addorder_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderPercent resets all changes to the "order_percent" field.
func (m *LockPaymentOrderMutation) ResetOrderPercent() {
	m.order_percent = nil
	m.addorder_percent = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *LockPaymentOrderMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *LockPaymentOrderMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *LockPaymentOrderMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[lockpaymentorder.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *LockPaymentOrderMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[lockpaymentorder.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *LockPaymentOrderMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, lockpaymentorder.FieldTxHash)
}

// SetStatus sets the "status" field.
func (m *LockPaymentOrderMutation) SetStatus(l lockpaymentorder.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LockPaymentOrderMutation) Status() (r lockpaymentorder.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldStatus(ctx context.Context) (v lockpaymentorder.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LockPaymentOrderMutation) ResetStatus() {
	m.status = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *LockPaymentOrderMutation) SetBlockNumber(i int64) {
	m.block_number = &i
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *LockPaymentOrderMutation) BlockNumber() (r int64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldBlockNumber(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds i to the "block_number" field.
func (m *LockPaymentOrderMutation) AddBlockNumber(i int64) {
	if m.addblock_number != nil {
		*m.addblock_number += i
	} else {
		m.addblock_number = &i
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *LockPaymentOrderMutation) AddedBlockNumber() (r int64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *LockPaymentOrderMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetInstitution sets the "institution" field.
func (m *LockPaymentOrderMutation) SetInstitution(s string) {
	m.institution = &s
}

// Institution returns the value of the "institution" field in the mutation.
func (m *LockPaymentOrderMutation) Institution() (r string, exists bool) {
	v := m.institution
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitution returns the old "institution" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldInstitution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitution: %w", err)
	}
	return oldValue.Institution, nil
}

// ResetInstitution resets all changes to the "institution" field.
func (m *LockPaymentOrderMutation) ResetInstitution() {
	m.institution = nil
}

// SetAccountIdentifier sets the "account_identifier" field.
func (m *LockPaymentOrderMutation) SetAccountIdentifier(s string) {
	m.account_identifier = &s
}

// AccountIdentifier returns the value of the "account_identifier" field in the mutation.
func (m *LockPaymentOrderMutation) AccountIdentifier() (r string, exists bool) {
	v := m.account_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountIdentifier returns the old "account_identifier" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAccountIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountIdentifier: %w", err)
	}
	return oldValue.AccountIdentifier, nil
}

// ResetAccountIdentifier resets all changes to the "account_identifier" field.
func (m *LockPaymentOrderMutation) ResetAccountIdentifier() {
	m.account_identifier = nil
}

// SetAccountName sets the "account_name" field.
func (m *LockPaymentOrderMutation) SetAccountName(s string) {
	m.account_name = &s
}

// AccountName returns the value of the "account_name" field in the mutation.
func (m *LockPaymentOrderMutation) AccountName() (r string, exists bool) {
	v := m.account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountName returns the old "account_name" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAccountName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountName: %w", err)
	}
	return oldValue.AccountName, nil
}

// ResetAccountName resets all changes to the "account_name" field.
func (m *LockPaymentOrderMutation) ResetAccountName() {
	m.account_name = nil
}

// SetMemo sets the "memo" field.
func (m *LockPaymentOrderMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *LockPaymentOrderMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *LockPaymentOrderMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[lockpaymentorder.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *LockPaymentOrderMutation) MemoCleared() bool {
	_, ok := m.clearedFields[lockpaymentorder.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *LockPaymentOrderMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, lockpaymentorder.FieldMemo)
}

// SetCancellationCount sets the "cancellation_count" field.
func (m *LockPaymentOrderMutation) SetCancellationCount(i int) {
	m.cancellation_count = &i
	m.addcancellation_count = nil
}

// CancellationCount returns the value of the "cancellation_count" field in the mutation.
func (m *LockPaymentOrderMutation) CancellationCount() (r int, exists bool) {
	v := m.cancellation_count
	if v == nil {
		return
	}
	return *v, true
}

// OldCancellationCount returns the old "cancellation_count" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCancellationCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancellationCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancellationCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancellationCount: %w", err)
	}
	return oldValue.CancellationCount, nil
}

// AddCancellationCount adds i to the "cancellation_count" field.
func (m *LockPaymentOrderMutation) AddCancellationCount(i int) {
	if m.addcancellation_count != nil {
		*m.addcancellation_count += i
	} else {
		m.addcancellation_count = &i
	}
}

// AddedCancellationCount returns the value that was added to the "cancellation_count" field in this mutation.
func (m *LockPaymentOrderMutation) AddedCancellationCount() (r int, exists bool) {
	v := m.addcancellation_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetCancellationCount resets all changes to the "cancellation_count" field.
func (m *LockPaymentOrderMutation) ResetCancellationCount() {
	m.cancellation_count = nil
	m.addcancellation_count = nil
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) SetCancellationReasons(s []string) {
	m.cancellation_reasons = &s
	m.appendcancellation_reasons = nil
}

// CancellationReasons returns the value of the "cancellation_reasons" field in the mutation.
func (m *LockPaymentOrderMutation) CancellationReasons() (r []string, exists bool) {
	v := m.cancellation_reasons
	if v == nil {
		return
	}
	return *v, true
}

// OldCancellationReasons returns the old "cancellation_reasons" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCancellationReasons(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancellationReasons is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancellationReasons requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancellationReasons: %w", err)
	}
	return oldValue.CancellationReasons, nil
}

// AppendCancellationReasons adds s to the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) AppendCancellationReasons(s []string) {
	m.appendcancellation_reasons = append(m.appendcancellation_reasons, s...)
}

// AppendedCancellationReasons returns the list of values that were appended to the "cancellation_reasons" field in this mutation.
func (m *LockPaymentOrderMutation) AppendedCancellationReasons() ([]string, bool) {
	if len(m.appendcancellation_reasons) == 0 {
		return nil, false
	}
	return m.appendcancellation_reasons, true
}

// ResetCancellationReasons resets all changes to the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) ResetCancellationReasons() {
	m.cancellation_reasons = nil
	m.appendcancellation_reasons = nil
}

// SetTokenID sets the "token" edge to the Token entity by id.
func (m *LockPaymentOrderMutation) SetTokenID(id int) {
	m.token = &id
}

// ClearToken clears the "token" edge to the Token entity.
func (m *LockPaymentOrderMutation) ClearToken() {
	m.clearedtoken = true
}

// TokenCleared reports if the "token" edge to the Token entity was cleared.
func (m *LockPaymentOrderMutation) TokenCleared() bool {
	return m.clearedtoken
}

// TokenID returns the "token" edge ID in the mutation.
func (m *LockPaymentOrderMutation) TokenID() (id int, exists bool) {
	if m.token != nil {
		return *m.token, true
	}
	return
}

// TokenIDs returns the "token" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) TokenIDs() (ids []int) {
	if id := m.token; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToken resets all changes to the "token" edge.
func (m *LockPaymentOrderMutation) ResetToken() {
	m.token = nil
	m.clearedtoken = false
}

// SetProvisionBucketID sets the "provision_bucket" edge to the ProvisionBucket entity by id.
func (m *LockPaymentOrderMutation) SetProvisionBucketID(id int) {
	m.provision_bucket = &id
}

// ClearProvisionBucket clears the "provision_bucket" edge to the ProvisionBucket entity.
func (m *LockPaymentOrderMutation) ClearProvisionBucket() {
	m.clearedprovision_bucket = true
}

// ProvisionBucketCleared reports if the "provision_bucket" edge to the ProvisionBucket entity was cleared.
func (m *LockPaymentOrderMutation) ProvisionBucketCleared() bool {
	return m.clearedprovision_bucket
}

// ProvisionBucketID returns the "provision_bucket" edge ID in the mutation.
func (m *LockPaymentOrderMutation) ProvisionBucketID() (id int, exists bool) {
	if m.provision_bucket != nil {
		return *m.provision_bucket, true
	}
	return
}

// ProvisionBucketIDs returns the "provision_bucket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProvisionBucketID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) ProvisionBucketIDs() (ids []int) {
	if id := m.provision_bucket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvisionBucket resets all changes to the "provision_bucket" edge.
func (m *LockPaymentOrderMutation) ResetProvisionBucket() {
	m.provision_bucket = nil
	m.clearedprovision_bucket = false
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by id.
func (m *LockPaymentOrderMutation) SetProviderID(id string) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (m *LockPaymentOrderMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderProfile entity was cleared.
func (m *LockPaymentOrderMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *LockPaymentOrderMutation) ProviderID() (id string, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) ProviderIDs() (ids []string) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *LockPaymentOrderMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// AddFulfillmentIDs adds the "fulfillments" edge to the LockOrderFulfillment entity by ids.
func (m *LockPaymentOrderMutation) AddFulfillmentIDs(ids ...uuid.UUID) {
	if m.fulfillments == nil {
		m.fulfillments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.fulfillments[ids[i]] = struct{}{}
	}
}

// ClearFulfillments clears the "fulfillments" edge to the LockOrderFulfillment entity.
func (m *LockPaymentOrderMutation) ClearFulfillments() {
	m.clearedfulfillments = true
}

// FulfillmentsCleared reports if the "fulfillments" edge to the LockOrderFulfillment entity was cleared.
func (m *LockPaymentOrderMutation) FulfillmentsCleared() bool {
	return m.clearedfulfillments
}

// RemoveFulfillmentIDs removes the "fulfillments" edge to the LockOrderFulfillment entity by IDs.
func (m *LockPaymentOrderMutation) RemoveFulfillmentIDs(ids ...uuid.UUID) {
	if m.removedfulfillments == nil {
		m.removedfulfillments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.fulfillments, ids[i])
		m.removedfulfillments[ids[i]] = struct{}{}
	}
}

// RemovedFulfillments returns the removed IDs of the "fulfillments" edge to the LockOrderFulfillment entity.
func (m *LockPaymentOrderMutation) RemovedFulfillmentsIDs() (ids []uuid.UUID) {
	for id := range m.removedfulfillments {
		ids = append(ids, id)
	}
	return
}

// FulfillmentsIDs returns the "fulfillments" edge IDs in the mutation.
func (m *LockPaymentOrderMutation) FulfillmentsIDs() (ids []uuid.UUID) {
	for id := range m.fulfillments {
		ids = append(ids, id)
	}
	return
}

// ResetFulfillments resets all changes to the "fulfillments" edge.
func (m *LockPaymentOrderMutation) ResetFulfillments() {
	m.fulfillments = nil
	m.clearedfulfillments = false
	m.removedfulfillments = nil
}

// AddTransactionIDs adds the "transactions" edge to the TransactionLog entity by ids.
func (m *LockPaymentOrderMutation) AddTransactionIDs(ids ...uuid.UUID) {
	if m.transactions == nil {
		m.transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the TransactionLog entity.
func (m *LockPaymentOrderMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the TransactionLog entity was cleared.
func (m *LockPaymentOrderMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the TransactionLog entity by IDs.
func (m *LockPaymentOrderMutation) RemoveTransactionIDs(ids ...uuid.UUID) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the TransactionLog entity.
func (m *LockPaymentOrderMutation) RemovedTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *LockPaymentOrderMutation) TransactionsIDs() (ids []uuid.UUID) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *LockPaymentOrderMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the LockPaymentOrderMutation builder.
func (m *LockPaymentOrderMutation) Where(ps ...predicate.LockPaymentOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LockPaymentOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LockPaymentOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LockPaymentOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LockPaymentOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LockPaymentOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LockPaymentOrder).
func (m *LockPaymentOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LockPaymentOrderMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, lockpaymentorder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lockpaymentorder.FieldUpdatedAt)
	}
	if m.gateway_id != nil {
		fields = append(fields, lockpaymentorder.FieldGatewayID)
	}
	if m.amount != nil {
		fields = append(fields, lockpaymentorder.FieldAmount)
	}
	if m.rate != nil {
		fields = append(fields, lockpaymentorder.FieldRate)
	}
	if m.order_percent != nil {
		fields = append(fields, lockpaymentorder.FieldOrderPercent)
	}
	if m.tx_hash != nil {
		fields = append(fields, lockpaymentorder.FieldTxHash)
	}
	if m.status != nil {
		fields = append(fields, lockpaymentorder.FieldStatus)
	}
	if m.block_number != nil {
		fields = append(fields, lockpaymentorder.FieldBlockNumber)
	}
	if m.institution != nil {
		fields = append(fields, lockpaymentorder.FieldInstitution)
	}
	if m.account_identifier != nil {
		fields = append(fields, lockpaymentorder.FieldAccountIdentifier)
	}
	if m.account_name != nil {
		fields = append(fields, lockpaymentorder.FieldAccountName)
	}
	if m.memo != nil {
		fields = append(fields, lockpaymentorder.FieldMemo)
	}
	if m.cancellation_count != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationCount)
	}
	if m.cancellation_reasons != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationReasons)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LockPaymentOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		return m.CreatedAt()
	case lockpaymentorder.FieldUpdatedAt:
		return m.UpdatedAt()
	case lockpaymentorder.FieldGatewayID:
		return m.GatewayID()
	case lockpaymentorder.FieldAmount:
		return m.Amount()
	case lockpaymentorder.FieldRate:
		return m.Rate()
	case lockpaymentorder.FieldOrderPercent:
		return m.OrderPercent()
	case lockpaymentorder.FieldTxHash:
		return m.TxHash()
	case lockpaymentorder.FieldStatus:
		return m.Status()
	case lockpaymentorder.FieldBlockNumber:
		return m.BlockNumber()
	case lockpaymentorder.FieldInstitution:
		return m.Institution()
	case lockpaymentorder.FieldAccountIdentifier:
		return m.AccountIdentifier()
	case lockpaymentorder.FieldAccountName:
		return m.AccountName()
	case lockpaymentorder.FieldMemo:
		return m.Memo()
	case lockpaymentorder.FieldCancellationCount:
		return m.CancellationCount()
	case lockpaymentorder.FieldCancellationReasons:
		return m.CancellationReasons()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LockPaymentOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lockpaymentorder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lockpaymentorder.FieldGatewayID:
		return m.OldGatewayID(ctx)
	case lockpaymentorder.FieldAmount:
		return m.OldAmount(ctx)
	case lockpaymentorder.FieldRate:
		return m.OldRate(ctx)
	case lockpaymentorder.FieldOrderPercent:
		return m.OldOrderPercent(ctx)
	case lockpaymentorder.FieldTxHash:
		return m.OldTxHash(ctx)
	case lockpaymentorder.FieldStatus:
		return m.OldStatus(ctx)
	case lockpaymentorder.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case lockpaymentorder.FieldInstitution:
		return m.OldInstitution(ctx)
	case lockpaymentorder.FieldAccountIdentifier:
		return m.OldAccountIdentifier(ctx)
	case lockpaymentorder.FieldAccountName:
		return m.OldAccountName(ctx)
	case lockpaymentorder.FieldMemo:
		return m.OldMemo(ctx)
	case lockpaymentorder.FieldCancellationCount:
		return m.OldCancellationCount(ctx)
	case lockpaymentorder.FieldCancellationReasons:
		return m.OldCancellationReasons(ctx)
	}
	return nil, fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockPaymentOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lockpaymentorder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lockpaymentorder.FieldGatewayID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayID(v)
		return nil
	case lockpaymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case lockpaymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	case lockpaymentorder.FieldOrderPercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderPercent(v)
		return nil
	case lockpaymentorder.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case lockpaymentorder.FieldStatus:
		v, ok := value.(lockpaymentorder.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case lockpaymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case lockpaymentorder.FieldInstitution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitution(v)
		return nil
	case lockpaymentorder.FieldAccountIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountIdentifier(v)
		return nil
	case lockpaymentorder.FieldAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountName(v)
		return nil
	case lockpaymentorder.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case lockpaymentorder.FieldCancellationCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancellationCount(v)
		return nil
	case lockpaymentorder.FieldCancellationReasons:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancellationReasons(v)
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LockPaymentOrderMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, lockpaymentorder.FieldAmount)
	}
	if m.addrate != nil {
		fields = append(fields, lockpaymentorder.FieldRate)
	}
	if m.addorder_percent != nil {
		fields = append(fields, lockpaymentorder.FieldOrderPercent)
	}
	if m.addblock_number != nil {
		fields = append(fields, lockpaymentorder.FieldBlockNumber)
	}
	if m.addcancellation_count != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LockPaymentOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lockpaymentorder.FieldAmount:
		return m.AddedAmount()
	case lockpaymentorder.FieldRate:
		return m.AddedRate()
	case lockpaymentorder.FieldOrderPercent:
		return m.AddedOrderPercent()
	case lockpaymentorder.FieldBlockNumber:
		return m.AddedBlockNumber()
	case lockpaymentorder.FieldCancellationCount:
		return m.AddedCancellationCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockPaymentOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lockpaymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case lockpaymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	case lockpaymentorder.FieldOrderPercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderPercent(v)
		return nil
	case lockpaymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	case lockpaymentorder.FieldCancellationCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCancellationCount(v)
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LockPaymentOrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lockpaymentorder.FieldTxHash) {
		fields = append(fields, lockpaymentorder.FieldTxHash)
	}
	if m.FieldCleared(lockpaymentorder.FieldMemo) {
		fields = append(fields, lockpaymentorder.FieldMemo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LockPaymentOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LockPaymentOrderMutation) ClearField(name string) error {
	switch name {
	case lockpaymentorder.FieldTxHash:
		m.ClearTxHash()
		return nil
	case lockpaymentorder.FieldMemo:
		m.ClearMemo()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LockPaymentOrderMutation) ResetField(name string) error {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lockpaymentorder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lockpaymentorder.FieldGatewayID:
		m.ResetGatewayID()
		return nil
	case lockpaymentorder.FieldAmount:
		m.ResetAmount()
		return nil
	case lockpaymentorder.FieldRate:
		m.ResetRate()
		return nil
	case lockpaymentorder.FieldOrderPercent:
		m.ResetOrderPercent()
		return nil
	case lockpaymentorder.FieldTxHash:
		m.ResetTxHash()
		return nil
	case lockpaymentorder.FieldStatus:
		m.ResetStatus()
		return nil
	case lockpaymentorder.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case lockpaymentorder.FieldInstitution:
		m.ResetInstitution()
		return nil
	case lockpaymentorder.FieldAccountIdentifier:
		m.ResetAccountIdentifier()
		return nil
	case lockpaymentorder.FieldAccountName:
		m.ResetAccountName()
		return nil
	case lockpaymentorder.FieldMemo:
		m.ResetMemo()
		return nil
	case lockpaymentorder.FieldCancellationCount:
		m.ResetCancellationCount()
		return nil
	case lockpaymentorder.FieldCancellationReasons:
		m.ResetCancellationReasons()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LockPaymentOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.token != nil {
		edges = append(edges, lockpaymentorder.EdgeToken)
	}
	if m.provision_bucket != nil {
		edges = append(edges, lockpaymentorder.EdgeProvisionBucket)
	}
	if m.provider != nil {
		edges = append(edges, lockpaymentorder.EdgeProvider)
	}
	if m.fulfillments != nil {
		edges = append(edges, lockpaymentorder.EdgeFulfillments)
	}
	if m.transactions != nil {
		edges = append(edges, lockpaymentorder.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LockPaymentOrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lockpaymentorder.EdgeToken:
		if id := m.token; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeProvisionBucket:
		if id := m.provision_bucket; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeFulfillments:
		ids := make([]ent.Value, 0, len(m.fulfillments))
		for id := range m.fulfillments {
			ids = append(ids, id)
		}
		return ids
	case lockpaymentorder.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LockPaymentOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedfulfillments != nil {
		edges = append(edges, lockpaymentorder.EdgeFulfillments)
	}
	if m.removedtransactions != nil {
		edges = append(edges, lockpaymentorder.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LockPaymentOrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lockpaymentorder.EdgeFulfillments:
		ids := make([]ent.Value, 0, len(m.removedfulfillments))
		for id := range m.removedfulfillments {
			ids = append(ids, id)
		}
		return ids
	case lockpaymentorder.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LockPaymentOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedtoken {
		edges = append(edges, lockpaymentorder.EdgeToken)
	}
	if m.clearedprovision_bucket {
		edges = append(edges, lockpaymentorder.EdgeProvisionBucket)
	}
	if m.clearedprovider {
		edges = append(edges, lockpaymentorder.EdgeProvider)
	}
	if m.clearedfulfillments {
		edges = append(edges, lockpaymentorder.EdgeFulfillments)
	}
	if m.clearedtransactions {
		edges = append(edges, lockpaymentorder.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LockPaymentOrderMutation) EdgeCleared(name string) bool {
	switch name {
	case lockpaymentorder.EdgeToken:
		return m.clearedtoken
	case lockpaymentorder.EdgeProvisionBucket:
		return m.clearedprovision_bucket
	case lockpaymentorder.EdgeProvider:
		return m.clearedprovider
	case lockpaymentorder.EdgeFulfillments:
		return m.clearedfulfillments
	case lockpaymentorder.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LockPaymentOrderMutation) ClearEdge(name string) error {
	switch name {
	case lockpaymentorder.EdgeToken:
		m.ClearToken()
		return nil
	case lockpaymentorder.EdgeProvisionBucket:
		m.ClearProvisionBucket()
		return nil
	case lockpaymentorder.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LockPaymentOrderMutation) ResetEdge(name string) error {
	switch name {
	case lockpaymentorder.EdgeToken:
		m.ResetToken()
		return nil
	case lockpaymentorder.EdgeProvisionBucket:
		m.ResetProvisionBucket()
		return nil
	case lockpaymentorder.EdgeProvider:
		m.ResetProvider()
		return nil
	case lockpaymentorder.EdgeFulfillments:
		m.ResetFulfillments()
		return nil
	case lockpaymentorder.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder edge %s", name)
}

// NetworkMutation represents an operation that mutates the Network nodes in the graph.
type NetworkMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	created_at               *time.Time
	updated_at               *time.Time
	chain_id                 *int64
	addchain_id              *int64
	chain_id_hex             *string
	identifier               *string
	rpc_endpoint             *string
	gateway_contract_address *string
	is_testnet               *bool
	fee                      *decimal.Decimal
	addfee                   *decimal.Decimal
	is_enabled               *bool
	clearedFields            map[string]struct{}
	tokens                   map[int]struct{}
	removedtokens            map[int]struct{}
	clearedtokens            bool
	done                     bool
	oldValue                 func(context.Context) (*Network, error)
	predicates               []predicate.Network
}

var _ ent.Mutation = (*NetworkMutation)(nil)

// networkOption allows management of the mutation configuration using functional options.
type networkOption func(*NetworkMutation)

// newNetworkMutation creates new mutation for the Network entity.
func newNetworkMutation(c config, op Op, opts ...networkOption) *NetworkMutation {
	m := &NetworkMutation{
		config:        c,
		op:            op,
		typ:           TypeNetwork,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetworkID sets the ID field of the mutation.
func withNetworkID(id int) networkOption {
	return func(m *NetworkMutation) {
		var (
			err   error
			once  sync.Once
			value *Network
		)
		m.oldValue = func(ctx context.Context) (*Network, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Network.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetwork sets the old Network of the mutation.
func withNetwork(node *Network) networkOption {
	return func(m *NetworkMutation) {
		m.oldValue = func(context.Context) (*Network, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetworkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetworkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetworkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetworkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Network.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NetworkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NetworkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NetworkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NetworkMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NetworkMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NetworkMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChainID sets the "chain_id" field.
func (m *NetworkMutation) SetChainID(i int64) {
	m.chain_id = &i
	m.addchain_id = nil
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *NetworkMutation) ChainID() (r int64, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldChainID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// AddChainID adds i to the "chain_id" field.
func (m *NetworkMutation) AddChainID(i int64) {
	if m.addchain_id != nil {
		*m.addchain_id += i
	} else {
		m.addchain_id = &i
	}
}

// AddedChainID returns the value that was added to the "chain_id" field in this mutation.
func (m *NetworkMutation) AddedChainID() (r int64, exists bool) {
	v := m.addchain_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *NetworkMutation) ResetChainID() {
	m.chain_id = nil
	m.addchain_id = nil
}

// SetChainIDHex sets the "chain_id_hex" field.
func (m *NetworkMutation) SetChainIDHex(s string) {
	m.chain_id_hex = &s
}

// ChainIDHex returns the value of the "chain_id_hex" field in the mutation.
func (m *NetworkMutation) ChainIDHex() (r string, exists bool) {
	v := m.chain_id_hex
	if v == nil {
		return
	}
	return *v, true
}

// OldChainIDHex returns the old "chain_id_hex" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldChainIDHex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainIDHex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainIDHex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainIDHex: %w", err)
	}
	return oldValue.ChainIDHex, nil
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (m *NetworkMutation) ClearChainIDHex() {
	m.chain_id_hex = nil
	m.clearedFields[network.FieldChainIDHex] = struct{}{}
}

// ChainIDHexCleared returns if the "chain_id_hex" field was cleared in this mutation.
func (m *NetworkMutation) ChainIDHexCleared() bool {
	_, ok := m.clearedFields[network.FieldChainIDHex]
	return ok
}

// ResetChainIDHex resets all changes to the "chain_id_hex" field.
func (m *NetworkMutation) ResetChainIDHex() {
	m.chain_id_hex = nil
	delete(m.clearedFields, network.FieldChainIDHex)
}

// SetIdentifier sets the "identifier" field.
func (m *NetworkMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *NetworkMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *NetworkMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (m *NetworkMutation) SetRPCEndpoint(s string) {
	m.rpc_endpoint = &s
}

// RPCEndpoint returns the value of the "rpc_endpoint" field in the mutation.
func (m *NetworkMutation) RPCEndpoint() (r string, exists bool) {
	v := m.rpc_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldRPCEndpoint returns the old "rpc_endpoint" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldRPCEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRPCEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRPCEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRPCEndpoint: %w", err)
	}
	return oldValue.RPCEndpoint, nil
}

// ResetRPCEndpoint resets all changes to the "rpc_endpoint" field.
func (m *NetworkMutation) ResetRPCEndpoint() {
	m.rpc_endpoint = nil
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (m *NetworkMutation) SetGatewayContractAddress(s string) {
	m.gateway_contract_address = &s
}

// GatewayContractAddress returns the value of the "gateway_contract_address" field in the mutation.
func (m *NetworkMutation) GatewayContractAddress() (r string, exists bool) {
	v := m.gateway_contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayContractAddress returns the old "gateway_contract_address" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldGatewayContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayContractAddress: %w", err)
	}
	return oldValue.GatewayContractAddress, nil
}

// ResetGatewayContractAddress resets all changes to the "gateway_contract_address" field.
func (m *NetworkMutation) ResetGatewayContractAddress() {
	m.gateway_contract_address = nil
}

// SetIsTestnet sets the "is_testnet" field.
func (m *NetworkMutation) SetIsTestnet(b bool) {
	m.is_testnet = &b
}

// IsTestnet returns the value of the "is_testnet" field in the mutation.
func (m *NetworkMutation) IsTestnet() (r bool, exists bool) {
	v := m.is_testnet
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTestnet returns the old "is_testnet" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldIsTestnet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTestnet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTestnet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTestnet: %w", err)
	}
	return oldValue.IsTestnet, nil
}

// ResetIsTestnet resets all changes to the "is_testnet" field.
func (m *NetworkMutation) ResetIsTestnet() {
	m.is_testnet = nil
}

// SetFee sets the "fee" field.
func (m *NetworkMutation) SetFee(d decimal.Decimal) {
	m.fee = &d
	m.addfee = nil
}

// Fee returns the value of the "fee" field in the mutation.
func (m *NetworkMutation) Fee() (r decimal.Decimal, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldFee(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// AddFee adds d to the "fee" field.
func (m *NetworkMutation) AddFee(d decimal.Decimal) {
	if m.addfee != nil {
		*m.addfee = m.addfee.Add(d)
	} else {
		m.addfee = &d
	}
}

// AddedFee returns the value that was added to the "fee" field in this mutation.
func (m *NetworkMutation) AddedFee() (r decimal.Decimal, exists bool) {
	v := m.addfee
	if v == nil {
		return
	}
	return *v, true
}

// ResetFee resets all changes to the "fee" field.
func (m *NetworkMutation) ResetFee() {
	m.fee = nil
	m.addfee = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *NetworkMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *NetworkMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *NetworkMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// AddTokenIDs adds the "tokens" edge to the Token entity by ids.
func (m *NetworkMutation) AddTokenIDs(ids ...int) {
	if m.tokens == nil {
		m.tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.tokens[ids[i]] = struct{}{}
	}
}

// ClearTokens clears the "tokens" edge to the Token entity.
func (m *NetworkMutation) ClearTokens() {
	m.clearedtokens = true
}

// TokensCleared reports if the "tokens" edge to the Token entity was cleared.
func (m *NetworkMutation) TokensCleared() bool {
	return m.clearedtokens
}

// RemoveTokenIDs removes the "tokens" edge to the Token entity by IDs.
func (m *NetworkMutation) RemoveTokenIDs(ids ...int) {
	if m.removedtokens == nil {
		m.removedtokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tokens, ids[i])
		m.removedtokens[ids[i]] = struct{}{}
	}
}

// RemovedTokens returns the removed IDs of the "tokens" edge to the Token entity.
func (m *NetworkMutation) RemovedTokensIDs() (ids []int) {
	for id := range m.removedtokens {
		ids = append(ids, id)
	}
	return
}

// TokensIDs returns the "tokens" edge IDs in the mutation.
func (m *NetworkMutation) TokensIDs() (ids []int) {
	for id := range m.tokens {
		ids = append(ids, id)
	}
	return
}

// ResetTokens resets all changes to the "tokens" edge.
func (m *NetworkMutation) ResetTokens() {
	m.tokens = nil
	m.clearedtokens = false
	m.removedtokens = nil
}

// Where appends a list predicates to the NetworkMutation builder.
func (m *NetworkMutation) Where(ps ...predicate.Network) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetworkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetworkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Network, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetworkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetworkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Network).
func (m *NetworkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetworkMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, network.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, network.FieldUpdatedAt)
	}
	if m.chain_id != nil {
		fields = append(fields, network.FieldChainID)
	}
	if m.chain_id_hex != nil {
		fields = append(fields, network.FieldChainIDHex)
	}
	if m.identifier != nil {
		fields = append(fields, network.FieldIdentifier)
	}
	if m.rpc_endpoint != nil {
		fields = append(fields, network.FieldRPCEndpoint)
	}
	if m.gateway_contract_address != nil {
		fields = append(fields, network.FieldGatewayContractAddress)
	}
	if m.is_testnet != nil {
		fields = append(fields, network.FieldIsTestnet)
	}
	if m.fee != nil {
		fields = append(fields, network.FieldFee)
	}
	if m.is_enabled != nil {
		fields = append(fields, network.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetworkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case network.FieldCreatedAt:
		return m.CreatedAt()
	case network.FieldUpdatedAt:
		return m.UpdatedAt()
	case network.FieldChainID:
		return m.ChainID()
	case network.FieldChainIDHex:
		return m.ChainIDHex()
	case network.FieldIdentifier:
		return m.Identifier()
	case network.FieldRPCEndpoint:
		return m.RPCEndpoint()
	case network.FieldGatewayContractAddress:
		return m.GatewayContractAddress()
	case network.FieldIsTestnet:
		return m.IsTestnet()
	case network.FieldFee:
		return m.Fee()
	case network.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetworkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case network.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case network.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case network.FieldChainID:
		return m.OldChainID(ctx)
	case network.FieldChainIDHex:
		return m.OldChainIDHex(ctx)
	case network.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case network.FieldRPCEndpoint:
		return m.OldRPCEndpoint(ctx)
	case network.FieldGatewayContractAddress:
		return m.OldGatewayContractAddress(ctx)
	case network.FieldIsTestnet:
		return m.OldIsTestnet(ctx)
	case network.FieldFee:
		return m.OldFee(ctx)
	case network.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Network field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case network.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case network.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case network.FieldChainID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case network.FieldChainIDHex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainIDHex(v)
		return nil
	case network.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case network.FieldRPCEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRPCEndpoint(v)
		return nil
	case network.FieldGatewayContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayContractAddress(v)
		return nil
	case network.FieldIsTestnet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTestnet(v)
		return nil
	case network.FieldFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case network.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Network field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetworkMutation) AddedFields() []string {
	var fields []string
	if m.addchain_id != nil {
		fields = append(fields, network.FieldChainID)
	}
	if m.addfee != nil {
		fields = append(fields, network.FieldFee)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetworkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case network.FieldChainID:
		return m.AddedChainID()
	case network.FieldFee:
		return m.AddedFee()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case network.FieldChainID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChainID(v)
		return nil
	case network.FieldFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFee(v)
		return nil
	}
	return fmt.Errorf("unknown Network numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetworkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(network.FieldChainIDHex) {
		fields = append(fields, network.FieldChainIDHex)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetworkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetworkMutation) ClearField(name string) error {
	switch name {
	case network.FieldChainIDHex:
		m.ClearChainIDHex()
		return nil
	}
	return fmt.Errorf("unknown Network nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetworkMutation) ResetField(name string) error {
	switch name {
	case network.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case network.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case network.FieldChainID:
		m.ResetChainID()
		return nil
	case network.FieldChainIDHex:
		m.ResetChainIDHex()
		return nil
	case network.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case network.FieldRPCEndpoint:
		m.ResetRPCEndpoint()
		return nil
	case network.FieldGatewayContractAddress:
		m.ResetGatewayContractAddress()
		return nil
	case network.FieldIsTestnet:
		m.ResetIsTestnet()
		return nil
	case network.FieldFee:
		m.ResetFee()
		return nil
	case network.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown Network field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetworkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tokens != nil {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetworkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case network.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.tokens))
		for id := range m.tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetworkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtokens != nil {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetworkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case network.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.removedtokens))
		for id := range m.removedtokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetworkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtokens {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetworkMutation) EdgeCleared(name string) bool {
	switch name {
	case network.EdgeTokens:
		return m.clearedtokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetworkMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Network unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetworkMutation) ResetEdge(name string) error {
	switch name {
	case network.EdgeTokens:
		m.ResetTokens()
		return nil
	}
	return fmt.Errorf("unknown Network edge %s", name)
}

// PaymentOrderMutation represents an operation that mutates the PaymentOrder nodes in the graph.
type PaymentOrderMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	amount                 *decimal.Decimal
	addamount              *decimal.Decimal
	amount_paid            *decimal.Decimal
	addamount_paid         *decimal.Decimal
	amount_returned        *decimal.Decimal
	addamount_returned     *decimal.Decimal
	percent_settled        *decimal.Decimal
	addpercent_settled     *decimal.Decimal
	sender_fee             *decimal.Decimal
	addsender_fee          *decimal.Decimal
	network_fee            *decimal.Decimal
	addnetwork_fee         *decimal.Decimal
	protocol_fee           *decimal.Decimal
	addprotocol_fee        *decimal.Decimal
	rate                   *decimal.Decimal
	addrate                *decimal.Decimal
	tx_hash                *string
	block_number           *int64
	addblock_number        *int64
	from_address           *string
	return_address         *string
	receive_address_text   *string
	fee_percent            *decimal.Decimal
	addfee_percent         *decimal.Decimal
	fee_address            *string
	gateway_id             *string
	reference              *string
	status                 *paymentorder.Status
	clearedFields          map[string]struct{}
	sender_profile         *uuid.UUID
	clearedsender_profile  bool
	token                  *int
	clearedtoken           bool
	linked_address         *int
	clearedlinked_address  bool
	receive_address        *int
	clearedreceive_address bool
	recipient              *int
	clearedrecipient       bool
	transactions           map[uuid.UUID]struct{}
	removedtransactions    map[uuid.UUID]struct{}
	clearedtransactions    bool
	done                   bool
	oldValue               func(context.Context) (*PaymentOrder, error)
	predicates             []predicate.PaymentOrder
}

var _ ent.Mutation = (*PaymentOrderMutation)(nil)

// paymentorderOption allows management of the mutation configuration using functional options.
type paymentorderOption func(*PaymentOrderMutation)

// newPaymentOrderMutation creates new mutation for the PaymentOrder entity.
func newPaymentOrderMutation(c config, op Op, opts ...paymentorderOption) *PaymentOrderMutation {
	m := &PaymentOrderMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentOrderID sets the ID field of the mutation.
func withPaymentOrderID(id uuid.UUID) paymentorderOption {
	return func(m *PaymentOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentOrder
		)
		m.oldValue = func(ctx context.Context) (*PaymentOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentOrder sets the old PaymentOrder of the mutation.
func withPaymentOrder(node *PaymentOrder) paymentorderOption {
	return func(m *PaymentOrderMutation) {
		m.oldValue = func(context.Context) (*PaymentOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentOrder entities.
func (m *PaymentOrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentOrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentOrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentOrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentOrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentOrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentOrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentOrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentOrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentOrderMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentOrderMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *PaymentOrderMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentOrderMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentOrderMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetAmountPaid sets the "amount_paid" field.
func (m *PaymentOrderMutation) SetAmountPaid(d decimal.Decimal) {
	m.amount_paid = &d
	m.addamount_paid = nil
}

// AmountPaid returns the value of the "amount_paid" field in the mutation.
func (m *PaymentOrderMutation) AmountPaid() (r decimal.Decimal, exists bool) {
	v := m.amount_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountPaid returns the old "amount_paid" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldAmountPaid(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountPaid: %w", err)
	}
	return oldValue.AmountPaid, nil
}

// AddAmountPaid adds d to the "amount_paid" field.
func (m *PaymentOrderMutation) AddAmountPaid(d decimal.Decimal) {
	if m.addamount_paid != nil {
		*m.addamount_paid = m.addamount_paid.Add(d)
	} else {
		m.addamount_paid = &d
	}
}

// AddedAmountPaid returns the value that was added to the "amount_paid" field in this mutation.
func (m *PaymentOrderMutation) AddedAmountPaid() (r decimal.Decimal, exists bool) {
	v := m.addamount_paid
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountPaid resets all changes to the "amount_paid" field.
func (m *PaymentOrderMutation) ResetAmountPaid() {
	m.amount_paid = nil
	m.addamount_paid = nil
}

// SetAmountReturned sets the "amount_returned" field.
func (m *PaymentOrderMutation) SetAmountReturned(d decimal.Decimal) {
	m.amount_returned = &d
	m.addamount_returned = nil
}

// AmountReturned returns the value of the "amount_returned" field in the mutation.
func (m *PaymentOrderMutation) AmountReturned() (r decimal.Decimal, exists bool) {
	v := m.amount_returned
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountReturned returns the old "amount_returned" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldAmountReturned(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountReturned is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountReturned requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountReturned: %w", err)
	}
	return oldValue.AmountReturned, nil
}

// AddAmountReturned adds d to the "amount_returned" field.
func (m *PaymentOrderMutation) AddAmountReturned(d decimal.Decimal) {
	if m.addamount_returned != nil {
		*m.addamount_returned = m.addamount_returned.Add(d)
	} else {
		m.addamount_returned = &d
	}
}

// AddedAmountReturned returns the value that was added to the "amount_returned" field in this mutation.
func (m *PaymentOrderMutation) AddedAmountReturned() (r decimal.Decimal, exists bool) {
	v := m.addamount_returned
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountReturned resets all changes to the "amount_returned" field.
func (m *PaymentOrderMutation) ResetAmountReturned() {
	m.amount_returned = nil
	m.addamount_returned = nil
}

// SetPercentSettled sets the "percent_settled" field.
func (m *PaymentOrderMutation) SetPercentSettled(d decimal.Decimal) {
	m.percent_settled = &d
	m.addpercent_settled = nil
}

// PercentSettled returns the value of the "percent_settled" field in the mutation.
func (m *PaymentOrderMutation) PercentSettled() (r decimal.Decimal, exists bool) {
	v := m.percent_settled
	if v == nil {
		return
	}
	return *v, true
}

// OldPercentSettled returns the old "percent_settled" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldPercentSettled(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercentSettled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercentSettled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercentSettled: %w", err)
	}
	return oldValue.PercentSettled, nil
}

// AddPercentSettled adds d to the "percent_settled" field.
func (m *PaymentOrderMutation) AddPercentSettled(d decimal.Decimal) {
	if m.addpercent_settled != nil {
		*m.addpercent_settled = m.addpercent_settled.Add(d)
	} else {
		m.addpercent_settled = &d
	}
}

// AddedPercentSettled returns the value that was added to the "percent_settled" field in this mutation.
func (m *PaymentOrderMutation) AddedPercentSettled() (r decimal.Decimal, exists bool) {
	v := m.addpercent_settled
	if v == nil {
		return
	}
	return *v, true
}

// ResetPercentSettled resets all changes to the "percent_settled" field.
func (m *PaymentOrderMutation) ResetPercentSettled() {
	m.percent_settled = nil
	m.addpercent_settled = nil
}

// SetSenderFee sets the "sender_fee" field.
func (m *PaymentOrderMutation) SetSenderFee(d decimal.Decimal) {
	m.sender_fee = &d
	m.addsender_fee = nil
}

// SenderFee returns the value of the "sender_fee" field in the mutation.
func (m *PaymentOrderMutation) SenderFee() (r decimal.Decimal, exists bool) {
	v := m.sender_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderFee returns the old "sender_fee" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldSenderFee(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderFee: %w", err)
	}
	return oldValue.SenderFee, nil
}

// AddSenderFee adds d to the "sender_fee" field.
func (m *PaymentOrderMutation) AddSenderFee(d decimal.Decimal) {
	if m.addsender_fee != nil {
		*m.addsender_fee = m.addsender_fee.Add(d)
	} else {
		m.addsender_fee = &d
	}
}

// AddedSenderFee returns the value that was added to the "sender_fee" field in this mutation.
func (m *PaymentOrderMutation) AddedSenderFee() (r decimal.Decimal, exists bool) {
	v := m.addsender_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetSenderFee resets all changes to the "sender_fee" field.
func (m *PaymentOrderMutation) ResetSenderFee() {
	m.sender_fee = nil
	m.addsender_fee = nil
}

// SetNetworkFee sets the "network_fee" field.
func (m *PaymentOrderMutation) SetNetworkFee(d decimal.Decimal) {
	m.network_fee = &d
	m.addnetwork_fee = nil
}

// NetworkFee returns the value of the "network_fee" field in the mutation.
func (m *PaymentOrderMutation) NetworkFee() (r decimal.Decimal, exists bool) {
	v := m.network_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldNetworkFee returns the old "network_fee" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldNetworkFee(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetworkFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetworkFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetworkFee: %w", err)
	}
	return oldValue.NetworkFee, nil
}

// AddNetworkFee adds d to the "network_fee" field.
func (m *PaymentOrderMutation) AddNetworkFee(d decimal.Decimal) {
	if m.addnetwork_fee != nil {
		*m.addnetwork_fee = m.addnetwork_fee.Add(d)
	} else {
		m.addnetwork_fee = &d
	}
}

// AddedNetworkFee returns the value that was added to the "network_fee" field in this mutation.
func (m *PaymentOrderMutation) AddedNetworkFee() (r decimal.Decimal, exists bool) {
	v := m.addnetwork_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetNetworkFee resets all changes to the "network_fee" field.
func (m *PaymentOrderMutation) ResetNetworkFee() {
	m.network_fee = nil
	m.addnetwork_fee = nil
}

// SetProtocolFee sets the "protocol_fee" field.
func (m *PaymentOrderMutation) SetProtocolFee(d decimal.Decimal) {
	m.protocol_fee = &d
	m.addprotocol_fee = nil
}

// ProtocolFee returns the value of the "protocol_fee" field in the mutation.
func (m *PaymentOrderMutation) ProtocolFee() (r decimal.Decimal, exists bool) {
	v := m.protocol_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldProtocolFee returns the old "protocol_fee" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldProtocolFee(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProtocolFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProtocolFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProtocolFee: %w", err)
	}
	return oldValue.ProtocolFee, nil
}

// AddProtocolFee adds d to the "protocol_fee" field.
func (m *PaymentOrderMutation) AddProtocolFee(d decimal.Decimal) {
	if m.addprotocol_fee != nil {
		*m.addprotocol_fee = m.addprotocol_fee.Add(d)
	} else {
		m.addprotocol_fee = &d
	}
}

// AddedProtocolFee returns the value that was added to the "protocol_fee" field in this mutation.
func (m *PaymentOrderMutation) AddedProtocolFee() (r decimal.Decimal, exists bool) {
	v := m.addprotocol_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetProtocolFee resets all changes to the "protocol_fee" field.
func (m *PaymentOrderMutation) ResetProtocolFee() {
	m.protocol_fee = nil
	m.addprotocol_fee = nil
}

// SetRate sets the "rate" field.
func (m *PaymentOrderMutation) SetRate(d decimal.Decimal) {
	m.rate = &d
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *PaymentOrderMutation) Rate() (r decimal.Decimal, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds d to the "rate" field.
func (m *PaymentOrderMutation) AddRate(d decimal.Decimal) {
	if m.addrate != nil {
		*m.addrate = m.addrate.Add(d)
	} else {
		m.addrate = &d
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *PaymentOrderMutation) AddedRate() (r decimal.Decimal, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate resets all changes to the "rate" field.
func (m *PaymentOrderMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *PaymentOrderMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *PaymentOrderMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *PaymentOrderMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[paymentorder.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *PaymentOrderMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *PaymentOrderMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, paymentorder.FieldTxHash)
}

// SetBlockNumber sets the "block_number" field.
func (m *PaymentOrderMutation) SetBlockNumber(i int64) {
	m.block_number = &i
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *PaymentOrderMutation) BlockNumber() (r int64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldBlockNumber(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds i to the "block_number" field.
func (m *PaymentOrderMutation) AddBlockNumber(i int64) {
	if m.addblock_number != nil {
		*m.addblock_number += i
	} else {
		m.addblock_number = &i
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *PaymentOrderMutation) AddedBlockNumber() (r int64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *PaymentOrderMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetFromAddress sets the "from_address" field.
func (m *PaymentOrderMutation) SetFromAddress(s string) {
	m.from_address = &s
}

// FromAddress returns the value of the "from_address" field in the mutation.
func (m *PaymentOrderMutation) FromAddress() (r string, exists bool) {
	v := m.from_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAddress returns the old "from_address" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldFromAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAddress: %w", err)
	}
	return oldValue.FromAddress, nil
}

// ClearFromAddress clears the value of the "from_address" field.
func (m *PaymentOrderMutation) ClearFromAddress() {
	m.from_address = nil
	m.clearedFields[paymentorder.FieldFromAddress] = struct{}{}
}

// FromAddressCleared returns if the "from_address" field was cleared in this mutation.
func (m *PaymentOrderMutation) FromAddressCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldFromAddress]
	return ok
}

// ResetFromAddress resets all changes to the "from_address" field.
func (m *PaymentOrderMutation) ResetFromAddress() {
	m.from_address = nil
	delete(m.clearedFields, paymentorder.FieldFromAddress)
}

// SetReturnAddress sets the "return_address" field.
func (m *PaymentOrderMutation) SetReturnAddress(s string) {
	m.return_address = &s
}

// ReturnAddress returns the value of the "return_address" field in the mutation.
func (m *PaymentOrderMutation) ReturnAddress() (r string, exists bool) {
	v := m.return_address
	if v == nil {
		return
	}
	return *v, true
}

// OldReturnAddress returns the old "return_address" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldReturnAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReturnAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReturnAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReturnAddress: %w", err)
	}
	return oldValue.ReturnAddress, nil
}

// ClearReturnAddress clears the value of the "return_address" field.
func (m *PaymentOrderMutation) ClearReturnAddress() {
	m.return_address = nil
	m.clearedFields[paymentorder.FieldReturnAddress] = struct{}{}
}

// ReturnAddressCleared returns if the "return_address" field was cleared in this mutation.
func (m *PaymentOrderMutation) ReturnAddressCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldReturnAddress]
	return ok
}

// ResetReturnAddress resets all changes to the "return_address" field.
func (m *PaymentOrderMutation) ResetReturnAddress() {
	m.return_address = nil
	delete(m.clearedFields, paymentorder.FieldReturnAddress)
}

// SetReceiveAddressText sets the "receive_address_text" field.
func (m *PaymentOrderMutation) SetReceiveAddressText(s string) {
	m.receive_address_text = &s
}

// ReceiveAddressText returns the value of the "receive_address_text" field in the mutation.
func (m *PaymentOrderMutation) ReceiveAddressText() (r string, exists bool) {
	v := m.receive_address_text
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiveAddressText returns the old "receive_address_text" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldReceiveAddressText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiveAddressText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiveAddressText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiveAddressText: %w", err)
	}
	return oldValue.ReceiveAddressText, nil
}

// ResetReceiveAddressText resets all changes to the "receive_address_text" field.
func (m *PaymentOrderMutation) ResetReceiveAddressText() {
	m.receive_address_text = nil
}

// SetFeePercent sets the "fee_percent" field.
func (m *PaymentOrderMutation) SetFeePercent(d decimal.Decimal) {
	m.fee_percent = &d
	m.addfee_percent = nil
}

// FeePercent returns the value of the "fee_percent" field in the mutation.
func (m *PaymentOrderMutation) FeePercent() (r decimal.Decimal, exists bool) {
	v := m.fee_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldFeePercent returns the old "fee_percent" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldFeePercent(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeePercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeePercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeePercent: %w", err)
	}
	return oldValue.FeePercent, nil
}

// AddFeePercent adds d to the "fee_percent" field.
func (m *PaymentOrderMutation) AddFeePercent(d decimal.Decimal) {
	if m.addfee_percent != nil {
		*m.addfee_percent = m.addfee_percent.Add(d)
	} else {
		m.addfee_percent = &d
	}
}

// AddedFeePercent returns the value that was added to the "fee_percent" field in this mutation.
func (m *PaymentOrderMutation) AddedFeePercent() (r decimal.Decimal, exists bool) {
	v := m.addfee_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeePercent resets all changes to the "fee_percent" field.
func (m *PaymentOrderMutation) ResetFeePercent() {
	m.fee_percent = nil
	m.addfee_percent = nil
}

// SetFeeAddress sets the "fee_address" field.
func (m *PaymentOrderMutation) SetFeeAddress(s string) {
	m.fee_address = &s
}

// FeeAddress returns the value of the "fee_address" field in the mutation.
func (m *PaymentOrderMutation) FeeAddress() (r string, exists bool) {
	v := m.fee_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeAddress returns the old "fee_address" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldFeeAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeAddress: %w", err)
	}
	return oldValue.FeeAddress, nil
}

// ClearFeeAddress clears the value of the "fee_address" field.
func (m *PaymentOrderMutation) ClearFeeAddress() {
	m.fee_address = nil
	m.clearedFields[paymentorder.FieldFeeAddress] = struct{}{}
}

// FeeAddressCleared returns if the "fee_address" field was cleared in this mutation.
func (m *PaymentOrderMutation) FeeAddressCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldFeeAddress]
	return ok
}

// ResetFeeAddress resets all changes to the "fee_address" field.
func (m *PaymentOrderMutation) ResetFeeAddress() {
	m.fee_address = nil
	delete(m.clearedFields, paymentorder.FieldFeeAddress)
}

// SetGatewayID sets the "gateway_id" field.
func (m *PaymentOrderMutation) SetGatewayID(s string) {
	m.gateway_id = &s
}

// GatewayID returns the value of the "gateway_id" field in the mutation.
func (m *PaymentOrderMutation) GatewayID() (r string, exists bool) {
	v := m.gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayID returns the old "gateway_id" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldGatewayID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayID: %w", err)
	}
	return oldValue.GatewayID, nil
}

// ClearGatewayID clears the value of the "gateway_id" field.
func (m *PaymentOrderMutation) ClearGatewayID() {
	m.gateway_id = nil
	m.clearedFields[paymentorder.FieldGatewayID] = struct{}{}
}

// GatewayIDCleared returns if the "gateway_id" field was cleared in this mutation.
func (m *PaymentOrderMutation) GatewayIDCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldGatewayID]
	return ok
}

// ResetGatewayID resets all changes to the "gateway_id" field.
func (m *PaymentOrderMutation) ResetGatewayID() {
	m.gateway_id = nil
	delete(m.clearedFields, paymentorder.FieldGatewayID)
}

// SetReference sets the "reference" field.
func (m *PaymentOrderMutation) SetReference(s string) {
	m.reference = &s
}

// Reference returns the value of the "reference" field in the mutation.
func (m *PaymentOrderMutation) Reference() (r string, exists bool) {
	v := m.reference
	if v == nil {
		return
	}
	return *v, true
}

// OldReference returns the old "reference" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldReference(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReference is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReference requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReference: %w", err)
	}
	return oldValue.Reference, nil
}

// ClearReference clears the value of the "reference" field.
func (m *PaymentOrderMutation) ClearReference() {
	m.reference = nil
	m.clearedFields[paymentorder.FieldReference] = struct{}{}
}

// ReferenceCleared returns if the "reference" field was cleared in this mutation.
func (m *PaymentOrderMutation) ReferenceCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldReference]
	return ok
}

// ResetReference resets all changes to the "reference" field.
func (m *PaymentOrderMutation) ResetReference() {
	m.reference = nil
	delete(m.clearedFields, paymentorder.FieldReference)
}

// SetStatus sets the "status" field.
func (m *PaymentOrderMutation) SetStatus(pa paymentorder.Status) {
	m.status = &pa
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentOrderMutation) Status() (r paymentorder.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldStatus(ctx context.Context) (v paymentorder.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentOrderMutation) ResetStatus() {
	m.status = nil
}

// SetSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by id.
func (m *PaymentOrderMutation) SetSenderProfileID(id uuid.UUID) {
	m.sender_profile = &id
}

// ClearSenderProfile clears the "sender_profile" edge to the SenderProfile entity.
func (m *PaymentOrderMutation) ClearSenderProfile() {
	m.clearedsender_profile = true
}

// SenderProfileCleared reports if the "sender_profile" edge to the SenderProfile entity was cleared.
func (m *PaymentOrderMutation) SenderProfileCleared() bool {
	return m.clearedsender_profile
}

// SenderProfileID returns the "sender_profile" edge ID in the mutation.
func (m *PaymentOrderMutation) SenderProfileID() (id uuid.UUID, exists bool) {
	if m.sender_profile != nil {
		return *m.sender_profile, true
	}
	return
}

// SenderProfileIDs returns the "sender_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderProfileID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) SenderProfileIDs() (ids []uuid.UUID) {
	if id := m.sender_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSenderProfile resets all changes to the "sender_profile" edge.
func (m *PaymentOrderMutation) ResetSenderProfile() {
	m.sender_profile = nil
	m.clearedsender_profile = false
}

// SetTokenID sets the "token" edge to the Token entity by id.
func (m *PaymentOrderMutation) SetTokenID(id int) {
	m.token = &id
}

// ClearToken clears the "token" edge to the Token entity.
func (m *PaymentOrderMutation) ClearToken() {
	m.clearedtoken = true
}

// TokenCleared reports if the "token" edge to the Token entity was cleared.
func (m *PaymentOrderMutation) TokenCleared() bool {
	return m.clearedtoken
}

// TokenID returns the "token" edge ID in the mutation.
func (m *PaymentOrderMutation) TokenID() (id int, exists bool) {
	if m.token != nil {
		return *m.token, true
	}
	return
}

// TokenIDs returns the "token" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) TokenIDs() (ids []int) {
	if id := m.token; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToken resets all changes to the "token" edge.
func (m *PaymentOrderMutation) ResetToken() {
	m.token = nil
	m.clearedtoken = false
}

// SetLinkedAddressID sets the "linked_address" edge to the LinkedAddress entity by id.
func (m *PaymentOrderMutation) SetLinkedAddressID(id int) {
	m.linked_address = &id
}

// ClearLinkedAddress clears the "linked_address" edge to the LinkedAddress entity.
func (m *PaymentOrderMutation) ClearLinkedAddress() {
	m.clearedlinked_address = true
}

// LinkedAddressCleared reports if the "linked_address" edge to the LinkedAddress entity was cleared.
func (m *PaymentOrderMutation) LinkedAddressCleared() bool {
	return m.clearedlinked_address
}

// LinkedAddressID returns the "linked_address" edge ID in the mutation.
func (m *PaymentOrderMutation) LinkedAddressID() (id int, exists bool) {
	if m.linked_address != nil {
		return *m.linked_address, true
	}
	return
}

// LinkedAddressIDs returns the "linked_address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LinkedAddressID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) LinkedAddressIDs() (ids []int) {
	if id := m.linked_address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLinkedAddress resets all changes to the "linked_address" edge.
func (m *PaymentOrderMutation) ResetLinkedAddress() {
	m.linked_address = nil
	m.clearedlinked_address = false
}

// SetReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by id.
func (m *PaymentOrderMutation) SetReceiveAddressID(id int) {
	m.receive_address = &id
}

// ClearReceiveAddress clears the "receive_address" edge to the ReceiveAddress entity.
func (m *PaymentOrderMutation) ClearReceiveAddress() {
	m.clearedreceive_address = true
}

// ReceiveAddressCleared reports if the "receive_address" edge to the ReceiveAddress entity was cleared.
func (m *PaymentOrderMutation) ReceiveAddressCleared() bool {
	return m.clearedreceive_address
}

// ReceiveAddressID returns the "receive_address" edge ID in the mutation.
func (m *PaymentOrderMutation) ReceiveAddressID() (id int, exists bool) {
	if m.receive_address != nil {
		return *m.receive_address, true
	}
	return
}

// ReceiveAddressIDs returns the "receive_address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiveAddressID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) ReceiveAddressIDs() (ids []int) {
	if id := m.receive_address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiveAddress resets all changes to the "receive_address" edge.
func (m *PaymentOrderMutation) ResetReceiveAddress() {
	m.receive_address = nil
	m.clearedreceive_address = false
}

// SetRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by id.
func (m *PaymentOrderMutation) SetRecipientID(id int) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the PaymentOrderRecipient entity.
func (m *PaymentOrderMutation) ClearRecipient() {
	m.clearedrecipient = true
}

// RecipientCleared reports if the "recipient" edge to the PaymentOrderRecipient entity was cleared.
func (m *PaymentOrderMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *PaymentOrderMutation) RecipientID() (id int, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) RecipientIDs() (ids []int) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *PaymentOrderMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// AddTransactionIDs adds the "transactions" edge to the TransactionLog entity by ids.
func (m *PaymentOrderMutation) AddTransactionIDs(ids ...uuid.UUID) {
	if m.transactions == nil {
		m.transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the TransactionLog entity.
func (m *PaymentOrderMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the TransactionLog entity was cleared.
func (m *PaymentOrderMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the TransactionLog entity by IDs.
func (m *PaymentOrderMutation) RemoveTransactionIDs(ids ...uuid.UUID) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the TransactionLog entity.
func (m *PaymentOrderMutation) RemovedTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *PaymentOrderMutation) TransactionsIDs() (ids []uuid.UUID) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *PaymentOrderMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the PaymentOrderMutation builder.
func (m *PaymentOrderMutation) Where(ps ...predicate.PaymentOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentOrder).
func (m *PaymentOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentOrderMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, paymentorder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, paymentorder.FieldUpdatedAt)
	}
	if m.amount != nil {
		fields = append(fields, paymentorder.FieldAmount)
	}
	if m.amount_paid != nil {
		fields = append(fields, paymentorder.FieldAmountPaid)
	}
	if m.amount_returned != nil {
		fields = append(fields, paymentorder.FieldAmountReturned)
	}
	if m.percent_settled != nil {
		fields = append(fields, paymentorder.FieldPercentSettled)
	}
	if m.sender_fee != nil {
		fields = append(fields, paymentorder.FieldSenderFee)
	}
	if m.network_fee != nil {
		fields = append(fields, paymentorder.FieldNetworkFee)
	}
	if m.protocol_fee != nil {
		fields = append(fields, paymentorder.FieldProtocolFee)
	}
	if m.rate != nil {
		fields = append(fields, paymentorder.FieldRate)
	}
	if m.tx_hash != nil {
		fields = append(fields, paymentorder.FieldTxHash)
	}
	if m.block_number != nil {
		fields = append(fields, paymentorder.FieldBlockNumber)
	}
	if m.from_address != nil {
		fields = append(fields, paymentorder.FieldFromAddress)
	}
	if m.return_address != nil {
		fields = append(fields, paymentorder.FieldReturnAddress)
	}
	if m.receive_address_text != nil {
		fields = append(fields, paymentorder.FieldReceiveAddressText)
	}
	if m.fee_percent != nil {
		fields = append(fields, paymentorder.FieldFeePercent)
	}
	if m.fee_address != nil {
		fields = append(fields, paymentorder.FieldFeeAddress)
	}
	if m.gateway_id != nil {
		fields = append(fields, paymentorder.FieldGatewayID)
	}
	if m.reference != nil {
		fields = append(fields, paymentorder.FieldReference)
	}
	if m.status != nil {
		fields = append(fields, paymentorder.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentorder.FieldCreatedAt:
		return m.CreatedAt()
	case paymentorder.FieldUpdatedAt:
		return m.UpdatedAt()
	case paymentorder.FieldAmount:
		return m.Amount()
	case paymentorder.FieldAmountPaid:
		return m.AmountPaid()
	case paymentorder.FieldAmountReturned:
		return m.AmountReturned()
	case paymentorder.FieldPercentSettled:
		return m.PercentSettled()
	case paymentorder.FieldSenderFee:
		return m.SenderFee()
	case paymentorder.FieldNetworkFee:
		return m.NetworkFee()
	case paymentorder.FieldProtocolFee:
		return m.ProtocolFee()
	case paymentorder.FieldRate:
		return m.Rate()
	case paymentorder.FieldTxHash:
		return m.TxHash()
	case paymentorder.FieldBlockNumber:
		return m.BlockNumber()
	case paymentorder.FieldFromAddress:
		return m.FromAddress()
	case paymentorder.FieldReturnAddress:
		return m.ReturnAddress()
	case paymentorder.FieldReceiveAddressText:
		return m.ReceiveAddressText()
	case paymentorder.FieldFeePercent:
		return m.FeePercent()
	case paymentorder.FieldFeeAddress:
		return m.FeeAddress()
	case paymentorder.FieldGatewayID:
		return m.GatewayID()
	case paymentorder.FieldReference:
		return m.Reference()
	case paymentorder.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentorder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case paymentorder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case paymentorder.FieldAmount:
		return m.OldAmount(ctx)
	case paymentorder.FieldAmountPaid:
		return m.OldAmountPaid(ctx)
	case paymentorder.FieldAmountReturned:
		return m.OldAmountReturned(ctx)
	case paymentorder.FieldPercentSettled:
		return m.OldPercentSettled(ctx)
	case paymentorder.FieldSenderFee:
		return m.OldSenderFee(ctx)
	case paymentorder.FieldNetworkFee:
		return m.OldNetworkFee(ctx)
	case paymentorder.FieldProtocolFee:
		return m.OldProtocolFee(ctx)
	case paymentorder.FieldRate:
		return m.OldRate(ctx)
	case paymentorder.FieldTxHash:
		return m.OldTxHash(ctx)
	case paymentorder.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case paymentorder.FieldFromAddress:
		return m.OldFromAddress(ctx)
	case paymentorder.FieldReturnAddress:
		return m.OldReturnAddress(ctx)
	case paymentorder.FieldReceiveAddressText:
		return m.OldReceiveAddressText(ctx)
	case paymentorder.FieldFeePercent:
		return m.OldFeePercent(ctx)
	case paymentorder.FieldFeeAddress:
		return m.OldFeeAddress(ctx)
	case paymentorder.FieldGatewayID:
		return m.OldGatewayID(ctx)
	case paymentorder.FieldReference:
		return m.OldReference(ctx)
	case paymentorder.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentorder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case paymentorder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case paymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case paymentorder.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountPaid(v)
		return nil
	case paymentorder.FieldAmountReturned:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountReturned(v)
		return nil
	case paymentorder.FieldPercentSettled:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercentSettled(v)
		return nil
	case paymentorder.FieldSenderFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderFee(v)
		return nil
	case paymentorder.FieldNetworkFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetworkFee(v)
		return nil
	case paymentorder.FieldProtocolFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProtocolFee(v)
		return nil
	case paymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	case paymentorder.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case paymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case paymentorder.FieldFromAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAddress(v)
		return nil
	case paymentorder.FieldReturnAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReturnAddress(v)
		return nil
	case paymentorder.FieldReceiveAddressText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiveAddressText(v)
		return nil
	case paymentorder.FieldFeePercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeePercent(v)
		return nil
	case paymentorder.FieldFeeAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeAddress(v)
		return nil
	case paymentorder.FieldGatewayID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayID(v)
		return nil
	case paymentorder.FieldReference:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReference(v)
		return nil
	case paymentorder.FieldStatus:
		v, ok := value.(paymentorder.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentOrderMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, paymentorder.FieldAmount)
	}
	if m.addamount_paid != nil {
		fields = append(fields, paymentorder.FieldAmountPaid)
	}
	if m.addamount_returned != nil {
		fields = append(fields, paymentorder.FieldAmountReturned)
	}
	if m.addpercent_settled != nil {
		fields = append(fields, paymentorder.FieldPercentSettled)
	}
	if m.addsender_fee != nil {
		fields = append(fields, paymentorder.FieldSenderFee)
	}
	if m.addnetwork_fee != nil {
		fields = append(fields, paymentorder.FieldNetworkFee)
	}
	if m.addprotocol_fee != nil {
		fields = append(fields, paymentorder.FieldProtocolFee)
	}
	if m.addrate != nil {
		fields = append(fields, paymentorder.FieldRate)
	}
	if m.addblock_number != nil {
		fields = append(fields, paymentorder.FieldBlockNumber)
	}
	if m.addfee_percent != nil {
		fields = append(fields, paymentorder.FieldFeePercent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentorder.FieldAmount:
		return m.AddedAmount()
	case paymentorder.FieldAmountPaid:
		return m.AddedAmountPaid()
	case paymentorder.FieldAmountReturned:
		return m.AddedAmountReturned()
	case paymentorder.FieldPercentSettled:
		return m.AddedPercentSettled()
	case paymentorder.FieldSenderFee:
		return m.AddedSenderFee()
	case paymentorder.FieldNetworkFee:
		return m.AddedNetworkFee()
	case paymentorder.FieldProtocolFee:
		return m.AddedProtocolFee()
	case paymentorder.FieldRate:
		return m.AddedRate()
	case paymentorder.FieldBlockNumber:
		return m.AddedBlockNumber()
	case paymentorder.FieldFeePercent:
		return m.AddedFeePercent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case paymentorder.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountPaid(v)
		return nil
	case paymentorder.FieldAmountReturned:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountReturned(v)
		return nil
	case paymentorder.FieldPercentSettled:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPercentSettled(v)
		return nil
	case paymentorder.FieldSenderFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSenderFee(v)
		return nil
	case paymentorder.FieldNetworkFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNetworkFee(v)
		return nil
	case paymentorder.FieldProtocolFee:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProtocolFee(v)
		return nil
	case paymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	case paymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	case paymentorder.FieldFeePercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeePercent(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentOrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentorder.FieldTxHash) {
		fields = append(fields, paymentorder.FieldTxHash)
	}
	if m.FieldCleared(paymentorder.FieldFromAddress) {
		fields = append(fields, paymentorder.FieldFromAddress)
	}
	if m.FieldCleared(paymentorder.FieldReturnAddress) {
		fields = append(fields, paymentorder.FieldReturnAddress)
	}
	if m.FieldCleared(paymentorder.FieldFeeAddress) {
		fields = append(fields, paymentorder.FieldFeeAddress)
	}
	if m.FieldCleared(paymentorder.FieldGatewayID) {
		fields = append(fields, paymentorder.FieldGatewayID)
	}
	if m.FieldCleared(paymentorder.FieldReference) {
		fields = append(fields, paymentorder.FieldReference)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentOrderMutation) ClearField(name string) error {
	switch name {
	case paymentorder.FieldTxHash:
		m.ClearTxHash()
		return nil
	case paymentorder.FieldFromAddress:
		m.ClearFromAddress()
		return nil
	case paymentorder.FieldReturnAddress:
		m.ClearReturnAddress()
		return nil
	case paymentorder.FieldFeeAddress:
		m.ClearFeeAddress()
		return nil
	case paymentorder.FieldGatewayID:
		m.ClearGatewayID()
		return nil
	case paymentorder.FieldReference:
		m.ClearReference()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentOrderMutation) ResetField(name string) error {
	switch name {
	case paymentorder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case paymentorder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case paymentorder.FieldAmount:
		m.ResetAmount()
		return nil
	case paymentorder.FieldAmountPaid:
		m.ResetAmountPaid()
		return nil
	case paymentorder.FieldAmountReturned:
		m.ResetAmountReturned()
		return nil
	case paymentorder.FieldPercentSettled:
		m.ResetPercentSettled()
		return nil
	case paymentorder.FieldSenderFee:
		m.ResetSenderFee()
		return nil
	case paymentorder.FieldNetworkFee:
		m.ResetNetworkFee()
		return nil
	case paymentorder.FieldProtocolFee:
		m.ResetProtocolFee()
		return nil
	case paymentorder.FieldRate:
		m.ResetRate()
		return nil
	case paymentorder.FieldTxHash:
		m.ResetTxHash()
		return nil
	case paymentorder.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case paymentorder.FieldFromAddress:
		m.ResetFromAddress()
		return nil
	case paymentorder.FieldReturnAddress:
		m.ResetReturnAddress()
		return nil
	case paymentorder.FieldReceiveAddressText:
		m.ResetReceiveAddressText()
		return nil
	case paymentorder.FieldFeePercent:
		m.ResetFeePercent()
		return nil
	case paymentorder.FieldFeeAddress:
		m.ResetFeeAddress()
		return nil
	case paymentorder.FieldGatewayID:
		m.ResetGatewayID()
		return nil
	case paymentorder.FieldReference:
		m.ResetReference()
		return nil
	case paymentorder.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.sender_profile != nil {
		edges = append(edges, paymentorder.EdgeSenderProfile)
	}
	if m.token != nil {
		edges = append(edges, paymentorder.EdgeToken)
	}
	if m.linked_address != nil {
		edges = append(edges, paymentorder.EdgeLinkedAddress)
	}
	if m.receive_address != nil {
		edges = append(edges, paymentorder.EdgeReceiveAddress)
	}
	if m.recipient != nil {
		edges = append(edges, paymentorder.EdgeRecipient)
	}
	if m.transactions != nil {
		edges = append(edges, paymentorder.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentOrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentorder.EdgeSenderProfile:
		if id := m.sender_profile; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeToken:
		if id := m.token; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeLinkedAddress:
		if id := m.linked_address; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeReceiveAddress:
		if id := m.receive_address; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedtransactions != nil {
		edges = append(edges, paymentorder.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentOrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case paymentorder.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedsender_profile {
		edges = append(edges, paymentorder.EdgeSenderProfile)
	}
	if m.clearedtoken {
		edges = append(edges, paymentorder.EdgeToken)
	}
	if m.clearedlinked_address {
		edges = append(edges, paymentorder.EdgeLinkedAddress)
	}
	if m.clearedreceive_address {
		edges = append(edges, paymentorder.EdgeReceiveAddress)
	}
	if m.clearedrecipient {
		edges = append(edges, paymentorder.EdgeRecipient)
	}
	if m.clearedtransactions {
		edges = append(edges, paymentorder.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentOrderMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentorder.EdgeSenderProfile:
		return m.clearedsender_profile
	case paymentorder.EdgeToken:
		return m.clearedtoken
	case paymentorder.EdgeLinkedAddress:
		return m.clearedlinked_address
	case paymentorder.EdgeReceiveAddress:
		return m.clearedreceive_address
	case paymentorder.EdgeRecipient:
		return m.clearedrecipient
	case paymentorder.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentOrderMutation) ClearEdge(name string) error {
	switch name {
	case paymentorder.EdgeSenderProfile:
		m.ClearSenderProfile()
		return nil
	case paymentorder.EdgeToken:
		m.ClearToken()
		return nil
	case paymentorder.EdgeLinkedAddress:
		m.ClearLinkedAddress()
		return nil
	case paymentorder.EdgeReceiveAddress:
		m.ClearReceiveAddress()
		return nil
	case paymentorder.EdgeRecipient:
		m.ClearRecipient()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentOrderMutation) ResetEdge(name string) error {
	switch name {
	case paymentorder.EdgeSenderProfile:
		m.ResetSenderProfile()
		return nil
	case paymentorder.EdgeToken:
		m.ResetToken()
		return nil
	case paymentorder.EdgeLinkedAddress:
		m.ResetLinkedAddress()
		return nil
	case paymentorder.EdgeReceiveAddress:
		m.ResetReceiveAddress()
		return nil
	case paymentorder.EdgeRecipient:
		m.ResetRecipient()
		return nil
	case paymentorder.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder edge %s", name)
}

// PaymentOrderRecipientMutation represents an operation that mutates the PaymentOrderRecipient nodes in the graph.
type PaymentOrderRecipientMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	institution          *string
	account_identifier   *string
	account_name         *string
	memo                 *string
	provider_id          *string
	clearedFields        map[string]struct{}
	payment_order        *uuid.UUID
	clearedpayment_order bool
	done                 bool
	oldValue             func(context.Context) (*PaymentOrderRecipient, error)
	predicates           []predicate.PaymentOrderRecipient
}

var _ ent.Mutation = (*PaymentOrderRecipientMutation)(nil)

// paymentorderrecipientOption allows management of the mutation configuration using functional options.
type paymentorderrecipientOption func(*PaymentOrderRecipientMutation)

// newPaymentOrderRecipientMutation creates new mutation for the PaymentOrderRecipient entity.
func newPaymentOrderRecipientMutation(c config, op Op, opts ...paymentorderrecipientOption) *PaymentOrderRecipientMutation {
	m := &PaymentOrderRecipientMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentOrderRecipient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentOrderRecipientID sets the ID field of the mutation.
func withPaymentOrderRecipientID(id int) paymentorderrecipientOption {
	return func(m *PaymentOrderRecipientMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentOrderRecipient
		)
		m.oldValue = func(ctx context.Context) (*PaymentOrderRecipient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentOrderRecipient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentOrderRecipient sets the old PaymentOrderRecipient of the mutation.
func withPaymentOrderRecipient(node *PaymentOrderRecipient) paymentorderrecipientOption {
	return func(m *PaymentOrderRecipientMutation) {
		m.oldValue = func(context.Context) (*PaymentOrderRecipient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentOrderRecipientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentOrderRecipientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentOrderRecipientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentOrderRecipientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentOrderRecipient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInstitution sets the "institution" field.
func (m *PaymentOrderRecipientMutation) SetInstitution(s string) {
	m.institution = &s
}

// Institution returns the value of the "institution" field in the mutation.
func (m *PaymentOrderRecipientMutation) Institution() (r string, exists bool) {
	v := m.institution
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitution returns the old "institution" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldInstitution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitution: %w", err)
	}
	return oldValue.Institution, nil
}

// ResetInstitution resets all changes to the "institution" field.
func (m *PaymentOrderRecipientMutation) ResetInstitution() {
	m.institution = nil
}

// SetAccountIdentifier sets the "account_identifier" field.
func (m *PaymentOrderRecipientMutation) SetAccountIdentifier(s string) {
	m.account_identifier = &s
}

// AccountIdentifier returns the value of the "account_identifier" field in the mutation.
func (m *PaymentOrderRecipientMutation) AccountIdentifier() (r string, exists bool) {
	v := m.account_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountIdentifier returns the old "account_identifier" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldAccountIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountIdentifier: %w", err)
	}
	return oldValue.AccountIdentifier, nil
}

// ResetAccountIdentifier resets all changes to the "account_identifier" field.
func (m *PaymentOrderRecipientMutation) ResetAccountIdentifier() {
	m.account_identifier = nil
}

// SetAccountName sets the "account_name" field.
func (m *PaymentOrderRecipientMutation) SetAccountName(s string) {
	m.account_name = &s
}

// AccountName returns the value of the "account_name" field in the mutation.
func (m *PaymentOrderRecipientMutation) AccountName() (r string, exists bool) {
	v := m.account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountName returns the old "account_name" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldAccountName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountName: %w", err)
	}
	return oldValue.AccountName, nil
}

// ResetAccountName resets all changes to the "account_name" field.
func (m *PaymentOrderRecipientMutation) ResetAccountName() {
	m.account_name = nil
}

// SetMemo sets the "memo" field.
func (m *PaymentOrderRecipientMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *PaymentOrderRecipientMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *PaymentOrderRecipientMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[paymentorderrecipient.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *PaymentOrderRecipientMutation) MemoCleared() bool {
	_, ok := m.clearedFields[paymentorderrecipient.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *PaymentOrderRecipientMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, paymentorderrecipient.FieldMemo)
}

// SetProviderID sets the "provider_id" field.
func (m *PaymentOrderRecipientMutation) SetProviderID(s string) {
	m.provider_id = &s
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *PaymentOrderRecipientMutation) ProviderID() (r string, exists bool) {
	v := m.provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldProviderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ClearProviderID clears the value of the "provider_id" field.
func (m *PaymentOrderRecipientMutation) ClearProviderID() {
	m.provider_id = nil
	m.clearedFields[paymentorderrecipient.FieldProviderID] = struct{}{}
}

// ProviderIDCleared returns if the "provider_id" field was cleared in this mutation.
func (m *PaymentOrderRecipientMutation) ProviderIDCleared() bool {
	_, ok := m.clearedFields[paymentorderrecipient.FieldProviderID]
	return ok
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *PaymentOrderRecipientMutation) ResetProviderID() {
	m.provider_id = nil
	delete(m.clearedFields, paymentorderrecipient.FieldProviderID)
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by id.
func (m *PaymentOrderRecipientMutation) SetPaymentOrderID(id uuid.UUID) {
	m.payment_order = &id
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (m *PaymentOrderRecipientMutation) ClearPaymentOrder() {
	m.clearedpayment_order = true
}

// PaymentOrderCleared reports if the "payment_order" edge to the PaymentOrder entity was cleared.
func (m *PaymentOrderRecipientMutation) PaymentOrderCleared() bool {
	return m.clearedpayment_order
}

// PaymentOrderID returns the "payment_order" edge ID in the mutation.
func (m *PaymentOrderRecipientMutation) PaymentOrderID() (id uuid.UUID, exists bool) {
	if m.payment_order != nil {
		return *m.payment_order, true
	}
	return
}

// PaymentOrderIDs returns the "payment_order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentOrderID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderRecipientMutation) PaymentOrderIDs() (ids []uuid.UUID) {
	if id := m.payment_order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymentOrder resets all changes to the "payment_order" edge.
func (m *PaymentOrderRecipientMutation) ResetPaymentOrder() {
	m.payment_order = nil
	m.clearedpayment_order = false
}

// Where appends a list predicates to the PaymentOrderRecipientMutation builder.
func (m *PaymentOrderRecipientMutation) Where(ps ...predicate.PaymentOrderRecipient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentOrderRecipientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentOrderRecipientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentOrderRecipient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentOrderRecipientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentOrderRecipientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentOrderRecipient).
func (m *PaymentOrderRecipientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentOrderRecipientMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.institution != nil {
		fields = append(fields, paymentorderrecipient.FieldInstitution)
	}
	if m.account_identifier != nil {
		fields = append(fields, paymentorderrecipient.FieldAccountIdentifier)
	}
	if m.account_name != nil {
		fields = append(fields, paymentorderrecipient.FieldAccountName)
	}
	if m.memo != nil {
		fields = append(fields, paymentorderrecipient.FieldMemo)
	}
	if m.provider_id != nil {
		fields = append(fields, paymentorderrecipient.FieldProviderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentOrderRecipientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		return m.Institution()
	case paymentorderrecipient.FieldAccountIdentifier:
		return m.AccountIdentifier()
	case paymentorderrecipient.FieldAccountName:
		return m.AccountName()
	case paymentorderrecipient.FieldMemo:
		return m.Memo()
	case paymentorderrecipient.FieldProviderID:
		return m.ProviderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentOrderRecipientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		return m.OldInstitution(ctx)
	case paymentorderrecipient.FieldAccountIdentifier:
		return m.OldAccountIdentifier(ctx)
	case paymentorderrecipient.FieldAccountName:
		return m.OldAccountName(ctx)
	case paymentorderrecipient.FieldMemo:
		return m.OldMemo(ctx)
	case paymentorderrecipient.FieldProviderID:
		return m.OldProviderID(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderRecipientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitution(v)
		return nil
	case paymentorderrecipient.FieldAccountIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountIdentifier(v)
		return nil
	case paymentorderrecipient.FieldAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountName(v)
		return nil
	case paymentorderrecipient.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case paymentorderrecipient.FieldProviderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentOrderRecipientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentOrderRecipientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderRecipientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PaymentOrderRecipient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentOrderRecipientMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentorderrecipient.FieldMemo) {
		fields = append(fields, paymentorderrecipient.FieldMemo)
	}
	if m.FieldCleared(paymentorderrecipient.FieldProviderID) {
		fields = append(fields, paymentorderrecipient.FieldProviderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentOrderRecipientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ClearField(name string) error {
	switch name {
	case paymentorderrecipient.FieldMemo:
		m.ClearMemo()
		return nil
	case paymentorderrecipient.FieldProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ResetField(name string) error {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		m.ResetInstitution()
		return nil
	case paymentorderrecipient.FieldAccountIdentifier:
		m.ResetAccountIdentifier()
		return nil
	case paymentorderrecipient.FieldAccountName:
		m.ResetAccountName()
		return nil
	case paymentorderrecipient.FieldMemo:
		m.ResetMemo()
		return nil
	case paymentorderrecipient.FieldProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentOrderRecipientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_order != nil {
		edges = append(edges, paymentorderrecipient.EdgePaymentOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentOrderRecipientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		if id := m.payment_order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentOrderRecipientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentOrderRecipientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentOrderRecipientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_order {
		edges = append(edges, paymentorderrecipient.EdgePaymentOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentOrderRecipientMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		return m.clearedpayment_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ClearEdge(name string) error {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		m.ClearPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ResetEdge(name string) error {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		m.ResetPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient edge %s", name)
}

// ProviderOrderTokenMutation represents an operation that mutates the ProviderOrderToken nodes in the graph.
type ProviderOrderTokenMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	created_at                  *time.Time
	updated_at                  *time.Time
	symbol                      *string
	fixed_conversion_rate       *decimal.Decimal
	addfixed_conversion_rate    *decimal.Decimal
	floating_conversion_rate    *decimal.Decimal
	addfloating_conversion_rate *decimal.Decimal
	conversion_rate_type        *providerordertoken.ConversionRateType
	max_order_amount            *decimal.Decimal
	addmax_order_amount         *decimal.Decimal
	min_order_amount            *decimal.Decimal
	addmin_order_amount         *decimal.Decimal
	addresses                   *[]struct {
		Address string "json:\"address\""
		Network string "json:\"network\""
	}
	appendaddresses []struct {
		Address string "json:\"address\""
		Network string "json:\"network\""
	}
	clearedFields   map[string]struct{}
	provider        *string
	clearedprovider bool
	done            bool
	oldValue        func(context.Context) (*ProviderOrderToken, error)
	predicates      []predicate.ProviderOrderToken
}

var _ ent.Mutation = (*ProviderOrderTokenMutation)(nil)

// providerordertokenOption allows management of the mutation configuration using functional options.
type providerordertokenOption func(*ProviderOrderTokenMutation)

// newProviderOrderTokenMutation creates new mutation for the ProviderOrderToken entity.
func newProviderOrderTokenMutation(c config, op Op, opts ...providerordertokenOption) *ProviderOrderTokenMutation {
	m := &ProviderOrderTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderOrderToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderOrderTokenID sets the ID field of the mutation.
func withProviderOrderTokenID(id int) providerordertokenOption {
	return func(m *ProviderOrderTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderOrderToken
		)
		m.oldValue = func(ctx context.Context) (*ProviderOrderToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderOrderToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderOrderToken sets the old ProviderOrderToken of the mutation.
func withProviderOrderToken(node *ProviderOrderToken) providerordertokenOption {
	return func(m *ProviderOrderTokenMutation) {
		m.oldValue = func(context.Context) (*ProviderOrderToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderOrderTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderOrderTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderOrderTokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderOrderTokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderOrderToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderOrderTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderOrderTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderOrderTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderOrderTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderOrderTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderOrderTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSymbol sets the "symbol" field.
func (m *ProviderOrderTokenMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *ProviderOrderTokenMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *ProviderOrderTokenMutation) ResetSymbol() {
	m.symbol = nil
}

// SetFixedConversionRate sets the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) SetFixedConversionRate(d decimal.Decimal) {
	m.fixed_conversion_rate = &d
	m.addfixed_conversion_rate = nil
}

// FixedConversionRate returns the value of the "fixed_conversion_rate" field in the mutation.
func (m *ProviderOrderTokenMutation) FixedConversionRate() (r decimal.Decimal, exists bool) {
	v := m.fixed_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFixedConversionRate returns the old "fixed_conversion_rate" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldFixedConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFixedConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFixedConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixedConversionRate: %w", err)
	}
	return oldValue.FixedConversionRate, nil
}

// AddFixedConversionRate adds d to the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) AddFixedConversionRate(d decimal.Decimal) {
	if m.addfixed_conversion_rate != nil {
		*m.addfixed_conversion_rate = m.addfixed_conversion_rate.Add(d)
	} else {
		m.addfixed_conversion_rate = &d
	}
}

// AddedFixedConversionRate returns the value that was added to the "fixed_conversion_rate" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedFixedConversionRate() (r decimal.Decimal, exists bool) {
	v := m.addfixed_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFixedConversionRate resets all changes to the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) ResetFixedConversionRate() {
	m.fixed_conversion_rate = nil
	m.addfixed_conversion_rate = nil
}

// SetFloatingConversionRate sets the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) SetFloatingConversionRate(d decimal.Decimal) {
	m.floating_conversion_rate = &d
	m.addfloating_conversion_rate = nil
}

// FloatingConversionRate returns the value of the "floating_conversion_rate" field in the mutation.
func (m *ProviderOrderTokenMutation) FloatingConversionRate() (r decimal.Decimal, exists bool) {
	v := m.floating_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFloatingConversionRate returns the old "floating_conversion_rate" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldFloatingConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloatingConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloatingConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloatingConversionRate: %w", err)
	}
	return oldValue.FloatingConversionRate, nil
}

// AddFloatingConversionRate adds d to the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) AddFloatingConversionRate(d decimal.Decimal) {
	if m.addfloating_conversion_rate != nil {
		*m.addfloating_conversion_rate = m.addfloating_conversion_rate.Add(d)
	} else {
		m.addfloating_conversion_rate = &d
	}
}

// AddedFloatingConversionRate returns the value that was added to the "floating_conversion_rate" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedFloatingConversionRate() (r decimal.Decimal, exists bool) {
	v := m.addfloating_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloatingConversionRate resets all changes to the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) ResetFloatingConversionRate() {
	m.floating_conversion_rate = nil
	m.addfloating_conversion_rate = nil
}

// SetConversionRateType sets the "conversion_rate_type" field.
func (m *ProviderOrderTokenMutation) SetConversionRateType(prt providerordertoken.ConversionRateType) {
	m.conversion_rate_type = &prt
}

// ConversionRateType returns the value of the "conversion_rate_type" field in the mutation.
func (m *ProviderOrderTokenMutation) ConversionRateType() (r providerordertoken.ConversionRateType, exists bool) {
	v := m.conversion_rate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRateType returns the old "conversion_rate_type" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldConversionRateType(ctx context.Context) (v providerordertoken.ConversionRateType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRateType: %w", err)
	}
	return oldValue.ConversionRateType, nil
}

// ResetConversionRateType resets all changes to the "conversion_rate_type" field.
func (m *ProviderOrderTokenMutation) ResetConversionRateType() {
	m.conversion_rate_type = nil
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) SetMaxOrderAmount(d decimal.Decimal) {
	m.max_order_amount = &d
	m.addmax_order_amount = nil
}

// MaxOrderAmount returns the value of the "max_order_amount" field in the mutation.
func (m *ProviderOrderTokenMutation) MaxOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.max_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxOrderAmount returns the old "max_order_amount" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldMaxOrderAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxOrderAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxOrderAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxOrderAmount: %w", err)
	}
	return oldValue.MaxOrderAmount, nil
}

// AddMaxOrderAmount adds d to the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) AddMaxOrderAmount(d decimal.Decimal) {
	if m.addmax_order_amount != nil {
		*m.addmax_order_amount = m.addmax_order_amount.Add(d)
	} else {
		m.addmax_order_amount = &d
	}
}

// AddedMaxOrderAmount returns the value that was added to the "max_order_amount" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedMaxOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.addmax_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxOrderAmount resets all changes to the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) ResetMaxOrderAmount() {
	m.max_order_amount = nil
	m.addmax_order_amount = nil
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) SetMinOrderAmount(d decimal.Decimal) {
	m.min_order_amount = &d
	m.addmin_order_amount = nil
}

// MinOrderAmount returns the value of the "min_order_amount" field in the mutation.
func (m *ProviderOrderTokenMutation) MinOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.min_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMinOrderAmount returns the old "min_order_amount" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldMinOrderAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinOrderAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinOrderAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinOrderAmount: %w", err)
	}
	return oldValue.MinOrderAmount, nil
}

// AddMinOrderAmount adds d to the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) AddMinOrderAmount(d decimal.Decimal) {
	if m.addmin_order_amount != nil {
		*m.addmin_order_amount = m.addmin_order_amount.Add(d)
	} else {
		m.addmin_order_amount = &d
	}
}

// AddedMinOrderAmount returns the value that was added to the "min_order_amount" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedMinOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.addmin_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinOrderAmount resets all changes to the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) ResetMinOrderAmount() {
	m.min_order_amount = nil
	m.addmin_order_amount = nil
}

// SetAddresses sets the "addresses" field.
func (m *ProviderOrderTokenMutation) SetAddresses(s []struct {
	Address string "json:\"address\""
	Network string "json:\"network\""
}) {
	m.addresses = &s
	m.appendaddresses = nil
}

// Addresses returns the value of the "addresses" field in the mutation.
func (m *ProviderOrderTokenMutation) Addresses() (r []struct {
	Address string "json:\"address\""
	Network string "json:\"network\""
}, exists bool) {
	v := m.addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldAddresses returns the old "addresses" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldAddresses(ctx context.Context) (v []struct {
	Address string "json:\"address\""
	Network string "json:\"network\""
}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddresses: %w", err)
	}
	return oldValue.Addresses, nil
}

// AppendAddresses adds s to the "addresses" field.
func (m *ProviderOrderTokenMutation) AppendAddresses(s []struct {
	Address string "json:\"address\""
	Network string "json:\"network\""
}) {
	m.appendaddresses = append(m.appendaddresses, s...)
}

// AppendedAddresses returns the list of values that were appended to the "addresses" field in this mutation.
func (m *ProviderOrderTokenMutation) AppendedAddresses() ([]struct {
	Address string "json:\"address\""
	Network string "json:\"network\""
}, bool) {
	if len(m.appendaddresses) == 0 {
		return nil, false
	}
	return m.appendaddresses, true
}

// ResetAddresses resets all changes to the "addresses" field.
func (m *ProviderOrderTokenMutation) ResetAddresses() {
	m.addresses = nil
	m.appendaddresses = nil
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by id.
func (m *ProviderOrderTokenMutation) SetProviderID(id string) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (m *ProviderOrderTokenMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderProfile entity was cleared.
func (m *ProviderOrderTokenMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *ProviderOrderTokenMutation) ProviderID() (id string, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *ProviderOrderTokenMutation) ProviderIDs() (ids []string) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *ProviderOrderTokenMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// Where appends a list predicates to the ProviderOrderTokenMutation builder.
func (m *ProviderOrderTokenMutation) Where(ps ...predicate.ProviderOrderToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderOrderTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderOrderTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderOrderToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderOrderTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderOrderTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderOrderToken).
func (m *ProviderOrderTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderOrderTokenMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, providerordertoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, providerordertoken.FieldUpdatedAt)
	}
	if m.symbol != nil {
		fields = append(fields, providerordertoken.FieldSymbol)
	}
	if m.fixed_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFixedConversionRate)
	}
	if m.floating_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFloatingConversionRate)
	}
	if m.conversion_rate_type != nil {
		fields = append(fields, providerordertoken.FieldConversionRateType)
	}
	if m.max_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMaxOrderAmount)
	}
	if m.min_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMinOrderAmount)
	}
	if m.addresses != nil {
		fields = append(fields, providerordertoken.FieldAddresses)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderOrderTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerordertoken.FieldCreatedAt:
		return m.CreatedAt()
	case providerordertoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerordertoken.FieldSymbol:
		return m.Symbol()
	case providerordertoken.FieldFixedConversionRate:
		return m.FixedConversionRate()
	case providerordertoken.FieldFloatingConversionRate:
		return m.FloatingConversionRate()
	case providerordertoken.FieldConversionRateType:
		return m.ConversionRateType()
	case providerordertoken.FieldMaxOrderAmount:
		return m.MaxOrderAmount()
	case providerordertoken.FieldMinOrderAmount:
		return m.MinOrderAmount()
	case providerordertoken.FieldAddresses:
		return m.Addresses()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderOrderTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerordertoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case providerordertoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerordertoken.FieldSymbol:
		return m.OldSymbol(ctx)
	case providerordertoken.FieldFixedConversionRate:
		return m.OldFixedConversionRate(ctx)
	case providerordertoken.FieldFloatingConversionRate:
		return m.OldFloatingConversionRate(ctx)
	case providerordertoken.FieldConversionRateType:
		return m.OldConversionRateType(ctx)
	case providerordertoken.FieldMaxOrderAmount:
		return m.OldMaxOrderAmount(ctx)
	case providerordertoken.FieldMinOrderAmount:
		return m.OldMinOrderAmount(ctx)
	case providerordertoken.FieldAddresses:
		return m.OldAddresses(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerordertoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case providerordertoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerordertoken.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case providerordertoken.FieldFixedConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixedConversionRate(v)
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloatingConversionRate(v)
		return nil
	case providerordertoken.FieldConversionRateType:
		v, ok := value.(providerordertoken.ConversionRateType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRateType(v)
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxOrderAmount(v)
		return nil
	case providerordertoken.FieldMinOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinOrderAmount(v)
		return nil
	case providerordertoken.FieldAddresses:
		v, ok := value.([]struct {
			Address string "json:\"address\""
			Network string "json:\"network\""
		})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddresses(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderOrderTokenMutation) AddedFields() []string {
	var fields []string
	if m.addfixed_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFixedConversionRate)
	}
	if m.addfloating_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFloatingConversionRate)
	}
	if m.addmax_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMaxOrderAmount)
	}
	if m.addmin_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMinOrderAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderOrderTokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case providerordertoken.FieldFixedConversionRate:
		return m.AddedFixedConversionRate()
	case providerordertoken.FieldFloatingConversionRate:
		return m.AddedFloatingConversionRate()
	case providerordertoken.FieldMaxOrderAmount:
		return m.AddedMaxOrderAmount()
	case providerordertoken.FieldMinOrderAmount:
		return m.AddedMinOrderAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case providerordertoken.FieldFixedConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFixedConversionRate(v)
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloatingConversionRate(v)
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxOrderAmount(v)
		return nil
	case providerordertoken.FieldMinOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinOrderAmount(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderOrderTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderOrderTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderOrderTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderOrderToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderOrderTokenMutation) ResetField(name string) error {
	switch name {
	case providerordertoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case providerordertoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerordertoken.FieldSymbol:
		m.ResetSymbol()
		return nil
	case providerordertoken.FieldFixedConversionRate:
		m.ResetFixedConversionRate()
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		m.ResetFloatingConversionRate()
		return nil
	case providerordertoken.FieldConversionRateType:
		m.ResetConversionRateType()
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		m.ResetMaxOrderAmount()
		return nil
	case providerordertoken.FieldMinOrderAmount:
		m.ResetMinOrderAmount()
		return nil
	case providerordertoken.FieldAddresses:
		m.ResetAddresses()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderOrderTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.provider != nil {
		edges = append(edges, providerordertoken.EdgeProvider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderOrderTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerordertoken.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderOrderTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderOrderTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderOrderTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprovider {
		edges = append(edges, providerordertoken.EdgeProvider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderOrderTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case providerordertoken.EdgeProvider:
		return m.clearedprovider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderOrderTokenMutation) ClearEdge(name string) error {
	switch name {
	case providerordertoken.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderOrderTokenMutation) ResetEdge(name string) error {
	switch name {
	case providerordertoken.EdgeProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken edge %s", name)
}

// ProviderProfileMutation represents an operation that mutates the ProviderProfile nodes in the graph.
type ProviderProfileMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	trading_name             *string
	host_identifier          *string
	provision_mode           *providerprofile.ProvisionMode
	is_active                *bool
	is_available             *bool
	updated_at               *time.Time
	visibility_mode          *providerprofile.VisibilityMode
	address                  *string
	mobile_number            *string
	date_of_birth            *time.Time
	business_name            *string
	identity_document_type   *providerprofile.IdentityDocumentType
	identity_document        *string
	business_document        *string
	is_kyb_verified          *bool
	clearedFields            map[string]struct{}
	user                     *uuid.UUID
	cleareduser              bool
	api_key                  *uuid.UUID
	clearedapi_key           bool
	currency                 *uuid.UUID
	clearedcurrency          bool
	provision_buckets        map[int]struct{}
	removedprovision_buckets map[int]struct{}
	clearedprovision_buckets bool
	order_tokens             map[int]struct{}
	removedorder_tokens      map[int]struct{}
	clearedorder_tokens      bool
	provider_rating          *int
	clearedprovider_rating   bool
	assigned_orders          map[uuid.UUID]struct{}
	removedassigned_orders   map[uuid.UUID]struct{}
	clearedassigned_orders   bool
	done                     bool
	oldValue                 func(context.Context) (*ProviderProfile, error)
	predicates               []predicate.ProviderProfile
}

var _ ent.Mutation = (*ProviderProfileMutation)(nil)

// providerprofileOption allows management of the mutation configuration using functional options.
type providerprofileOption func(*ProviderProfileMutation)

// newProviderProfileMutation creates new mutation for the ProviderProfile entity.
func newProviderProfileMutation(c config, op Op, opts ...providerprofileOption) *ProviderProfileMutation {
	m := &ProviderProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderProfileID sets the ID field of the mutation.
func withProviderProfileID(id string) providerprofileOption {
	return func(m *ProviderProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderProfile
		)
		m.oldValue = func(ctx context.Context) (*ProviderProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderProfile sets the old ProviderProfile of the mutation.
func withProviderProfile(node *ProviderProfile) providerprofileOption {
	return func(m *ProviderProfileMutation) {
		m.oldValue = func(context.Context) (*ProviderProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProviderProfile entities.
func (m *ProviderProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTradingName sets the "trading_name" field.
func (m *ProviderProfileMutation) SetTradingName(s string) {
	m.trading_name = &s
}

// TradingName returns the value of the "trading_name" field in the mutation.
func (m *ProviderProfileMutation) TradingName() (r string, exists bool) {
	v := m.trading_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTradingName returns the old "trading_name" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldTradingName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradingName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradingName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradingName: %w", err)
	}
	return oldValue.TradingName, nil
}

// ClearTradingName clears the value of the "trading_name" field.
func (m *ProviderProfileMutation) ClearTradingName() {
	m.trading_name = nil
	m.clearedFields[providerprofile.FieldTradingName] = struct{}{}
}

// TradingNameCleared returns if the "trading_name" field was cleared in this mutation.
func (m *ProviderProfileMutation) TradingNameCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldTradingName]
	return ok
}

// ResetTradingName resets all changes to the "trading_name" field.
func (m *ProviderProfileMutation) ResetTradingName() {
	m.trading_name = nil
	delete(m.clearedFields, providerprofile.FieldTradingName)
}

// SetHostIdentifier sets the "host_identifier" field.
func (m *ProviderProfileMutation) SetHostIdentifier(s string) {
	m.host_identifier = &s
}

// HostIdentifier returns the value of the "host_identifier" field in the mutation.
func (m *ProviderProfileMutation) HostIdentifier() (r string, exists bool) {
	v := m.host_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldHostIdentifier returns the old "host_identifier" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldHostIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostIdentifier: %w", err)
	}
	return oldValue.HostIdentifier, nil
}

// ClearHostIdentifier clears the value of the "host_identifier" field.
func (m *ProviderProfileMutation) ClearHostIdentifier() {
	m.host_identifier = nil
	m.clearedFields[providerprofile.FieldHostIdentifier] = struct{}{}
}

// HostIdentifierCleared returns if the "host_identifier" field was cleared in this mutation.
func (m *ProviderProfileMutation) HostIdentifierCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldHostIdentifier]
	return ok
}

// ResetHostIdentifier resets all changes to the "host_identifier" field.
func (m *ProviderProfileMutation) ResetHostIdentifier() {
	m.host_identifier = nil
	delete(m.clearedFields, providerprofile.FieldHostIdentifier)
}

// SetProvisionMode sets the "provision_mode" field.
func (m *ProviderProfileMutation) SetProvisionMode(pm providerprofile.ProvisionMode) {
	m.provision_mode = &pm
}

// ProvisionMode returns the value of the "provision_mode" field in the mutation.
func (m *ProviderProfileMutation) ProvisionMode() (r providerprofile.ProvisionMode, exists bool) {
	v := m.provision_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldProvisionMode returns the old "provision_mode" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldProvisionMode(ctx context.Context) (v providerprofile.ProvisionMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvisionMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvisionMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvisionMode: %w", err)
	}
	return oldValue.ProvisionMode, nil
}

// ResetProvisionMode resets all changes to the "provision_mode" field.
func (m *ProviderProfileMutation) ResetProvisionMode() {
	m.provision_mode = nil
}

// SetIsActive sets the "is_active" field.
func (m *ProviderProfileMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ProviderProfileMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ProviderProfileMutation) ResetIsActive() {
	m.is_active = nil
}

// SetIsAvailable sets the "is_available" field.
func (m *ProviderProfileMutation) SetIsAvailable(b bool) {
	m.is_available = &b
}

// IsAvailable returns the value of the "is_available" field in the mutation.
func (m *ProviderProfileMutation) IsAvailable() (r bool, exists bool) {
	v := m.is_available
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAvailable returns the old "is_available" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldIsAvailable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAvailable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAvailable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAvailable: %w", err)
	}
	return oldValue.IsAvailable, nil
}

// ResetIsAvailable resets all changes to the "is_available" field.
func (m *ProviderProfileMutation) ResetIsAvailable() {
	m.is_available = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetVisibilityMode sets the "visibility_mode" field.
func (m *ProviderProfileMutation) SetVisibilityMode(pm providerprofile.VisibilityMode) {
	m.visibility_mode = &pm
}

// VisibilityMode returns the value of the "visibility_mode" field in the mutation.
func (m *ProviderProfileMutation) VisibilityMode() (r providerprofile.VisibilityMode, exists bool) {
	v := m.visibility_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibilityMode returns the old "visibility_mode" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldVisibilityMode(ctx context.Context) (v providerprofile.VisibilityMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibilityMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibilityMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibilityMode: %w", err)
	}
	return oldValue.VisibilityMode, nil
}

// ResetVisibilityMode resets all changes to the "visibility_mode" field.
func (m *ProviderProfileMutation) ResetVisibilityMode() {
	m.visibility_mode = nil
}

// SetAddress sets the "address" field.
func (m *ProviderProfileMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ProviderProfileMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *ProviderProfileMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[providerprofile.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *ProviderProfileMutation) AddressCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *ProviderProfileMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, providerprofile.FieldAddress)
}

// SetMobileNumber sets the "mobile_number" field.
func (m *ProviderProfileMutation) SetMobileNumber(s string) {
	m.mobile_number = &s
}

// MobileNumber returns the value of the "mobile_number" field in the mutation.
func (m *ProviderProfileMutation) MobileNumber() (r string, exists bool) {
	v := m.mobile_number
	if v == nil {
		return
	}
	return *v, true
}

// OldMobileNumber returns the old "mobile_number" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldMobileNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobileNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobileNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobileNumber: %w", err)
	}
	return oldValue.MobileNumber, nil
}

// ClearMobileNumber clears the value of the "mobile_number" field.
func (m *ProviderProfileMutation) ClearMobileNumber() {
	m.mobile_number = nil
	m.clearedFields[providerprofile.FieldMobileNumber] = struct{}{}
}

// MobileNumberCleared returns if the "mobile_number" field was cleared in this mutation.
func (m *ProviderProfileMutation) MobileNumberCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldMobileNumber]
	return ok
}

// ResetMobileNumber resets all changes to the "mobile_number" field.
func (m *ProviderProfileMutation) ResetMobileNumber() {
	m.mobile_number = nil
	delete(m.clearedFields, providerprofile.FieldMobileNumber)
}

// SetDateOfBirth sets the "date_of_birth" field.
func (m *ProviderProfileMutation) SetDateOfBirth(t time.Time) {
	m.date_of_birth = &t
}

// DateOfBirth returns the value of the "date_of_birth" field in the mutation.
func (m *ProviderProfileMutation) DateOfBirth() (r time.Time, exists bool) {
	v := m.date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old "date_of_birth" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldDateOfBirth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (m *ProviderProfileMutation) ClearDateOfBirth() {
	m.date_of_birth = nil
	m.clearedFields[providerprofile.FieldDateOfBirth] = struct{}{}
}

// DateOfBirthCleared returns if the "date_of_birth" field was cleared in this mutation.
func (m *ProviderProfileMutation) DateOfBirthCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldDateOfBirth]
	return ok
}

// ResetDateOfBirth resets all changes to the "date_of_birth" field.
func (m *ProviderProfileMutation) ResetDateOfBirth() {
	m.date_of_birth = nil
	delete(m.clearedFields, providerprofile.FieldDateOfBirth)
}

// SetBusinessName sets the "business_name" field.
func (m *ProviderProfileMutation) SetBusinessName(s string) {
	m.business_name = &s
}

// BusinessName returns the value of the "business_name" field in the mutation.
func (m *ProviderProfileMutation) BusinessName() (r string, exists bool) {
	v := m.business_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessName returns the old "business_name" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldBusinessName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessName: %w", err)
	}
	return oldValue.BusinessName, nil
}

// ClearBusinessName clears the value of the "business_name" field.
func (m *ProviderProfileMutation) ClearBusinessName() {
	m.business_name = nil
	m.clearedFields[providerprofile.FieldBusinessName] = struct{}{}
}

// BusinessNameCleared returns if the "business_name" field was cleared in this mutation.
func (m *ProviderProfileMutation) BusinessNameCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldBusinessName]
	return ok
}

// ResetBusinessName resets all changes to the "business_name" field.
func (m *ProviderProfileMutation) ResetBusinessName() {
	m.business_name = nil
	delete(m.clearedFields, providerprofile.FieldBusinessName)
}

// SetIdentityDocumentType sets the "identity_document_type" field.
func (m *ProviderProfileMutation) SetIdentityDocumentType(pdt providerprofile.IdentityDocumentType) {
	m.identity_document_type = &pdt
}

// IdentityDocumentType returns the value of the "identity_document_type" field in the mutation.
func (m *ProviderProfileMutation) IdentityDocumentType() (r providerprofile.IdentityDocumentType, exists bool) {
	v := m.identity_document_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityDocumentType returns the old "identity_document_type" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldIdentityDocumentType(ctx context.Context) (v providerprofile.IdentityDocumentType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentityDocumentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentityDocumentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityDocumentType: %w", err)
	}
	return oldValue.IdentityDocumentType, nil
}

// ClearIdentityDocumentType clears the value of the "identity_document_type" field.
func (m *ProviderProfileMutation) ClearIdentityDocumentType() {
	m.identity_document_type = nil
	m.clearedFields[providerprofile.FieldIdentityDocumentType] = struct{}{}
}

// IdentityDocumentTypeCleared returns if the "identity_document_type" field was cleared in this mutation.
func (m *ProviderProfileMutation) IdentityDocumentTypeCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldIdentityDocumentType]
	return ok
}

// ResetIdentityDocumentType resets all changes to the "identity_document_type" field.
func (m *ProviderProfileMutation) ResetIdentityDocumentType() {
	m.identity_document_type = nil
	delete(m.clearedFields, providerprofile.FieldIdentityDocumentType)
}

// SetIdentityDocument sets the "identity_document" field.
func (m *ProviderProfileMutation) SetIdentityDocument(s string) {
	m.identity_document = &s
}

// IdentityDocument returns the value of the "identity_document" field in the mutation.
func (m *ProviderProfileMutation) IdentityDocument() (r string, exists bool) {
	v := m.identity_document
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityDocument returns the old "identity_document" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldIdentityDocument(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentityDocument is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentityDocument requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityDocument: %w", err)
	}
	return oldValue.IdentityDocument, nil
}

// ClearIdentityDocument clears the value of the "identity_document" field.
func (m *ProviderProfileMutation) ClearIdentityDocument() {
	m.identity_document = nil
	m.clearedFields[providerprofile.FieldIdentityDocument] = struct{}{}
}

// IdentityDocumentCleared returns if the "identity_document" field was cleared in this mutation.
func (m *ProviderProfileMutation) IdentityDocumentCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldIdentityDocument]
	return ok
}

// ResetIdentityDocument resets all changes to the "identity_document" field.
func (m *ProviderProfileMutation) ResetIdentityDocument() {
	m.identity_document = nil
	delete(m.clearedFields, providerprofile.FieldIdentityDocument)
}

// SetBusinessDocument sets the "business_document" field.
func (m *ProviderProfileMutation) SetBusinessDocument(s string) {
	m.business_document = &s
}

// BusinessDocument returns the value of the "business_document" field in the mutation.
func (m *ProviderProfileMutation) BusinessDocument() (r string, exists bool) {
	v := m.business_document
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessDocument returns the old "business_document" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldBusinessDocument(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessDocument is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessDocument requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessDocument: %w", err)
	}
	return oldValue.BusinessDocument, nil
}

// ClearBusinessDocument clears the value of the "business_document" field.
func (m *ProviderProfileMutation) ClearBusinessDocument() {
	m.business_document = nil
	m.clearedFields[providerprofile.FieldBusinessDocument] = struct{}{}
}

// BusinessDocumentCleared returns if the "business_document" field was cleared in this mutation.
func (m *ProviderProfileMutation) BusinessDocumentCleared() bool {
	_, ok := m.clearedFields[providerprofile.FieldBusinessDocument]
	return ok
}

// ResetBusinessDocument resets all changes to the "business_document" field.
func (m *ProviderProfileMutation) ResetBusinessDocument() {
	m.business_document = nil
	delete(m.clearedFields, providerprofile.FieldBusinessDocument)
}

// SetIsKybVerified sets the "is_kyb_verified" field.
func (m *ProviderProfileMutation) SetIsKybVerified(b bool) {
	m.is_kyb_verified = &b
}

// IsKybVerified returns the value of the "is_kyb_verified" field in the mutation.
func (m *ProviderProfileMutation) IsKybVerified() (r bool, exists bool) {
	v := m.is_kyb_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsKybVerified returns the old "is_kyb_verified" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldIsKybVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsKybVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsKybVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsKybVerified: %w", err)
	}
	return oldValue.IsKybVerified, nil
}

// ResetIsKybVerified resets all changes to the "is_kyb_verified" field.
func (m *ProviderProfileMutation) ResetIsKybVerified() {
	m.is_kyb_verified = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ProviderProfileMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProviderProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ProviderProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ProviderProfileMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProviderProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by id.
func (m *ProviderProfileMutation) SetAPIKeyID(id uuid.UUID) {
	m.api_key = &id
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (m *ProviderProfileMutation) ClearAPIKey() {
	m.clearedapi_key = true
}

// APIKeyCleared reports if the "api_key" edge to the APIKey entity was cleared.
func (m *ProviderProfileMutation) APIKeyCleared() bool {
	return m.clearedapi_key
}

// APIKeyID returns the "api_key" edge ID in the mutation.
func (m *ProviderProfileMutation) APIKeyID() (id uuid.UUID, exists bool) {
	if m.api_key != nil {
		return *m.api_key, true
	}
	return
}

// APIKeyIDs returns the "api_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// APIKeyID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) APIKeyIDs() (ids []uuid.UUID) {
	if id := m.api_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAPIKey resets all changes to the "api_key" edge.
func (m *ProviderProfileMutation) ResetAPIKey() {
	m.api_key = nil
	m.clearedapi_key = false
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by id.
func (m *ProviderProfileMutation) SetCurrencyID(id uuid.UUID) {
	m.currency = &id
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (m *ProviderProfileMutation) ClearCurrency() {
	m.clearedcurrency = true
}

// CurrencyCleared reports if the "currency" edge to the FiatCurrency entity was cleared.
func (m *ProviderProfileMutation) CurrencyCleared() bool {
	return m.clearedcurrency
}

// CurrencyID returns the "currency" edge ID in the mutation.
func (m *ProviderProfileMutation) CurrencyID() (id uuid.UUID, exists bool) {
	if m.currency != nil {
		return *m.currency, true
	}
	return
}

// CurrencyIDs returns the "currency" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CurrencyID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) CurrencyIDs() (ids []uuid.UUID) {
	if id := m.currency; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCurrency resets all changes to the "currency" edge.
func (m *ProviderProfileMutation) ResetCurrency() {
	m.currency = nil
	m.clearedcurrency = false
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by ids.
func (m *ProviderProfileMutation) AddProvisionBucketIDs(ids ...int) {
	if m.provision_buckets == nil {
		m.provision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		m.provision_buckets[ids[i]] = struct{}{}
	}
}

// ClearProvisionBuckets clears the "provision_buckets" edge to the ProvisionBucket entity.
func (m *ProviderProfileMutation) ClearProvisionBuckets() {
	m.clearedprovision_buckets = true
}

// ProvisionBucketsCleared reports if the "provision_buckets" edge to the ProvisionBucket entity was cleared.
func (m *ProviderProfileMutation) ProvisionBucketsCleared() bool {
	return m.clearedprovision_buckets
}

// RemoveProvisionBucketIDs removes the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (m *ProviderProfileMutation) RemoveProvisionBucketIDs(ids ...int) {
	if m.removedprovision_buckets == nil {
		m.removedprovision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.provision_buckets, ids[i])
		m.removedprovision_buckets[ids[i]] = struct{}{}
	}
}

// RemovedProvisionBuckets returns the removed IDs of the "provision_buckets" edge to the ProvisionBucket entity.
func (m *ProviderProfileMutation) RemovedProvisionBucketsIDs() (ids []int) {
	for id := range m.removedprovision_buckets {
		ids = append(ids, id)
	}
	return
}

// ProvisionBucketsIDs returns the "provision_buckets" edge IDs in the mutation.
func (m *ProviderProfileMutation) ProvisionBucketsIDs() (ids []int) {
	for id := range m.provision_buckets {
		ids = append(ids, id)
	}
	return
}

// ResetProvisionBuckets resets all changes to the "provision_buckets" edge.
func (m *ProviderProfileMutation) ResetProvisionBuckets() {
	m.provision_buckets = nil
	m.clearedprovision_buckets = false
	m.removedprovision_buckets = nil
}

// AddOrderTokenIDs adds the "order_tokens" edge to the ProviderOrderToken entity by ids.
func (m *ProviderProfileMutation) AddOrderTokenIDs(ids ...int) {
	if m.order_tokens == nil {
		m.order_tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.order_tokens[ids[i]] = struct{}{}
	}
}

// ClearOrderTokens clears the "order_tokens" edge to the ProviderOrderToken entity.
func (m *ProviderProfileMutation) ClearOrderTokens() {
	m.clearedorder_tokens = true
}

// OrderTokensCleared reports if the "order_tokens" edge to the ProviderOrderToken entity was cleared.
func (m *ProviderProfileMutation) OrderTokensCleared() bool {
	return m.clearedorder_tokens
}

// RemoveOrderTokenIDs removes the "order_tokens" edge to the ProviderOrderToken entity by IDs.
func (m *ProviderProfileMutation) RemoveOrderTokenIDs(ids ...int) {
	if m.removedorder_tokens == nil {
		m.removedorder_tokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.order_tokens, ids[i])
		m.removedorder_tokens[ids[i]] = struct{}{}
	}
}

// RemovedOrderTokens returns the removed IDs of the "order_tokens" edge to the ProviderOrderToken entity.
func (m *ProviderProfileMutation) RemovedOrderTokensIDs() (ids []int) {
	for id := range m.removedorder_tokens {
		ids = append(ids, id)
	}
	return
}

// OrderTokensIDs returns the "order_tokens" edge IDs in the mutation.
func (m *ProviderProfileMutation) OrderTokensIDs() (ids []int) {
	for id := range m.order_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetOrderTokens resets all changes to the "order_tokens" edge.
func (m *ProviderProfileMutation) ResetOrderTokens() {
	m.order_tokens = nil
	m.clearedorder_tokens = false
	m.removedorder_tokens = nil
}

// SetProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by id.
func (m *ProviderProfileMutation) SetProviderRatingID(id int) {
	m.provider_rating = &id
}

// ClearProviderRating clears the "provider_rating" edge to the ProviderRating entity.
func (m *ProviderProfileMutation) ClearProviderRating() {
	m.clearedprovider_rating = true
}

// ProviderRatingCleared reports if the "provider_rating" edge to the ProviderRating entity was cleared.
func (m *ProviderProfileMutation) ProviderRatingCleared() bool {
	return m.clearedprovider_rating
}

// ProviderRatingID returns the "provider_rating" edge ID in the mutation.
func (m *ProviderProfileMutation) ProviderRatingID() (id int, exists bool) {
	if m.provider_rating != nil {
		return *m.provider_rating, true
	}
	return
}

// ProviderRatingIDs returns the "provider_rating" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderRatingID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) ProviderRatingIDs() (ids []int) {
	if id := m.provider_rating; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderRating resets all changes to the "provider_rating" edge.
func (m *ProviderProfileMutation) ResetProviderRating() {
	m.provider_rating = nil
	m.clearedprovider_rating = false
}

// AddAssignedOrderIDs adds the "assigned_orders" edge to the LockPaymentOrder entity by ids.
func (m *ProviderProfileMutation) AddAssignedOrderIDs(ids ...uuid.UUID) {
	if m.assigned_orders == nil {
		m.assigned_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.assigned_orders[ids[i]] = struct{}{}
	}
}

// ClearAssignedOrders clears the "assigned_orders" edge to the LockPaymentOrder entity.
func (m *ProviderProfileMutation) ClearAssignedOrders() {
	m.clearedassigned_orders = true
}

// AssignedOrdersCleared reports if the "assigned_orders" edge to the LockPaymentOrder entity was cleared.
func (m *ProviderProfileMutation) AssignedOrdersCleared() bool {
	return m.clearedassigned_orders
}

// RemoveAssignedOrderIDs removes the "assigned_orders" edge to the LockPaymentOrder entity by IDs.
func (m *ProviderProfileMutation) RemoveAssignedOrderIDs(ids ...uuid.UUID) {
	if m.removedassigned_orders == nil {
		m.removedassigned_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.assigned_orders, ids[i])
		m.removedassigned_orders[ids[i]] = struct{}{}
	}
}

// RemovedAssignedOrders returns the removed IDs of the "assigned_orders" edge to the LockPaymentOrder entity.
func (m *ProviderProfileMutation) RemovedAssignedOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedassigned_orders {
		ids = append(ids, id)
	}
	return
}

// AssignedOrdersIDs returns the "assigned_orders" edge IDs in the mutation.
func (m *ProviderProfileMutation) AssignedOrdersIDs() (ids []uuid.UUID) {
	for id := range m.assigned_orders {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedOrders resets all changes to the "assigned_orders" edge.
func (m *ProviderProfileMutation) ResetAssignedOrders() {
	m.assigned_orders = nil
	m.clearedassigned_orders = false
	m.removedassigned_orders = nil
}

// Where appends a list predicates to the ProviderProfileMutation builder.
func (m *ProviderProfileMutation) Where(ps ...predicate.ProviderProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderProfile).
func (m *ProviderProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderProfileMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.trading_name != nil {
		fields = append(fields, providerprofile.FieldTradingName)
	}
	if m.host_identifier != nil {
		fields = append(fields, providerprofile.FieldHostIdentifier)
	}
	if m.provision_mode != nil {
		fields = append(fields, providerprofile.FieldProvisionMode)
	}
	if m.is_active != nil {
		fields = append(fields, providerprofile.FieldIsActive)
	}
	if m.is_available != nil {
		fields = append(fields, providerprofile.FieldIsAvailable)
	}
	if m.updated_at != nil {
		fields = append(fields, providerprofile.FieldUpdatedAt)
	}
	if m.visibility_mode != nil {
		fields = append(fields, providerprofile.FieldVisibilityMode)
	}
	if m.address != nil {
		fields = append(fields, providerprofile.FieldAddress)
	}
	if m.mobile_number != nil {
		fields = append(fields, providerprofile.FieldMobileNumber)
	}
	if m.date_of_birth != nil {
		fields = append(fields, providerprofile.FieldDateOfBirth)
	}
	if m.business_name != nil {
		fields = append(fields, providerprofile.FieldBusinessName)
	}
	if m.identity_document_type != nil {
		fields = append(fields, providerprofile.FieldIdentityDocumentType)
	}
	if m.identity_document != nil {
		fields = append(fields, providerprofile.FieldIdentityDocument)
	}
	if m.business_document != nil {
		fields = append(fields, providerprofile.FieldBusinessDocument)
	}
	if m.is_kyb_verified != nil {
		fields = append(fields, providerprofile.FieldIsKybVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerprofile.FieldTradingName:
		return m.TradingName()
	case providerprofile.FieldHostIdentifier:
		return m.HostIdentifier()
	case providerprofile.FieldProvisionMode:
		return m.ProvisionMode()
	case providerprofile.FieldIsActive:
		return m.IsActive()
	case providerprofile.FieldIsAvailable:
		return m.IsAvailable()
	case providerprofile.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerprofile.FieldVisibilityMode:
		return m.VisibilityMode()
	case providerprofile.FieldAddress:
		return m.Address()
	case providerprofile.FieldMobileNumber:
		return m.MobileNumber()
	case providerprofile.FieldDateOfBirth:
		return m.DateOfBirth()
	case providerprofile.FieldBusinessName:
		return m.BusinessName()
	case providerprofile.FieldIdentityDocumentType:
		return m.IdentityDocumentType()
	case providerprofile.FieldIdentityDocument:
		return m.IdentityDocument()
	case providerprofile.FieldBusinessDocument:
		return m.BusinessDocument()
	case providerprofile.FieldIsKybVerified:
		return m.IsKybVerified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerprofile.FieldTradingName:
		return m.OldTradingName(ctx)
	case providerprofile.FieldHostIdentifier:
		return m.OldHostIdentifier(ctx)
	case providerprofile.FieldProvisionMode:
		return m.OldProvisionMode(ctx)
	case providerprofile.FieldIsActive:
		return m.OldIsActive(ctx)
	case providerprofile.FieldIsAvailable:
		return m.OldIsAvailable(ctx)
	case providerprofile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerprofile.FieldVisibilityMode:
		return m.OldVisibilityMode(ctx)
	case providerprofile.FieldAddress:
		return m.OldAddress(ctx)
	case providerprofile.FieldMobileNumber:
		return m.OldMobileNumber(ctx)
	case providerprofile.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	case providerprofile.FieldBusinessName:
		return m.OldBusinessName(ctx)
	case providerprofile.FieldIdentityDocumentType:
		return m.OldIdentityDocumentType(ctx)
	case providerprofile.FieldIdentityDocument:
		return m.OldIdentityDocument(ctx)
	case providerprofile.FieldBusinessDocument:
		return m.OldBusinessDocument(ctx)
	case providerprofile.FieldIsKybVerified:
		return m.OldIsKybVerified(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerprofile.FieldTradingName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradingName(v)
		return nil
	case providerprofile.FieldHostIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostIdentifier(v)
		return nil
	case providerprofile.FieldProvisionMode:
		v, ok := value.(providerprofile.ProvisionMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvisionMode(v)
		return nil
	case providerprofile.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case providerprofile.FieldIsAvailable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAvailable(v)
		return nil
	case providerprofile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerprofile.FieldVisibilityMode:
		v, ok := value.(providerprofile.VisibilityMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibilityMode(v)
		return nil
	case providerprofile.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case providerprofile.FieldMobileNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobileNumber(v)
		return nil
	case providerprofile.FieldDateOfBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	case providerprofile.FieldBusinessName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessName(v)
		return nil
	case providerprofile.FieldIdentityDocumentType:
		v, ok := value.(providerprofile.IdentityDocumentType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityDocumentType(v)
		return nil
	case providerprofile.FieldIdentityDocument:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityDocument(v)
		return nil
	case providerprofile.FieldBusinessDocument:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessDocument(v)
		return nil
	case providerprofile.FieldIsKybVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsKybVerified(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(providerprofile.FieldTradingName) {
		fields = append(fields, providerprofile.FieldTradingName)
	}
	if m.FieldCleared(providerprofile.FieldHostIdentifier) {
		fields = append(fields, providerprofile.FieldHostIdentifier)
	}
	if m.FieldCleared(providerprofile.FieldAddress) {
		fields = append(fields, providerprofile.FieldAddress)
	}
	if m.FieldCleared(providerprofile.FieldMobileNumber) {
		fields = append(fields, providerprofile.FieldMobileNumber)
	}
	if m.FieldCleared(providerprofile.FieldDateOfBirth) {
		fields = append(fields, providerprofile.FieldDateOfBirth)
	}
	if m.FieldCleared(providerprofile.FieldBusinessName) {
		fields = append(fields, providerprofile.FieldBusinessName)
	}
	if m.FieldCleared(providerprofile.FieldIdentityDocumentType) {
		fields = append(fields, providerprofile.FieldIdentityDocumentType)
	}
	if m.FieldCleared(providerprofile.FieldIdentityDocument) {
		fields = append(fields, providerprofile.FieldIdentityDocument)
	}
	if m.FieldCleared(providerprofile.FieldBusinessDocument) {
		fields = append(fields, providerprofile.FieldBusinessDocument)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderProfileMutation) ClearField(name string) error {
	switch name {
	case providerprofile.FieldTradingName:
		m.ClearTradingName()
		return nil
	case providerprofile.FieldHostIdentifier:
		m.ClearHostIdentifier()
		return nil
	case providerprofile.FieldAddress:
		m.ClearAddress()
		return nil
	case providerprofile.FieldMobileNumber:
		m.ClearMobileNumber()
		return nil
	case providerprofile.FieldDateOfBirth:
		m.ClearDateOfBirth()
		return nil
	case providerprofile.FieldBusinessName:
		m.ClearBusinessName()
		return nil
	case providerprofile.FieldIdentityDocumentType:
		m.ClearIdentityDocumentType()
		return nil
	case providerprofile.FieldIdentityDocument:
		m.ClearIdentityDocument()
		return nil
	case providerprofile.FieldBusinessDocument:
		m.ClearBusinessDocument()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderProfileMutation) ResetField(name string) error {
	switch name {
	case providerprofile.FieldTradingName:
		m.ResetTradingName()
		return nil
	case providerprofile.FieldHostIdentifier:
		m.ResetHostIdentifier()
		return nil
	case providerprofile.FieldProvisionMode:
		m.ResetProvisionMode()
		return nil
	case providerprofile.FieldIsActive:
		m.ResetIsActive()
		return nil
	case providerprofile.FieldIsAvailable:
		m.ResetIsAvailable()
		return nil
	case providerprofile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerprofile.FieldVisibilityMode:
		m.ResetVisibilityMode()
		return nil
	case providerprofile.FieldAddress:
		m.ResetAddress()
		return nil
	case providerprofile.FieldMobileNumber:
		m.ResetMobileNumber()
		return nil
	case providerprofile.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	case providerprofile.FieldBusinessName:
		m.ResetBusinessName()
		return nil
	case providerprofile.FieldIdentityDocumentType:
		m.ResetIdentityDocumentType()
		return nil
	case providerprofile.FieldIdentityDocument:
		m.ResetIdentityDocument()
		return nil
	case providerprofile.FieldBusinessDocument:
		m.ResetBusinessDocument()
		return nil
	case providerprofile.FieldIsKybVerified:
		m.ResetIsKybVerified()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.user != nil {
		edges = append(edges, providerprofile.EdgeUser)
	}
	if m.api_key != nil {
		edges = append(edges, providerprofile.EdgeAPIKey)
	}
	if m.currency != nil {
		edges = append(edges, providerprofile.EdgeCurrency)
	}
	if m.provision_buckets != nil {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.order_tokens != nil {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.provider_rating != nil {
		edges = append(edges, providerprofile.EdgeProviderRating)
	}
	if m.assigned_orders != nil {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerprofile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeAPIKey:
		if id := m.api_key; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeCurrency:
		if id := m.currency; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.provision_buckets))
		for id := range m.provision_buckets {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.order_tokens))
		for id := range m.order_tokens {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeProviderRating:
		if id := m.provider_rating; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeAssignedOrders:
		ids := make([]ent.Value, 0, len(m.assigned_orders))
		for id := range m.assigned_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedprovision_buckets != nil {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.removedorder_tokens != nil {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.removedassigned_orders != nil {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case providerprofile.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.removedprovision_buckets))
		for id := range m.removedprovision_buckets {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.removedorder_tokens))
		for id := range m.removedorder_tokens {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeAssignedOrders:
		ids := make([]ent.Value, 0, len(m.removedassigned_orders))
		for id := range m.removedassigned_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.cleareduser {
		edges = append(edges, providerprofile.EdgeUser)
	}
	if m.clearedapi_key {
		edges = append(edges, providerprofile.EdgeAPIKey)
	}
	if m.clearedcurrency {
		edges = append(edges, providerprofile.EdgeCurrency)
	}
	if m.clearedprovision_buckets {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.clearedorder_tokens {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.clearedprovider_rating {
		edges = append(edges, providerprofile.EdgeProviderRating)
	}
	if m.clearedassigned_orders {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case providerprofile.EdgeUser:
		return m.cleareduser
	case providerprofile.EdgeAPIKey:
		return m.clearedapi_key
	case providerprofile.EdgeCurrency:
		return m.clearedcurrency
	case providerprofile.EdgeProvisionBuckets:
		return m.clearedprovision_buckets
	case providerprofile.EdgeOrderTokens:
		return m.clearedorder_tokens
	case providerprofile.EdgeProviderRating:
		return m.clearedprovider_rating
	case providerprofile.EdgeAssignedOrders:
		return m.clearedassigned_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderProfileMutation) ClearEdge(name string) error {
	switch name {
	case providerprofile.EdgeUser:
		m.ClearUser()
		return nil
	case providerprofile.EdgeAPIKey:
		m.ClearAPIKey()
		return nil
	case providerprofile.EdgeCurrency:
		m.ClearCurrency()
		return nil
	case providerprofile.EdgeProviderRating:
		m.ClearProviderRating()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderProfileMutation) ResetEdge(name string) error {
	switch name {
	case providerprofile.EdgeUser:
		m.ResetUser()
		return nil
	case providerprofile.EdgeAPIKey:
		m.ResetAPIKey()
		return nil
	case providerprofile.EdgeCurrency:
		m.ResetCurrency()
		return nil
	case providerprofile.EdgeProvisionBuckets:
		m.ResetProvisionBuckets()
		return nil
	case providerprofile.EdgeOrderTokens:
		m.ResetOrderTokens()
		return nil
	case providerprofile.EdgeProviderRating:
		m.ResetProviderRating()
		return nil
	case providerprofile.EdgeAssignedOrders:
		m.ResetAssignedOrders()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile edge %s", name)
}

// ProviderRatingMutation represents an operation that mutates the ProviderRating nodes in the graph.
type ProviderRatingMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	created_at              *time.Time
	updated_at              *time.Time
	trust_score             *decimal.Decimal
	addtrust_score          *decimal.Decimal
	clearedFields           map[string]struct{}
	provider_profile        *string
	clearedprovider_profile bool
	done                    bool
	oldValue                func(context.Context) (*ProviderRating, error)
	predicates              []predicate.ProviderRating
}

var _ ent.Mutation = (*ProviderRatingMutation)(nil)

// providerratingOption allows management of the mutation configuration using functional options.
type providerratingOption func(*ProviderRatingMutation)

// newProviderRatingMutation creates new mutation for the ProviderRating entity.
func newProviderRatingMutation(c config, op Op, opts ...providerratingOption) *ProviderRatingMutation {
	m := &ProviderRatingMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderRating,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderRatingID sets the ID field of the mutation.
func withProviderRatingID(id int) providerratingOption {
	return func(m *ProviderRatingMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderRating
		)
		m.oldValue = func(ctx context.Context) (*ProviderRating, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderRating.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderRating sets the old ProviderRating of the mutation.
func withProviderRating(node *ProviderRating) providerratingOption {
	return func(m *ProviderRatingMutation) {
		m.oldValue = func(context.Context) (*ProviderRating, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderRatingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderRatingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderRatingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderRatingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderRating.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderRatingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderRatingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderRatingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderRatingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderRatingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderRatingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTrustScore sets the "trust_score" field.
func (m *ProviderRatingMutation) SetTrustScore(d decimal.Decimal) {
	m.trust_score = &d
	m.addtrust_score = nil
}

// TrustScore returns the value of the "trust_score" field in the mutation.
func (m *ProviderRatingMutation) TrustScore() (r decimal.Decimal, exists bool) {
	v := m.trust_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScore returns the old "trust_score" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldTrustScore(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScore: %w", err)
	}
	return oldValue.TrustScore, nil
}

// AddTrustScore adds d to the "trust_score" field.
func (m *ProviderRatingMutation) AddTrustScore(d decimal.Decimal) {
	if m.addtrust_score != nil {
		*m.addtrust_score = m.addtrust_score.Add(d)
	} else {
		m.addtrust_score = &d
	}
}

// AddedTrustScore returns the value that was added to the "trust_score" field in this mutation.
func (m *ProviderRatingMutation) AddedTrustScore() (r decimal.Decimal, exists bool) {
	v := m.addtrust_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrustScore resets all changes to the "trust_score" field.
func (m *ProviderRatingMutation) ResetTrustScore() {
	m.trust_score = nil
	m.addtrust_score = nil
}

// SetProviderProfileID sets the "provider_profile" edge to the ProviderProfile entity by id.
func (m *ProviderRatingMutation) SetProviderProfileID(id string) {
	m.provider_profile = &id
}

// ClearProviderProfile clears the "provider_profile" edge to the ProviderProfile entity.
func (m *ProviderRatingMutation) ClearProviderProfile() {
	m.clearedprovider_profile = true
}

// ProviderProfileCleared reports if the "provider_profile" edge to the ProviderProfile entity was cleared.
func (m *ProviderRatingMutation) ProviderProfileCleared() bool {
	return m.clearedprovider_profile
}

// ProviderProfileID returns the "provider_profile" edge ID in the mutation.
func (m *ProviderRatingMutation) ProviderProfileID() (id string, exists bool) {
	if m.provider_profile != nil {
		return *m.provider_profile, true
	}
	return
}

// ProviderProfileIDs returns the "provider_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderProfileID instead. It exists only for internal usage by the builders.
func (m *ProviderRatingMutation) ProviderProfileIDs() (ids []string) {
	if id := m.provider_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderProfile resets all changes to the "provider_profile" edge.
func (m *ProviderRatingMutation) ResetProviderProfile() {
	m.provider_profile = nil
	m.clearedprovider_profile = false
}

// Where appends a list predicates to the ProviderRatingMutation builder.
func (m *ProviderRatingMutation) Where(ps ...predicate.ProviderRating) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderRatingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderRatingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderRating, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderRatingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderRatingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderRating).
func (m *ProviderRatingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderRatingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, providerrating.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, providerrating.FieldUpdatedAt)
	}
	if m.trust_score != nil {
		fields = append(fields, providerrating.FieldTrustScore)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderRatingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerrating.FieldCreatedAt:
		return m.CreatedAt()
	case providerrating.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerrating.FieldTrustScore:
		return m.TrustScore()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderRatingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerrating.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case providerrating.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerrating.FieldTrustScore:
		return m.OldTrustScore(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderRating field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRatingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerrating.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case providerrating.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerrating.FieldTrustScore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScore(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRating field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderRatingMutation) AddedFields() []string {
	var fields []string
	if m.addtrust_score != nil {
		fields = append(fields, providerrating.FieldTrustScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderRatingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case providerrating.FieldTrustScore:
		return m.AddedTrustScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRatingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case providerrating.FieldTrustScore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScore(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRating numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderRatingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderRatingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderRatingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderRating nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderRatingMutation) ResetField(name string) error {
	switch name {
	case providerrating.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case providerrating.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerrating.FieldTrustScore:
		m.ResetTrustScore()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderRatingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.provider_profile != nil {
		edges = append(edges, providerrating.EdgeProviderProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderRatingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerrating.EdgeProviderProfile:
		if id := m.provider_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderRatingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderRatingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderRatingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprovider_profile {
		edges = append(edges, providerrating.EdgeProviderProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderRatingMutation) EdgeCleared(name string) bool {
	switch name {
	case providerrating.EdgeProviderProfile:
		return m.clearedprovider_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderRatingMutation) ClearEdge(name string) error {
	switch name {
	case providerrating.EdgeProviderProfile:
		m.ClearProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderRatingMutation) ResetEdge(name string) error {
	switch name {
	case providerrating.EdgeProviderProfile:
		m.ResetProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating edge %s", name)
}

// ProvisionBucketMutation represents an operation that mutates the ProvisionBucket nodes in the graph.
type ProvisionBucketMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	min_amount                 *decimal.Decimal
	addmin_amount              *decimal.Decimal
	max_amount                 *decimal.Decimal
	addmax_amount              *decimal.Decimal
	created_at                 *time.Time
	clearedFields              map[string]struct{}
	currency                   *uuid.UUID
	clearedcurrency            bool
	lock_payment_orders        map[uuid.UUID]struct{}
	removedlock_payment_orders map[uuid.UUID]struct{}
	clearedlock_payment_orders bool
	provider_profiles          map[string]struct{}
	removedprovider_profiles   map[string]struct{}
	clearedprovider_profiles   bool
	done                       bool
	oldValue                   func(context.Context) (*ProvisionBucket, error)
	predicates                 []predicate.ProvisionBucket
}

var _ ent.Mutation = (*ProvisionBucketMutation)(nil)

// provisionbucketOption allows management of the mutation configuration using functional options.
type provisionbucketOption func(*ProvisionBucketMutation)

// newProvisionBucketMutation creates new mutation for the ProvisionBucket entity.
func newProvisionBucketMutation(c config, op Op, opts ...provisionbucketOption) *ProvisionBucketMutation {
	m := &ProvisionBucketMutation{
		config:        c,
		op:            op,
		typ:           TypeProvisionBucket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProvisionBucketID sets the ID field of the mutation.
func withProvisionBucketID(id int) provisionbucketOption {
	return func(m *ProvisionBucketMutation) {
		var (
			err   error
			once  sync.Once
			value *ProvisionBucket
		)
		m.oldValue = func(ctx context.Context) (*ProvisionBucket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProvisionBucket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvisionBucket sets the old ProvisionBucket of the mutation.
func withProvisionBucket(node *ProvisionBucket) provisionbucketOption {
	return func(m *ProvisionBucketMutation) {
		m.oldValue = func(context.Context) (*ProvisionBucket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProvisionBucketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProvisionBucketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProvisionBucketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProvisionBucketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProvisionBucket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMinAmount sets the "min_amount" field.
func (m *ProvisionBucketMutation) SetMinAmount(d decimal.Decimal) {
	m.min_amount = &d
	m.addmin_amount = nil
}

// MinAmount returns the value of the "min_amount" field in the mutation.
func (m *ProvisionBucketMutation) MinAmount() (r decimal.Decimal, exists bool) {
	v := m.min_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMinAmount returns the old "min_amount" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldMinAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinAmount: %w", err)
	}
	return oldValue.MinAmount, nil
}

// AddMinAmount adds d to the "min_amount" field.
func (m *ProvisionBucketMutation) AddMinAmount(d decimal.Decimal) {
	if m.addmin_amount != nil {
		*m.addmin_amount = m.addmin_amount.Add(d)
	} else {
		m.addmin_amount = &d
	}
}

// AddedMinAmount returns the value that was added to the "min_amount" field in this mutation.
func (m *ProvisionBucketMutation) AddedMinAmount() (r decimal.Decimal, exists bool) {
	v := m.addmin_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinAmount resets all changes to the "min_amount" field.
func (m *ProvisionBucketMutation) ResetMinAmount() {
	m.min_amount = nil
	m.addmin_amount = nil
}

// SetMaxAmount sets the "max_amount" field.
func (m *ProvisionBucketMutation) SetMaxAmount(d decimal.Decimal) {
	m.max_amount = &d
	m.addmax_amount = nil
}

// MaxAmount returns the value of the "max_amount" field in the mutation.
func (m *ProvisionBucketMutation) MaxAmount() (r decimal.Decimal, exists bool) {
	v := m.max_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxAmount returns the old "max_amount" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldMaxAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxAmount: %w", err)
	}
	return oldValue.MaxAmount, nil
}

// AddMaxAmount adds d to the "max_amount" field.
func (m *ProvisionBucketMutation) AddMaxAmount(d decimal.Decimal) {
	if m.addmax_amount != nil {
		*m.addmax_amount = m.addmax_amount.Add(d)
	} else {
		m.addmax_amount = &d
	}
}

// AddedMaxAmount returns the value that was added to the "max_amount" field in this mutation.
func (m *ProvisionBucketMutation) AddedMaxAmount() (r decimal.Decimal, exists bool) {
	v := m.addmax_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxAmount resets all changes to the "max_amount" field.
func (m *ProvisionBucketMutation) ResetMaxAmount() {
	m.max_amount = nil
	m.addmax_amount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProvisionBucketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProvisionBucketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProvisionBucketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by id.
func (m *ProvisionBucketMutation) SetCurrencyID(id uuid.UUID) {
	m.currency = &id
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (m *ProvisionBucketMutation) ClearCurrency() {
	m.clearedcurrency = true
}

// CurrencyCleared reports if the "currency" edge to the FiatCurrency entity was cleared.
func (m *ProvisionBucketMutation) CurrencyCleared() bool {
	return m.clearedcurrency
}

// CurrencyID returns the "currency" edge ID in the mutation.
func (m *ProvisionBucketMutation) CurrencyID() (id uuid.UUID, exists bool) {
	if m.currency != nil {
		return *m.currency, true
	}
	return
}

// CurrencyIDs returns the "currency" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CurrencyID instead. It exists only for internal usage by the builders.
func (m *ProvisionBucketMutation) CurrencyIDs() (ids []uuid.UUID) {
	if id := m.currency; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCurrency resets all changes to the "currency" edge.
func (m *ProvisionBucketMutation) ResetCurrency() {
	m.currency = nil
	m.clearedcurrency = false
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by ids.
func (m *ProvisionBucketMutation) AddLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.lock_payment_orders == nil {
		m.lock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.lock_payment_orders[ids[i]] = struct{}{}
	}
}

// ClearLockPaymentOrders clears the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *ProvisionBucketMutation) ClearLockPaymentOrders() {
	m.clearedlock_payment_orders = true
}

// LockPaymentOrdersCleared reports if the "lock_payment_orders" edge to the LockPaymentOrder entity was cleared.
func (m *ProvisionBucketMutation) LockPaymentOrdersCleared() bool {
	return m.clearedlock_payment_orders
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (m *ProvisionBucketMutation) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedlock_payment_orders == nil {
		m.removedlock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.lock_payment_orders, ids[i])
		m.removedlock_payment_orders[ids[i]] = struct{}{}
	}
}

// RemovedLockPaymentOrders returns the removed IDs of the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *ProvisionBucketMutation) RemovedLockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedlock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// LockPaymentOrdersIDs returns the "lock_payment_orders" edge IDs in the mutation.
func (m *ProvisionBucketMutation) LockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.lock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetLockPaymentOrders resets all changes to the "lock_payment_orders" edge.
func (m *ProvisionBucketMutation) ResetLockPaymentOrders() {
	m.lock_payment_orders = nil
	m.clearedlock_payment_orders = false
	m.removedlock_payment_orders = nil
}

// AddProviderProfileIDs adds the "provider_profiles" edge to the ProviderProfile entity by ids.
func (m *ProvisionBucketMutation) AddProviderProfileIDs(ids ...string) {
	if m.provider_profiles == nil {
		m.provider_profiles = make(map[string]struct{})
	}
	for i := range ids {
		m.provider_profiles[ids[i]] = struct{}{}
	}
}

// ClearProviderProfiles clears the "provider_profiles" edge to the ProviderProfile entity.
func (m *ProvisionBucketMutation) ClearProviderProfiles() {
	m.clearedprovider_profiles = true
}

// ProviderProfilesCleared reports if the "provider_profiles" edge to the ProviderProfile entity was cleared.
func (m *ProvisionBucketMutation) ProviderProfilesCleared() bool {
	return m.clearedprovider_profiles
}

// RemoveProviderProfileIDs removes the "provider_profiles" edge to the ProviderProfile entity by IDs.
func (m *ProvisionBucketMutation) RemoveProviderProfileIDs(ids ...string) {
	if m.removedprovider_profiles == nil {
		m.removedprovider_profiles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.provider_profiles, ids[i])
		m.removedprovider_profiles[ids[i]] = struct{}{}
	}
}

// RemovedProviderProfiles returns the removed IDs of the "provider_profiles" edge to the ProviderProfile entity.
func (m *ProvisionBucketMutation) RemovedProviderProfilesIDs() (ids []string) {
	for id := range m.removedprovider_profiles {
		ids = append(ids, id)
	}
	return
}

// ProviderProfilesIDs returns the "provider_profiles" edge IDs in the mutation.
func (m *ProvisionBucketMutation) ProviderProfilesIDs() (ids []string) {
	for id := range m.provider_profiles {
		ids = append(ids, id)
	}
	return
}

// ResetProviderProfiles resets all changes to the "provider_profiles" edge.
func (m *ProvisionBucketMutation) ResetProviderProfiles() {
	m.provider_profiles = nil
	m.clearedprovider_profiles = false
	m.removedprovider_profiles = nil
}

// Where appends a list predicates to the ProvisionBucketMutation builder.
func (m *ProvisionBucketMutation) Where(ps ...predicate.ProvisionBucket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProvisionBucketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProvisionBucketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProvisionBucket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProvisionBucketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProvisionBucketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProvisionBucket).
func (m *ProvisionBucketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProvisionBucketMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.min_amount != nil {
		fields = append(fields, provisionbucket.FieldMinAmount)
	}
	if m.max_amount != nil {
		fields = append(fields, provisionbucket.FieldMaxAmount)
	}
	if m.created_at != nil {
		fields = append(fields, provisionbucket.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProvisionBucketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.MinAmount()
	case provisionbucket.FieldMaxAmount:
		return m.MaxAmount()
	case provisionbucket.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProvisionBucketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.OldMinAmount(ctx)
	case provisionbucket.FieldMaxAmount:
		return m.OldMaxAmount(ctx)
	case provisionbucket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvisionBucketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinAmount(v)
		return nil
	case provisionbucket.FieldMaxAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxAmount(v)
		return nil
	case provisionbucket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProvisionBucketMutation) AddedFields() []string {
	var fields []string
	if m.addmin_amount != nil {
		fields = append(fields, provisionbucket.FieldMinAmount)
	}
	if m.addmax_amount != nil {
		fields = append(fields, provisionbucket.FieldMaxAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProvisionBucketMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.AddedMinAmount()
	case provisionbucket.FieldMaxAmount:
		return m.AddedMaxAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvisionBucketMutation) AddField(name string, value ent.Value) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinAmount(v)
		return nil
	case provisionbucket.FieldMaxAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxAmount(v)
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProvisionBucketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProvisionBucketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProvisionBucketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProvisionBucket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProvisionBucketMutation) ResetField(name string) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		m.ResetMinAmount()
		return nil
	case provisionbucket.FieldMaxAmount:
		m.ResetMaxAmount()
		return nil
	case provisionbucket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProvisionBucketMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.currency != nil {
		edges = append(edges, provisionbucket.EdgeCurrency)
	}
	if m.lock_payment_orders != nil {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.provider_profiles != nil {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProvisionBucketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provisionbucket.EdgeCurrency:
		if id := m.currency; id != nil {
			return []ent.Value{*id}
		}
	case provisionbucket.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.lock_payment_orders))
		for id := range m.lock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case provisionbucket.EdgeProviderProfiles:
		ids := make([]ent.Value, 0, len(m.provider_profiles))
		for id := range m.provider_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProvisionBucketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlock_payment_orders != nil {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.removedprovider_profiles != nil {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProvisionBucketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provisionbucket.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedlock_payment_orders))
		for id := range m.removedlock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case provisionbucket.EdgeProviderProfiles:
		ids := make([]ent.Value, 0, len(m.removedprovider_profiles))
		for id := range m.removedprovider_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProvisionBucketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcurrency {
		edges = append(edges, provisionbucket.EdgeCurrency)
	}
	if m.clearedlock_payment_orders {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.clearedprovider_profiles {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProvisionBucketMutation) EdgeCleared(name string) bool {
	switch name {
	case provisionbucket.EdgeCurrency:
		return m.clearedcurrency
	case provisionbucket.EdgeLockPaymentOrders:
		return m.clearedlock_payment_orders
	case provisionbucket.EdgeProviderProfiles:
		return m.clearedprovider_profiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProvisionBucketMutation) ClearEdge(name string) error {
	switch name {
	case provisionbucket.EdgeCurrency:
		m.ClearCurrency()
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProvisionBucketMutation) ResetEdge(name string) error {
	switch name {
	case provisionbucket.EdgeCurrency:
		m.ResetCurrency()
		return nil
	case provisionbucket.EdgeLockPaymentOrders:
		m.ResetLockPaymentOrders()
		return nil
	case provisionbucket.EdgeProviderProfiles:
		m.ResetProviderProfiles()
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket edge %s", name)
}

// ReceiveAddressMutation represents an operation that mutates the ReceiveAddress nodes in the graph.
type ReceiveAddressMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	created_at            *time.Time
	updated_at            *time.Time
	address               *string
	salt                  *[]byte
	status                *receiveaddress.Status
	last_indexed_block    *int64
	addlast_indexed_block *int64
	last_used             *time.Time
	tx_hash               *string
	valid_until           *time.Time
	clearedFields         map[string]struct{}
	payment_order         *uuid.UUID
	clearedpayment_order  bool
	done                  bool
	oldValue              func(context.Context) (*ReceiveAddress, error)
	predicates            []predicate.ReceiveAddress
}

var _ ent.Mutation = (*ReceiveAddressMutation)(nil)

// receiveaddressOption allows management of the mutation configuration using functional options.
type receiveaddressOption func(*ReceiveAddressMutation)

// newReceiveAddressMutation creates new mutation for the ReceiveAddress entity.
func newReceiveAddressMutation(c config, op Op, opts ...receiveaddressOption) *ReceiveAddressMutation {
	m := &ReceiveAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeReceiveAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReceiveAddressID sets the ID field of the mutation.
func withReceiveAddressID(id int) receiveaddressOption {
	return func(m *ReceiveAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *ReceiveAddress
		)
		m.oldValue = func(ctx context.Context) (*ReceiveAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReceiveAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReceiveAddress sets the old ReceiveAddress of the mutation.
func withReceiveAddress(node *ReceiveAddress) receiveaddressOption {
	return func(m *ReceiveAddressMutation) {
		m.oldValue = func(context.Context) (*ReceiveAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReceiveAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReceiveAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReceiveAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReceiveAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReceiveAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReceiveAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReceiveAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReceiveAddressMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReceiveAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReceiveAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReceiveAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAddress sets the "address" field.
func (m *ReceiveAddressMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ReceiveAddressMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ReceiveAddressMutation) ResetAddress() {
	m.address = nil
}

// SetSalt sets the "salt" field.
func (m *ReceiveAddressMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *ReceiveAddressMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *ReceiveAddressMutation) ResetSalt() {
	m.salt = nil
}

// SetStatus sets the "status" field.
func (m *ReceiveAddressMutation) SetStatus(r receiveaddress.Status) {
	m.status = &r
}

// Status returns the value of the "status" field in the mutation.
func (m *ReceiveAddressMutation) Status() (r receiveaddress.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldStatus(ctx context.Context) (v receiveaddress.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ReceiveAddressMutation) ResetStatus() {
	m.status = nil
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (m *ReceiveAddressMutation) SetLastIndexedBlock(i int64) {
	m.last_indexed_block = &i
	m.addlast_indexed_block = nil
}

// LastIndexedBlock returns the value of the "last_indexed_block" field in the mutation.
func (m *ReceiveAddressMutation) LastIndexedBlock() (r int64, exists bool) {
	v := m.last_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// OldLastIndexedBlock returns the old "last_indexed_block" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldLastIndexedBlock(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastIndexedBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastIndexedBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastIndexedBlock: %w", err)
	}
	return oldValue.LastIndexedBlock, nil
}

// AddLastIndexedBlock adds i to the "last_indexed_block" field.
func (m *ReceiveAddressMutation) AddLastIndexedBlock(i int64) {
	if m.addlast_indexed_block != nil {
		*m.addlast_indexed_block += i
	} else {
		m.addlast_indexed_block = &i
	}
}

// AddedLastIndexedBlock returns the value that was added to the "last_indexed_block" field in this mutation.
func (m *ReceiveAddressMutation) AddedLastIndexedBlock() (r int64, exists bool) {
	v := m.addlast_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (m *ReceiveAddressMutation) ClearLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	m.clearedFields[receiveaddress.FieldLastIndexedBlock] = struct{}{}
}

// LastIndexedBlockCleared returns if the "last_indexed_block" field was cleared in this mutation.
func (m *ReceiveAddressMutation) LastIndexedBlockCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldLastIndexedBlock]
	return ok
}

// ResetLastIndexedBlock resets all changes to the "last_indexed_block" field.
func (m *ReceiveAddressMutation) ResetLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	delete(m.clearedFields, receiveaddress.FieldLastIndexedBlock)
}

// SetLastUsed sets the "last_used" field.
func (m *ReceiveAddressMutation) SetLastUsed(t time.Time) {
	m.last_used = &t
}

// LastUsed returns the value of the "last_used" field in the mutation.
func (m *ReceiveAddressMutation) LastUsed() (r time.Time, exists bool) {
	v := m.last_used
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsed returns the old "last_used" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldLastUsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsed: %w", err)
	}
	return oldValue.LastUsed, nil
}

// ClearLastUsed clears the value of the "last_used" field.
func (m *ReceiveAddressMutation) ClearLastUsed() {
	m.last_used = nil
	m.clearedFields[receiveaddress.FieldLastUsed] = struct{}{}
}

// LastUsedCleared returns if the "last_used" field was cleared in this mutation.
func (m *ReceiveAddressMutation) LastUsedCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldLastUsed]
	return ok
}

// ResetLastUsed resets all changes to the "last_used" field.
func (m *ReceiveAddressMutation) ResetLastUsed() {
	m.last_used = nil
	delete(m.clearedFields, receiveaddress.FieldLastUsed)
}

// SetTxHash sets the "tx_hash" field.
func (m *ReceiveAddressMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *ReceiveAddressMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *ReceiveAddressMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[receiveaddress.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *ReceiveAddressMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *ReceiveAddressMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, receiveaddress.FieldTxHash)
}

// SetValidUntil sets the "valid_until" field.
func (m *ReceiveAddressMutation) SetValidUntil(t time.Time) {
	m.valid_until = &t
}

// ValidUntil returns the value of the "valid_until" field in the mutation.
func (m *ReceiveAddressMutation) ValidUntil() (r time.Time, exists bool) {
	v := m.valid_until
	if v == nil {
		return
	}
	return *v, true
}

// OldValidUntil returns the old "valid_until" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldValidUntil(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidUntil: %w", err)
	}
	return oldValue.ValidUntil, nil
}

// ClearValidUntil clears the value of the "valid_until" field.
func (m *ReceiveAddressMutation) ClearValidUntil() {
	m.valid_until = nil
	m.clearedFields[receiveaddress.FieldValidUntil] = struct{}{}
}

// ValidUntilCleared returns if the "valid_until" field was cleared in this mutation.
func (m *ReceiveAddressMutation) ValidUntilCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldValidUntil]
	return ok
}

// ResetValidUntil resets all changes to the "valid_until" field.
func (m *ReceiveAddressMutation) ResetValidUntil() {
	m.valid_until = nil
	delete(m.clearedFields, receiveaddress.FieldValidUntil)
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by id.
func (m *ReceiveAddressMutation) SetPaymentOrderID(id uuid.UUID) {
	m.payment_order = &id
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (m *ReceiveAddressMutation) ClearPaymentOrder() {
	m.clearedpayment_order = true
}

// PaymentOrderCleared reports if the "payment_order" edge to the PaymentOrder entity was cleared.
func (m *ReceiveAddressMutation) PaymentOrderCleared() bool {
	return m.clearedpayment_order
}

// PaymentOrderID returns the "payment_order" edge ID in the mutation.
func (m *ReceiveAddressMutation) PaymentOrderID() (id uuid.UUID, exists bool) {
	if m.payment_order != nil {
		return *m.payment_order, true
	}
	return
}

// PaymentOrderIDs returns the "payment_order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentOrderID instead. It exists only for internal usage by the builders.
func (m *ReceiveAddressMutation) PaymentOrderIDs() (ids []uuid.UUID) {
	if id := m.payment_order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymentOrder resets all changes to the "payment_order" edge.
func (m *ReceiveAddressMutation) ResetPaymentOrder() {
	m.payment_order = nil
	m.clearedpayment_order = false
}

// Where appends a list predicates to the ReceiveAddressMutation builder.
func (m *ReceiveAddressMutation) Where(ps ...predicate.ReceiveAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReceiveAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReceiveAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ReceiveAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReceiveAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReceiveAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ReceiveAddress).
func (m *ReceiveAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReceiveAddressMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, receiveaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, receiveaddress.FieldUpdatedAt)
	}
	if m.address != nil {
		fields = append(fields, receiveaddress.FieldAddress)
	}
	if m.salt != nil {
		fields = append(fields, receiveaddress.FieldSalt)
	}
	if m.status != nil {
		fields = append(fields, receiveaddress.FieldStatus)
	}
	if m.last_indexed_block != nil {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	if m.last_used != nil {
		fields = append(fields, receiveaddress.FieldLastUsed)
	}
	if m.tx_hash != nil {
		fields = append(fields, receiveaddress.FieldTxHash)
	}
	if m.valid_until != nil {
		fields = append(fields, receiveaddress.FieldValidUntil)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReceiveAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case receiveaddress.FieldCreatedAt:
		return m.CreatedAt()
	case receiveaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case receiveaddress.FieldAddress:
		return m.Address()
	case receiveaddress.FieldSalt:
		return m.Salt()
	case receiveaddress.FieldStatus:
		return m.Status()
	case receiveaddress.FieldLastIndexedBlock:
		return m.LastIndexedBlock()
	case receiveaddress.FieldLastUsed:
		return m.LastUsed()
	case receiveaddress.FieldTxHash:
		return m.TxHash()
	case receiveaddress.FieldValidUntil:
		return m.ValidUntil()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReceiveAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case receiveaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case receiveaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case receiveaddress.FieldAddress:
		return m.OldAddress(ctx)
	case receiveaddress.FieldSalt:
		return m.OldSalt(ctx)
	case receiveaddress.FieldStatus:
		return m.OldStatus(ctx)
	case receiveaddress.FieldLastIndexedBlock:
		return m.OldLastIndexedBlock(ctx)
	case receiveaddress.FieldLastUsed:
		return m.OldLastUsed(ctx)
	case receiveaddress.FieldTxHash:
		return m.OldTxHash(ctx)
	case receiveaddress.FieldValidUntil:
		return m.OldValidUntil(ctx)
	}
	return nil, fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceiveAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case receiveaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case receiveaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case receiveaddress.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case receiveaddress.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case receiveaddress.FieldStatus:
		v, ok := value.(receiveaddress.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case receiveaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastIndexedBlock(v)
		return nil
	case receiveaddress.FieldLastUsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsed(v)
		return nil
	case receiveaddress.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case receiveaddress.FieldValidUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidUntil(v)
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReceiveAddressMutation) AddedFields() []string {
	var fields []string
	if m.addlast_indexed_block != nil {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReceiveAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		return m.AddedLastIndexedBlock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceiveAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastIndexedBlock(v)
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReceiveAddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(receiveaddress.FieldLastIndexedBlock) {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	if m.FieldCleared(receiveaddress.FieldLastUsed) {
		fields = append(fields, receiveaddress.FieldLastUsed)
	}
	if m.FieldCleared(receiveaddress.FieldTxHash) {
		fields = append(fields, receiveaddress.FieldTxHash)
	}
	if m.FieldCleared(receiveaddress.FieldValidUntil) {
		fields = append(fields, receiveaddress.FieldValidUntil)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReceiveAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReceiveAddressMutation) ClearField(name string) error {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		m.ClearLastIndexedBlock()
		return nil
	case receiveaddress.FieldLastUsed:
		m.ClearLastUsed()
		return nil
	case receiveaddress.FieldTxHash:
		m.ClearTxHash()
		return nil
	case receiveaddress.FieldValidUntil:
		m.ClearValidUntil()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReceiveAddressMutation) ResetField(name string) error {
	switch name {
	case receiveaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case receiveaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case receiveaddress.FieldAddress:
		m.ResetAddress()
		return nil
	case receiveaddress.FieldSalt:
		m.ResetSalt()
		return nil
	case receiveaddress.FieldStatus:
		m.ResetStatus()
		return nil
	case receiveaddress.FieldLastIndexedBlock:
		m.ResetLastIndexedBlock()
		return nil
	case receiveaddress.FieldLastUsed:
		m.ResetLastUsed()
		return nil
	case receiveaddress.FieldTxHash:
		m.ResetTxHash()
		return nil
	case receiveaddress.FieldValidUntil:
		m.ResetValidUntil()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReceiveAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_order != nil {
		edges = append(edges, receiveaddress.EdgePaymentOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReceiveAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		if id := m.payment_order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReceiveAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReceiveAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReceiveAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_order {
		edges = append(edges, receiveaddress.EdgePaymentOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReceiveAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		return m.clearedpayment_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReceiveAddressMutation) ClearEdge(name string) error {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		m.ClearPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReceiveAddressMutation) ResetEdge(name string) error {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		m.ResetPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress edge %s", name)
}

// SenderOrderTokenMutation represents an operation that mutates the SenderOrderToken nodes in the graph.
type SenderOrderTokenMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	fee_percent    *decimal.Decimal
	addfee_percent *decimal.Decimal
	fee_address    *string
	refund_address *string
	clearedFields  map[string]struct{}
	sender         *uuid.UUID
	clearedsender  bool
	token          *int
	clearedtoken   bool
	done           bool
	oldValue       func(context.Context) (*SenderOrderToken, error)
	predicates     []predicate.SenderOrderToken
}

var _ ent.Mutation = (*SenderOrderTokenMutation)(nil)

// senderordertokenOption allows management of the mutation configuration using functional options.
type senderordertokenOption func(*SenderOrderTokenMutation)

// newSenderOrderTokenMutation creates new mutation for the SenderOrderToken entity.
func newSenderOrderTokenMutation(c config, op Op, opts ...senderordertokenOption) *SenderOrderTokenMutation {
	m := &SenderOrderTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeSenderOrderToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSenderOrderTokenID sets the ID field of the mutation.
func withSenderOrderTokenID(id int) senderordertokenOption {
	return func(m *SenderOrderTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *SenderOrderToken
		)
		m.oldValue = func(ctx context.Context) (*SenderOrderToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SenderOrderToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSenderOrderToken sets the old SenderOrderToken of the mutation.
func withSenderOrderToken(node *SenderOrderToken) senderordertokenOption {
	return func(m *SenderOrderTokenMutation) {
		m.oldValue = func(context.Context) (*SenderOrderToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SenderOrderTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SenderOrderTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SenderOrderTokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SenderOrderTokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SenderOrderToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SenderOrderTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SenderOrderTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SenderOrderToken entity.
// If the SenderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderOrderTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SenderOrderTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SenderOrderTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SenderOrderTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SenderOrderToken entity.
// If the SenderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderOrderTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SenderOrderTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFeePercent sets the "fee_percent" field.
func (m *SenderOrderTokenMutation) SetFeePercent(d decimal.Decimal) {
	m.fee_percent = &d
	m.addfee_percent = nil
}

// FeePercent returns the value of the "fee_percent" field in the mutation.
func (m *SenderOrderTokenMutation) FeePercent() (r decimal.Decimal, exists bool) {
	v := m.fee_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldFeePercent returns the old "fee_percent" field's value of the SenderOrderToken entity.
// If the SenderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderOrderTokenMutation) OldFeePercent(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeePercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeePercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeePercent: %w", err)
	}
	return oldValue.FeePercent, nil
}

// AddFeePercent adds d to the "fee_percent" field.
func (m *SenderOrderTokenMutation) AddFeePercent(d decimal.Decimal) {
	if m.addfee_percent != nil {
		*m.addfee_percent = m.addfee_percent.Add(d)
	} else {
		m.addfee_percent = &d
	}
}

// AddedFeePercent returns the value that was added to the "fee_percent" field in this mutation.
func (m *SenderOrderTokenMutation) AddedFeePercent() (r decimal.Decimal, exists bool) {
	v := m.addfee_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeePercent resets all changes to the "fee_percent" field.
func (m *SenderOrderTokenMutation) ResetFeePercent() {
	m.fee_percent = nil
	m.addfee_percent = nil
}

// SetFeeAddress sets the "fee_address" field.
func (m *SenderOrderTokenMutation) SetFeeAddress(s string) {
	m.fee_address = &s
}

// FeeAddress returns the value of the "fee_address" field in the mutation.
func (m *SenderOrderTokenMutation) FeeAddress() (r string, exists bool) {
	v := m.fee_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeAddress returns the old "fee_address" field's value of the SenderOrderToken entity.
// If the SenderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderOrderTokenMutation) OldFeeAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeAddress: %w", err)
	}
	return oldValue.FeeAddress, nil
}

// ResetFeeAddress resets all changes to the "fee_address" field.
func (m *SenderOrderTokenMutation) ResetFeeAddress() {
	m.fee_address = nil
}

// SetRefundAddress sets the "refund_address" field.
func (m *SenderOrderTokenMutation) SetRefundAddress(s string) {
	m.refund_address = &s
}

// RefundAddress returns the value of the "refund_address" field in the mutation.
func (m *SenderOrderTokenMutation) RefundAddress() (r string, exists bool) {
	v := m.refund_address
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundAddress returns the old "refund_address" field's value of the SenderOrderToken entity.
// If the SenderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderOrderTokenMutation) OldRefundAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundAddress: %w", err)
	}
	return oldValue.RefundAddress, nil
}

// ResetRefundAddress resets all changes to the "refund_address" field.
func (m *SenderOrderTokenMutation) ResetRefundAddress() {
	m.refund_address = nil
}

// SetSenderID sets the "sender" edge to the SenderProfile entity by id.
func (m *SenderOrderTokenMutation) SetSenderID(id uuid.UUID) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the SenderProfile entity.
func (m *SenderOrderTokenMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the SenderProfile entity was cleared.
func (m *SenderOrderTokenMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *SenderOrderTokenMutation) SenderID() (id uuid.UUID, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *SenderOrderTokenMutation) SenderIDs() (ids []uuid.UUID) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *SenderOrderTokenMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetTokenID sets the "token" edge to the Token entity by id.
func (m *SenderOrderTokenMutation) SetTokenID(id int) {
	m.token = &id
}

// ClearToken clears the "token" edge to the Token entity.
func (m *SenderOrderTokenMutation) ClearToken() {
	m.clearedtoken = true
}

// TokenCleared reports if the "token" edge to the Token entity was cleared.
func (m *SenderOrderTokenMutation) TokenCleared() bool {
	return m.clearedtoken
}

// TokenID returns the "token" edge ID in the mutation.
func (m *SenderOrderTokenMutation) TokenID() (id int, exists bool) {
	if m.token != nil {
		return *m.token, true
	}
	return
}

// TokenIDs returns the "token" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenID instead. It exists only for internal usage by the builders.
func (m *SenderOrderTokenMutation) TokenIDs() (ids []int) {
	if id := m.token; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToken resets all changes to the "token" edge.
func (m *SenderOrderTokenMutation) ResetToken() {
	m.token = nil
	m.clearedtoken = false
}

// Where appends a list predicates to the SenderOrderTokenMutation builder.
func (m *SenderOrderTokenMutation) Where(ps ...predicate.SenderOrderToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SenderOrderTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SenderOrderTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SenderOrderToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SenderOrderTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SenderOrderTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SenderOrderToken).
func (m *SenderOrderTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SenderOrderTokenMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, senderordertoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, senderordertoken.FieldUpdatedAt)
	}
	if m.fee_percent != nil {
		fields = append(fields, senderordertoken.FieldFeePercent)
	}
	if m.fee_address != nil {
		fields = append(fields, senderordertoken.FieldFeeAddress)
	}
	if m.refund_address != nil {
		fields = append(fields, senderordertoken.FieldRefundAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SenderOrderTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case senderordertoken.FieldCreatedAt:
		return m.CreatedAt()
	case senderordertoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case senderordertoken.FieldFeePercent:
		return m.FeePercent()
	case senderordertoken.FieldFeeAddress:
		return m.FeeAddress()
	case senderordertoken.FieldRefundAddress:
		return m.RefundAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SenderOrderTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case senderordertoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case senderordertoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case senderordertoken.FieldFeePercent:
		return m.OldFeePercent(ctx)
	case senderordertoken.FieldFeeAddress:
		return m.OldFeeAddress(ctx)
	case senderordertoken.FieldRefundAddress:
		return m.OldRefundAddress(ctx)
	}
	return nil, fmt.Errorf("unknown SenderOrderToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderOrderTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case senderordertoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case senderordertoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case senderordertoken.FieldFeePercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeePercent(v)
		return nil
	case senderordertoken.FieldFeeAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeAddress(v)
		return nil
	case senderordertoken.FieldRefundAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundAddress(v)
		return nil
	}
	return fmt.Errorf("unknown SenderOrderToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SenderOrderTokenMutation) AddedFields() []string {
	var fields []string
	if m.addfee_percent != nil {
		fields = append(fields, senderordertoken.FieldFeePercent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SenderOrderTokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case senderordertoken.FieldFeePercent:
		return m.AddedFeePercent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderOrderTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case senderordertoken.FieldFeePercent:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeePercent(v)
		return nil
	}
	return fmt.Errorf("unknown SenderOrderToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SenderOrderTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SenderOrderTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SenderOrderTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SenderOrderToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SenderOrderTokenMutation) ResetField(name string) error {
	switch name {
	case senderordertoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case senderordertoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case senderordertoken.FieldFeePercent:
		m.ResetFeePercent()
		return nil
	case senderordertoken.FieldFeeAddress:
		m.ResetFeeAddress()
		return nil
	case senderordertoken.FieldRefundAddress:
		m.ResetRefundAddress()
		return nil
	}
	return fmt.Errorf("unknown SenderOrderToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SenderOrderTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sender != nil {
		edges = append(edges, senderordertoken.EdgeSender)
	}
	if m.token != nil {
		edges = append(edges, senderordertoken.EdgeToken)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SenderOrderTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case senderordertoken.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case senderordertoken.EdgeToken:
		if id := m.token; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SenderOrderTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SenderOrderTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SenderOrderTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsender {
		edges = append(edges, senderordertoken.EdgeSender)
	}
	if m.clearedtoken {
		edges = append(edges, senderordertoken.EdgeToken)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SenderOrderTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case senderordertoken.EdgeSender:
		return m.clearedsender
	case senderordertoken.EdgeToken:
		return m.clearedtoken
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SenderOrderTokenMutation) ClearEdge(name string) error {
	switch name {
	case senderordertoken.EdgeSender:
		m.ClearSender()
		return nil
	case senderordertoken.EdgeToken:
		m.ClearToken()
		return nil
	}
	return fmt.Errorf("unknown SenderOrderToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SenderOrderTokenMutation) ResetEdge(name string) error {
	switch name {
	case senderordertoken.EdgeSender:
		m.ResetSender()
		return nil
	case senderordertoken.EdgeToken:
		m.ResetToken()
		return nil
	}
	return fmt.Errorf("unknown SenderOrderToken edge %s", name)
}

// SenderProfileMutation represents an operation that mutates the SenderProfile nodes in the graph.
type SenderProfileMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	webhook_url            *string
	domain_whitelist       *[]string
	appenddomain_whitelist []string
	provider_id            *string
	is_partner             *bool
	is_active              *bool
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	user                   *uuid.UUID
	cleareduser            bool
	api_key                *uuid.UUID
	clearedapi_key         bool
	payment_orders         map[uuid.UUID]struct{}
	removedpayment_orders  map[uuid.UUID]struct{}
	clearedpayment_orders  bool
	order_tokens           map[int]struct{}
	removedorder_tokens    map[int]struct{}
	clearedorder_tokens    bool
	linked_address         map[int]struct{}
	removedlinked_address  map[int]struct{}
	clearedlinked_address  bool
	done                   bool
	oldValue               func(context.Context) (*SenderProfile, error)
	predicates             []predicate.SenderProfile
}

var _ ent.Mutation = (*SenderProfileMutation)(nil)

// senderprofileOption allows management of the mutation configuration using functional options.
type senderprofileOption func(*SenderProfileMutation)

// newSenderProfileMutation creates new mutation for the SenderProfile entity.
func newSenderProfileMutation(c config, op Op, opts ...senderprofileOption) *SenderProfileMutation {
	m := &SenderProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeSenderProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSenderProfileID sets the ID field of the mutation.
func withSenderProfileID(id uuid.UUID) senderprofileOption {
	return func(m *SenderProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *SenderProfile
		)
		m.oldValue = func(ctx context.Context) (*SenderProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SenderProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSenderProfile sets the old SenderProfile of the mutation.
func withSenderProfile(node *SenderProfile) senderprofileOption {
	return func(m *SenderProfileMutation) {
		m.oldValue = func(context.Context) (*SenderProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SenderProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SenderProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SenderProfile entities.
func (m *SenderProfileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SenderProfileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SenderProfileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SenderProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWebhookURL sets the "webhook_url" field.
func (m *SenderProfileMutation) SetWebhookURL(s string) {
	m.webhook_url = &s
}

// WebhookURL returns the value of the "webhook_url" field in the mutation.
func (m *SenderProfileMutation) WebhookURL() (r string, exists bool) {
	v := m.webhook_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhookURL returns the old "webhook_url" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldWebhookURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhookURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhookURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhookURL: %w", err)
	}
	return oldValue.WebhookURL, nil
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (m *SenderProfileMutation) ClearWebhookURL() {
	m.webhook_url = nil
	m.clearedFields[senderprofile.FieldWebhookURL] = struct{}{}
}

// WebhookURLCleared returns if the "webhook_url" field was cleared in this mutation.
func (m *SenderProfileMutation) WebhookURLCleared() bool {
	_, ok := m.clearedFields[senderprofile.FieldWebhookURL]
	return ok
}

// ResetWebhookURL resets all changes to the "webhook_url" field.
func (m *SenderProfileMutation) ResetWebhookURL() {
	m.webhook_url = nil
	delete(m.clearedFields, senderprofile.FieldWebhookURL)
}

// SetDomainWhitelist sets the "domain_whitelist" field.
func (m *SenderProfileMutation) SetDomainWhitelist(s []string) {
	m.domain_whitelist = &s
	m.appenddomain_whitelist = nil
}

// DomainWhitelist returns the value of the "domain_whitelist" field in the mutation.
func (m *SenderProfileMutation) DomainWhitelist() (r []string, exists bool) {
	v := m.domain_whitelist
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainWhitelist returns the old "domain_whitelist" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldDomainWhitelist(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainWhitelist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainWhitelist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainWhitelist: %w", err)
	}
	return oldValue.DomainWhitelist, nil
}

// AppendDomainWhitelist adds s to the "domain_whitelist" field.
func (m *SenderProfileMutation) AppendDomainWhitelist(s []string) {
	m.appenddomain_whitelist = append(m.appenddomain_whitelist, s...)
}

// AppendedDomainWhitelist returns the list of values that were appended to the "domain_whitelist" field in this mutation.
func (m *SenderProfileMutation) AppendedDomainWhitelist() ([]string, bool) {
	if len(m.appenddomain_whitelist) == 0 {
		return nil, false
	}
	return m.appenddomain_whitelist, true
}

// ResetDomainWhitelist resets all changes to the "domain_whitelist" field.
func (m *SenderProfileMutation) ResetDomainWhitelist() {
	m.domain_whitelist = nil
	m.appenddomain_whitelist = nil
}

// SetProviderID sets the "provider_id" field.
func (m *SenderProfileMutation) SetProviderID(s string) {
	m.provider_id = &s
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *SenderProfileMutation) ProviderID() (r string, exists bool) {
	v := m.provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldProviderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ClearProviderID clears the value of the "provider_id" field.
func (m *SenderProfileMutation) ClearProviderID() {
	m.provider_id = nil
	m.clearedFields[senderprofile.FieldProviderID] = struct{}{}
}

// ProviderIDCleared returns if the "provider_id" field was cleared in this mutation.
func (m *SenderProfileMutation) ProviderIDCleared() bool {
	_, ok := m.clearedFields[senderprofile.FieldProviderID]
	return ok
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *SenderProfileMutation) ResetProviderID() {
	m.provider_id = nil
	delete(m.clearedFields, senderprofile.FieldProviderID)
}

// SetIsPartner sets the "is_partner" field.
func (m *SenderProfileMutation) SetIsPartner(b bool) {
	m.is_partner = &b
}

// IsPartner returns the value of the "is_partner" field in the mutation.
func (m *SenderProfileMutation) IsPartner() (r bool, exists bool) {
	v := m.is_partner
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPartner returns the old "is_partner" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldIsPartner(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPartner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPartner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPartner: %w", err)
	}
	return oldValue.IsPartner, nil
}

// ResetIsPartner resets all changes to the "is_partner" field.
func (m *SenderProfileMutation) ResetIsPartner() {
	m.is_partner = nil
}

// SetIsActive sets the "is_active" field.
func (m *SenderProfileMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SenderProfileMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SenderProfileMutation) ResetIsActive() {
	m.is_active = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SenderProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SenderProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SenderProfile entity.
// If the SenderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderProfileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SenderProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SenderProfileMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SenderProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SenderProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SenderProfileMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SenderProfileMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SenderProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by id.
func (m *SenderProfileMutation) SetAPIKeyID(id uuid.UUID) {
	m.api_key = &id
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (m *SenderProfileMutation) ClearAPIKey() {
	m.clearedapi_key = true
}

// APIKeyCleared reports if the "api_key" edge to the APIKey entity was cleared.
func (m *SenderProfileMutation) APIKeyCleared() bool {
	return m.clearedapi_key
}

// APIKeyID returns the "api_key" edge ID in the mutation.
func (m *SenderProfileMutation) APIKeyID() (id uuid.UUID, exists bool) {
	if m.api_key != nil {
		return *m.api_key, true
	}
	return
}

// APIKeyIDs returns the "api_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// APIKeyID instead. It exists only for internal usage by the builders.
func (m *SenderProfileMutation) APIKeyIDs() (ids []uuid.UUID) {
	if id := m.api_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAPIKey resets all changes to the "api_key" edge.
func (m *SenderProfileMutation) ResetAPIKey() {
	m.api_key = nil
	m.clearedapi_key = false
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *SenderProfileMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *SenderProfileMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *SenderProfileMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *SenderProfileMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *SenderProfileMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *SenderProfileMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *SenderProfileMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// AddOrderTokenIDs adds the "order_tokens" edge to the SenderOrderToken entity by ids.
func (m *SenderProfileMutation) AddOrderTokenIDs(ids ...int) {
	if m.order_tokens == nil {
		m.order_tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.order_tokens[ids[i]] = struct{}{}
	}
}

// ClearOrderTokens clears the "order_tokens" edge to the SenderOrderToken entity.
func (m *SenderProfileMutation) ClearOrderTokens() {
	m.clearedorder_tokens = true
}

// OrderTokensCleared reports if the "order_tokens" edge to the SenderOrderToken entity was cleared.
func (m *SenderProfileMutation) OrderTokensCleared() bool {
	return m.clearedorder_tokens
}

// RemoveOrderTokenIDs removes the "order_tokens" edge to the SenderOrderToken entity by IDs.
func (m *SenderProfileMutation) RemoveOrderTokenIDs(ids ...int) {
	if m.removedorder_tokens == nil {
		m.removedorder_tokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.order_tokens, ids[i])
		m.removedorder_tokens[ids[i]] = struct{}{}
	}
}

// RemovedOrderTokens returns the removed IDs of the "order_tokens" edge to the SenderOrderToken entity.
func (m *SenderProfileMutation) RemovedOrderTokensIDs() (ids []int) {
	for id := range m.removedorder_tokens {
		ids = append(ids, id)
	}
	return
}

// OrderTokensIDs returns the "order_tokens" edge IDs in the mutation.
func (m *SenderProfileMutation) OrderTokensIDs() (ids []int) {
	for id := range m.order_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetOrderTokens resets all changes to the "order_tokens" edge.
func (m *SenderProfileMutation) ResetOrderTokens() {
	m.order_tokens = nil
	m.clearedorder_tokens = false
	m.removedorder_tokens = nil
}

// AddLinkedAddresIDs adds the "linked_address" edge to the LinkedAddress entity by ids.
func (m *SenderProfileMutation) AddLinkedAddresIDs(ids ...int) {
	if m.linked_address == nil {
		m.linked_address = make(map[int]struct{})
	}
	for i := range ids {
		m.linked_address[ids[i]] = struct{}{}
	}
}

// ClearLinkedAddress clears the "linked_address" edge to the LinkedAddress entity.
func (m *SenderProfileMutation) ClearLinkedAddress() {
	m.clearedlinked_address = true
}

// LinkedAddressCleared reports if the "linked_address" edge to the LinkedAddress entity was cleared.
func (m *SenderProfileMutation) LinkedAddressCleared() bool {
	return m.clearedlinked_address
}

// RemoveLinkedAddresIDs removes the "linked_address" edge to the LinkedAddress entity by IDs.
func (m *SenderProfileMutation) RemoveLinkedAddresIDs(ids ...int) {
	if m.removedlinked_address == nil {
		m.removedlinked_address = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.linked_address, ids[i])
		m.removedlinked_address[ids[i]] = struct{}{}
	}
}

// RemovedLinkedAddress returns the removed IDs of the "linked_address" edge to the LinkedAddress entity.
func (m *SenderProfileMutation) RemovedLinkedAddressIDs() (ids []int) {
	for id := range m.removedlinked_address {
		ids = append(ids, id)
	}
	return
}

// LinkedAddressIDs returns the "linked_address" edge IDs in the mutation.
func (m *SenderProfileMutation) LinkedAddressIDs() (ids []int) {
	for id := range m.linked_address {
		ids = append(ids, id)
	}
	return
}

// ResetLinkedAddress resets all changes to the "linked_address" edge.
func (m *SenderProfileMutation) ResetLinkedAddress() {
	m.linked_address = nil
	m.clearedlinked_address = false
	m.removedlinked_address = nil
}

// Where appends a list predicates to the SenderProfileMutation builder.
func (m *SenderProfileMutation) Where(ps ...predicate.SenderProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SenderProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SenderProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SenderProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SenderProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SenderProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SenderProfile).
func (m *SenderProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SenderProfileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.webhook_url != nil {
		fields = append(fields, senderprofile.FieldWebhookURL)
	}
	if m.domain_whitelist != nil {
		fields = append(fields, senderprofile.FieldDomainWhitelist)
	}
	if m.provider_id != nil {
		fields = append(fields, senderprofile.FieldProviderID)
	}
	if m.is_partner != nil {
		fields = append(fields, senderprofile.FieldIsPartner)
	}
	if m.is_active != nil {
		fields = append(fields, senderprofile.FieldIsActive)
	}
	if m.updated_at != nil {
		fields = append(fields, senderprofile.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SenderProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case senderprofile.FieldWebhookURL:
		return m.WebhookURL()
	case senderprofile.FieldDomainWhitelist:
		return m.DomainWhitelist()
	case senderprofile.FieldProviderID:
		return m.ProviderID()
	case senderprofile.FieldIsPartner:
		return m.IsPartner()
	case senderprofile.FieldIsActive:
		return m.IsActive()
	case senderprofile.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SenderProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case senderprofile.FieldWebhookURL:
		return m.OldWebhookURL(ctx)
	case senderprofile.FieldDomainWhitelist:
		return m.OldDomainWhitelist(ctx)
	case senderprofile.FieldProviderID:
		return m.OldProviderID(ctx)
	case senderprofile.FieldIsPartner:
		return m.OldIsPartner(ctx)
	case senderprofile.FieldIsActive:
		return m.OldIsActive(ctx)
	case senderprofile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SenderProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case senderprofile.FieldWebhookURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhookURL(v)
		return nil
	case senderprofile.FieldDomainWhitelist:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainWhitelist(v)
		return nil
	case senderprofile.FieldProviderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	case senderprofile.FieldIsPartner:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPartner(v)
		return nil
	case senderprofile.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case senderprofile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SenderProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SenderProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SenderProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SenderProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SenderProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(senderprofile.FieldWebhookURL) {
		fields = append(fields, senderprofile.FieldWebhookURL)
	}
	if m.FieldCleared(senderprofile.FieldProviderID) {
		fields = append(fields, senderprofile.FieldProviderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SenderProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SenderProfileMutation) ClearField(name string) error {
	switch name {
	case senderprofile.FieldWebhookURL:
		m.ClearWebhookURL()
		return nil
	case senderprofile.FieldProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown SenderProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SenderProfileMutation) ResetField(name string) error {
	switch name {
	case senderprofile.FieldWebhookURL:
		m.ResetWebhookURL()
		return nil
	case senderprofile.FieldDomainWhitelist:
		m.ResetDomainWhitelist()
		return nil
	case senderprofile.FieldProviderID:
		m.ResetProviderID()
		return nil
	case senderprofile.FieldIsPartner:
		m.ResetIsPartner()
		return nil
	case senderprofile.FieldIsActive:
		m.ResetIsActive()
		return nil
	case senderprofile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SenderProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SenderProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.user != nil {
		edges = append(edges, senderprofile.EdgeUser)
	}
	if m.api_key != nil {
		edges = append(edges, senderprofile.EdgeAPIKey)
	}
	if m.payment_orders != nil {
		edges = append(edges, senderprofile.EdgePaymentOrders)
	}
	if m.order_tokens != nil {
		edges = append(edges, senderprofile.EdgeOrderTokens)
	}
	if m.linked_address != nil {
		edges = append(edges, senderprofile.EdgeLinkedAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SenderProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case senderprofile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case senderprofile.EdgeAPIKey:
		if id := m.api_key; id != nil {
			return []ent.Value{*id}
		}
	case senderprofile.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	case senderprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.order_tokens))
		for id := range m.order_tokens {
			ids = append(ids, id)
		}
		return ids
	case senderprofile.EdgeLinkedAddress:
		ids := make([]ent.Value, 0, len(m.linked_address))
		for id := range m.linked_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SenderProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedpayment_orders != nil {
		edges = append(edges, senderprofile.EdgePaymentOrders)
	}
	if m.removedorder_tokens != nil {
		edges = append(edges, senderprofile.EdgeOrderTokens)
	}
	if m.removedlinked_address != nil {
		edges = append(edges, senderprofile.EdgeLinkedAddress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SenderProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case senderprofile.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	case senderprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.removedorder_tokens))
		for id := range m.removedorder_tokens {
			ids = append(ids, id)
		}
		return ids
	case senderprofile.EdgeLinkedAddress:
		ids := make([]ent.Value, 0, len(m.removedlinked_address))
		for id := range m.removedlinked_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SenderProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareduser {
		edges = append(edges, senderprofile.EdgeUser)
	}
	if m.clearedapi_key {
		edges = append(edges, senderprofile.EdgeAPIKey)
	}
	if m.clearedpayment_orders {
		edges = append(edges, senderprofile.EdgePaymentOrders)
	}
	if m.clearedorder_tokens {
		edges = append(edges, senderprofile.EdgeOrderTokens)
	}
	if m.clearedlinked_address {
		edges = append(edges, senderprofile.EdgeLinkedAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SenderProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case senderprofile.EdgeUser:
		return m.cleareduser
	case senderprofile.EdgeAPIKey:
		return m.clearedapi_key
	case senderprofile.EdgePaymentOrders:
		return m.clearedpayment_orders
	case senderprofile.EdgeOrderTokens:
		return m.clearedorder_tokens
	case senderprofile.EdgeLinkedAddress:
		return m.clearedlinked_address
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SenderProfileMutation) ClearEdge(name string) error {
	switch name {
	case senderprofile.EdgeUser:
		m.ClearUser()
		return nil
	case senderprofile.EdgeAPIKey:
		m.ClearAPIKey()
		return nil
	}
	return fmt.Errorf("unknown SenderProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SenderProfileMutation) ResetEdge(name string) error {
	switch name {
	case senderprofile.EdgeUser:
		m.ResetUser()
		return nil
	case senderprofile.EdgeAPIKey:
		m.ResetAPIKey()
		return nil
	case senderprofile.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	case senderprofile.EdgeOrderTokens:
		m.ResetOrderTokens()
		return nil
	case senderprofile.EdgeLinkedAddress:
		m.ResetLinkedAddress()
		return nil
	}
	return fmt.Errorf("unknown SenderProfile edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	symbol                     *string
	contract_address           *string
	decimals                   *int8
	adddecimals                *int8
	is_enabled                 *bool
	clearedFields              map[string]struct{}
	network                    *int
	clearednetwork             bool
	payment_orders             map[uuid.UUID]struct{}
	removedpayment_orders      map[uuid.UUID]struct{}
	clearedpayment_orders      bool
	lock_payment_orders        map[uuid.UUID]struct{}
	removedlock_payment_orders map[uuid.UUID]struct{}
	clearedlock_payment_orders bool
	sender_settings            map[int]struct{}
	removedsender_settings     map[int]struct{}
	clearedsender_settings     bool
	done                       bool
	oldValue                   func(context.Context) (*Token, error)
	predicates                 []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id int) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSymbol sets the "symbol" field.
func (m *TokenMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *TokenMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *TokenMutation) ResetSymbol() {
	m.symbol = nil
}

// SetContractAddress sets the "contract_address" field.
func (m *TokenMutation) SetContractAddress(s string) {
	m.contract_address = &s
}

// ContractAddress returns the value of the "contract_address" field in the mutation.
func (m *TokenMutation) ContractAddress() (r string, exists bool) {
	v := m.contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContractAddress returns the old "contract_address" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractAddress: %w", err)
	}
	return oldValue.ContractAddress, nil
}

// ResetContractAddress resets all changes to the "contract_address" field.
func (m *TokenMutation) ResetContractAddress() {
	m.contract_address = nil
}

// SetDecimals sets the "decimals" field.
func (m *TokenMutation) SetDecimals(i int8) {
	m.decimals = &i
	m.adddecimals = nil
}

// Decimals returns the value of the "decimals" field in the mutation.
func (m *TokenMutation) Decimals() (r int8, exists bool) {
	v := m.decimals
	if v == nil {
		return
	}
	return *v, true
}

// OldDecimals returns the old "decimals" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldDecimals(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDecimals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDecimals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDecimals: %w", err)
	}
	return oldValue.Decimals, nil
}

// AddDecimals adds i to the "decimals" field.
func (m *TokenMutation) AddDecimals(i int8) {
	if m.adddecimals != nil {
		*m.adddecimals += i
	} else {
		m.adddecimals = &i
	}
}

// AddedDecimals returns the value that was added to the "decimals" field in this mutation.
func (m *TokenMutation) AddedDecimals() (r int8, exists bool) {
	v := m.adddecimals
	if v == nil {
		return
	}
	return *v, true
}

// ResetDecimals resets all changes to the "decimals" field.
func (m *TokenMutation) ResetDecimals() {
	m.decimals = nil
	m.adddecimals = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *TokenMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *TokenMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *TokenMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// SetNetworkID sets the "network" edge to the Network entity by id.
func (m *TokenMutation) SetNetworkID(id int) {
	m.network = &id
}

// ClearNetwork clears the "network" edge to the Network entity.
func (m *TokenMutation) ClearNetwork() {
	m.clearednetwork = true
}

// NetworkCleared reports if the "network" edge to the Network entity was cleared.
func (m *TokenMutation) NetworkCleared() bool {
	return m.clearednetwork
}

// NetworkID returns the "network" edge ID in the mutation.
func (m *TokenMutation) NetworkID() (id int, exists bool) {
	if m.network != nil {
		return *m.network, true
	}
	return
}

// NetworkIDs returns the "network" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NetworkID instead. It exists only for internal usage by the builders.
func (m *TokenMutation) NetworkIDs() (ids []int) {
	if id := m.network; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNetwork resets all changes to the "network" edge.
func (m *TokenMutation) ResetNetwork() {
	m.network = nil
	m.clearednetwork = false
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *TokenMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *TokenMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *TokenMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *TokenMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *TokenMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *TokenMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *TokenMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by ids.
func (m *TokenMutation) AddLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.lock_payment_orders == nil {
		m.lock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.lock_payment_orders[ids[i]] = struct{}{}
	}
}

// ClearLockPaymentOrders clears the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *TokenMutation) ClearLockPaymentOrders() {
	m.clearedlock_payment_orders = true
}

// LockPaymentOrdersCleared reports if the "lock_payment_orders" edge to the LockPaymentOrder entity was cleared.
func (m *TokenMutation) LockPaymentOrdersCleared() bool {
	return m.clearedlock_payment_orders
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (m *TokenMutation) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedlock_payment_orders == nil {
		m.removedlock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.lock_payment_orders, ids[i])
		m.removedlock_payment_orders[ids[i]] = struct{}{}
	}
}

// RemovedLockPaymentOrders returns the removed IDs of the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *TokenMutation) RemovedLockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedlock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// LockPaymentOrdersIDs returns the "lock_payment_orders" edge IDs in the mutation.
func (m *TokenMutation) LockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.lock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetLockPaymentOrders resets all changes to the "lock_payment_orders" edge.
func (m *TokenMutation) ResetLockPaymentOrders() {
	m.lock_payment_orders = nil
	m.clearedlock_payment_orders = false
	m.removedlock_payment_orders = nil
}

// AddSenderSettingIDs adds the "sender_settings" edge to the SenderOrderToken entity by ids.
func (m *TokenMutation) AddSenderSettingIDs(ids ...int) {
	if m.sender_settings == nil {
		m.sender_settings = make(map[int]struct{})
	}
	for i := range ids {
		m.sender_settings[ids[i]] = struct{}{}
	}
}

// ClearSenderSettings clears the "sender_settings" edge to the SenderOrderToken entity.
func (m *TokenMutation) ClearSenderSettings() {
	m.clearedsender_settings = true
}

// SenderSettingsCleared reports if the "sender_settings" edge to the SenderOrderToken entity was cleared.
func (m *TokenMutation) SenderSettingsCleared() bool {
	return m.clearedsender_settings
}

// RemoveSenderSettingIDs removes the "sender_settings" edge to the SenderOrderToken entity by IDs.
func (m *TokenMutation) RemoveSenderSettingIDs(ids ...int) {
	if m.removedsender_settings == nil {
		m.removedsender_settings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sender_settings, ids[i])
		m.removedsender_settings[ids[i]] = struct{}{}
	}
}

// RemovedSenderSettings returns the removed IDs of the "sender_settings" edge to the SenderOrderToken entity.
func (m *TokenMutation) RemovedSenderSettingsIDs() (ids []int) {
	for id := range m.removedsender_settings {
		ids = append(ids, id)
	}
	return
}

// SenderSettingsIDs returns the "sender_settings" edge IDs in the mutation.
func (m *TokenMutation) SenderSettingsIDs() (ids []int) {
	for id := range m.sender_settings {
		ids = append(ids, id)
	}
	return
}

// ResetSenderSettings resets all changes to the "sender_settings" edge.
func (m *TokenMutation) ResetSenderSettings() {
	m.sender_settings = nil
	m.clearedsender_settings = false
	m.removedsender_settings = nil
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, token.FieldUpdatedAt)
	}
	if m.symbol != nil {
		fields = append(fields, token.FieldSymbol)
	}
	if m.contract_address != nil {
		fields = append(fields, token.FieldContractAddress)
	}
	if m.decimals != nil {
		fields = append(fields, token.FieldDecimals)
	}
	if m.is_enabled != nil {
		fields = append(fields, token.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldCreatedAt:
		return m.CreatedAt()
	case token.FieldUpdatedAt:
		return m.UpdatedAt()
	case token.FieldSymbol:
		return m.Symbol()
	case token.FieldContractAddress:
		return m.ContractAddress()
	case token.FieldDecimals:
		return m.Decimals()
	case token.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case token.FieldSymbol:
		return m.OldSymbol(ctx)
	case token.FieldContractAddress:
		return m.OldContractAddress(ctx)
	case token.FieldDecimals:
		return m.OldDecimals(ctx)
	case token.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case token.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case token.FieldContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractAddress(v)
		return nil
	case token.FieldDecimals:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDecimals(v)
		return nil
	case token.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	var fields []string
	if m.adddecimals != nil {
		fields = append(fields, token.FieldDecimals)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case token.FieldDecimals:
		return m.AddedDecimals()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case token.FieldDecimals:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDecimals(v)
		return nil
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case token.FieldSymbol:
		m.ResetSymbol()
		return nil
	case token.FieldContractAddress:
		m.ResetContractAddress()
		return nil
	case token.FieldDecimals:
		m.ResetDecimals()
		return nil
	case token.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.network != nil {
		edges = append(edges, token.EdgeNetwork)
	}
	if m.payment_orders != nil {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.lock_payment_orders != nil {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	if m.sender_settings != nil {
		edges = append(edges, token.EdgeSenderSettings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case token.EdgeNetwork:
		if id := m.network; id != nil {
			return []ent.Value{*id}
		}
	case token.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.lock_payment_orders))
		for id := range m.lock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeSenderSettings:
		ids := make([]ent.Value, 0, len(m.sender_settings))
		for id := range m.sender_settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedpayment_orders != nil {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.removedlock_payment_orders != nil {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	if m.removedsender_settings != nil {
		edges = append(edges, token.EdgeSenderSettings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case token.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedlock_payment_orders))
		for id := range m.removedlock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeSenderSettings:
		ids := make([]ent.Value, 0, len(m.removedsender_settings))
		for id := range m.removedsender_settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearednetwork {
		edges = append(edges, token.EdgeNetwork)
	}
	if m.clearedpayment_orders {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.clearedlock_payment_orders {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	if m.clearedsender_settings {
		edges = append(edges, token.EdgeSenderSettings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case token.EdgeNetwork:
		return m.clearednetwork
	case token.EdgePaymentOrders:
		return m.clearedpayment_orders
	case token.EdgeLockPaymentOrders:
		return m.clearedlock_payment_orders
	case token.EdgeSenderSettings:
		return m.clearedsender_settings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	switch name {
	case token.EdgeNetwork:
		m.ClearNetwork()
		return nil
	}
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	switch name {
	case token.EdgeNetwork:
		m.ResetNetwork()
		return nil
	case token.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	case token.EdgeLockPaymentOrders:
		m.ResetLockPaymentOrders()
		return nil
	case token.EdgeSenderSettings:
		m.ResetSenderSettings()
		return nil
	}
	return fmt.Errorf("unknown Token edge %s", name)
}

// TransactionLogMutation represents an operation that mutates the TransactionLog nodes in the graph.
type TransactionLogMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	gateway_id    *string
	status        *transactionlog.Status
	network       *string
	tx_hash       *string
	metadata      *map[string]interface{}
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TransactionLog, error)
	predicates    []predicate.TransactionLog
}

var _ ent.Mutation = (*TransactionLogMutation)(nil)

// transactionlogOption allows management of the mutation configuration using functional options.
type transactionlogOption func(*TransactionLogMutation)

// newTransactionLogMutation creates new mutation for the TransactionLog entity.
func newTransactionLogMutation(c config, op Op, opts ...transactionlogOption) *TransactionLogMutation {
	m := &TransactionLogMutation{
		config:        c,
		op:            op,
		typ:           TypeTransactionLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionLogID sets the ID field of the mutation.
func withTransactionLogID(id uuid.UUID) transactionlogOption {
	return func(m *TransactionLogMutation) {
		var (
			err   error
			once  sync.Once
			value *TransactionLog
		)
		m.oldValue = func(ctx context.Context) (*TransactionLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TransactionLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransactionLog sets the old TransactionLog of the mutation.
func withTransactionLog(node *TransactionLog) transactionlogOption {
	return func(m *TransactionLogMutation) {
		m.oldValue = func(context.Context) (*TransactionLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TransactionLog entities.
func (m *TransactionLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TransactionLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGatewayID sets the "gateway_id" field.
func (m *TransactionLogMutation) SetGatewayID(s string) {
	m.gateway_id = &s
}

// GatewayID returns the value of the "gateway_id" field in the mutation.
func (m *TransactionLogMutation) GatewayID() (r string, exists bool) {
	v := m.gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayID returns the old "gateway_id" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldGatewayID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayID: %w", err)
	}
	return oldValue.GatewayID, nil
}

// ClearGatewayID clears the value of the "gateway_id" field.
func (m *TransactionLogMutation) ClearGatewayID() {
	m.gateway_id = nil
	m.clearedFields[transactionlog.FieldGatewayID] = struct{}{}
}

// GatewayIDCleared returns if the "gateway_id" field was cleared in this mutation.
func (m *TransactionLogMutation) GatewayIDCleared() bool {
	_, ok := m.clearedFields[transactionlog.FieldGatewayID]
	return ok
}

// ResetGatewayID resets all changes to the "gateway_id" field.
func (m *TransactionLogMutation) ResetGatewayID() {
	m.gateway_id = nil
	delete(m.clearedFields, transactionlog.FieldGatewayID)
}

// SetStatus sets the "status" field.
func (m *TransactionLogMutation) SetStatus(t transactionlog.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TransactionLogMutation) Status() (r transactionlog.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldStatus(ctx context.Context) (v transactionlog.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TransactionLogMutation) ResetStatus() {
	m.status = nil
}

// SetNetwork sets the "network" field.
func (m *TransactionLogMutation) SetNetwork(s string) {
	m.network = &s
}

// Network returns the value of the "network" field in the mutation.
func (m *TransactionLogMutation) Network() (r string, exists bool) {
	v := m.network
	if v == nil {
		return
	}
	return *v, true
}

// OldNetwork returns the old "network" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldNetwork(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetwork is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetwork requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetwork: %w", err)
	}
	return oldValue.Network, nil
}

// ClearNetwork clears the value of the "network" field.
func (m *TransactionLogMutation) ClearNetwork() {
	m.network = nil
	m.clearedFields[transactionlog.FieldNetwork] = struct{}{}
}

// NetworkCleared returns if the "network" field was cleared in this mutation.
func (m *TransactionLogMutation) NetworkCleared() bool {
	_, ok := m.clearedFields[transactionlog.FieldNetwork]
	return ok
}

// ResetNetwork resets all changes to the "network" field.
func (m *TransactionLogMutation) ResetNetwork() {
	m.network = nil
	delete(m.clearedFields, transactionlog.FieldNetwork)
}

// SetTxHash sets the "tx_hash" field.
func (m *TransactionLogMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *TransactionLogMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *TransactionLogMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[transactionlog.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *TransactionLogMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[transactionlog.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *TransactionLogMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, transactionlog.FieldTxHash)
}

// SetMetadata sets the "metadata" field.
func (m *TransactionLogMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *TransactionLogMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *TransactionLogMutation) ResetMetadata() {
	m.metadata = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TransactionLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransactionLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TransactionLog entity.
// If the TransactionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransactionLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TransactionLogMutation builder.
func (m *TransactionLogMutation) Where(ps ...predicate.TransactionLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TransactionLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TransactionLog).
func (m *TransactionLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionLogMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.gateway_id != nil {
		fields = append(fields, transactionlog.FieldGatewayID)
	}
	if m.status != nil {
		fields = append(fields, transactionlog.FieldStatus)
	}
	if m.network != nil {
		fields = append(fields, transactionlog.FieldNetwork)
	}
	if m.tx_hash != nil {
		fields = append(fields, transactionlog.FieldTxHash)
	}
	if m.metadata != nil {
		fields = append(fields, transactionlog.FieldMetadata)
	}
	if m.created_at != nil {
		fields = append(fields, transactionlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transactionlog.FieldGatewayID:
		return m.GatewayID()
	case transactionlog.FieldStatus:
		return m.Status()
	case transactionlog.FieldNetwork:
		return m.Network()
	case transactionlog.FieldTxHash:
		return m.TxHash()
	case transactionlog.FieldMetadata:
		return m.Metadata()
	case transactionlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transactionlog.FieldGatewayID:
		return m.OldGatewayID(ctx)
	case transactionlog.FieldStatus:
		return m.OldStatus(ctx)
	case transactionlog.FieldNetwork:
		return m.OldNetwork(ctx)
	case transactionlog.FieldTxHash:
		return m.OldTxHash(ctx)
	case transactionlog.FieldMetadata:
		return m.OldMetadata(ctx)
	case transactionlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TransactionLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transactionlog.FieldGatewayID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayID(v)
		return nil
	case transactionlog.FieldStatus:
		v, ok := value.(transactionlog.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case transactionlog.FieldNetwork:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetwork(v)
		return nil
	case transactionlog.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case transactionlog.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case transactionlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TransactionLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TransactionLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transactionlog.FieldGatewayID) {
		fields = append(fields, transactionlog.FieldGatewayID)
	}
	if m.FieldCleared(transactionlog.FieldNetwork) {
		fields = append(fields, transactionlog.FieldNetwork)
	}
	if m.FieldCleared(transactionlog.FieldTxHash) {
		fields = append(fields, transactionlog.FieldTxHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionLogMutation) ClearField(name string) error {
	switch name {
	case transactionlog.FieldGatewayID:
		m.ClearGatewayID()
		return nil
	case transactionlog.FieldNetwork:
		m.ClearNetwork()
		return nil
	case transactionlog.FieldTxHash:
		m.ClearTxHash()
		return nil
	}
	return fmt.Errorf("unknown TransactionLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionLogMutation) ResetField(name string) error {
	switch name {
	case transactionlog.FieldGatewayID:
		m.ResetGatewayID()
		return nil
	case transactionlog.FieldStatus:
		m.ResetStatus()
		return nil
	case transactionlog.FieldNetwork:
		m.ResetNetwork()
		return nil
	case transactionlog.FieldTxHash:
		m.ResetTxHash()
		return nil
	case transactionlog.FieldMetadata:
		m.ResetMetadata()
		return nil
	case transactionlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TransactionLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TransactionLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TransactionLog edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *time.Time
	updated_at                *time.Time
	first_name                *string
	last_name                 *string
	email                     *string
	password                  *string
	scope                     *string
	is_email_verified         *bool
	has_early_access          *bool
	clearedFields             map[string]struct{}
	sender_profile            *uuid.UUID
	clearedsender_profile     bool
	provider_profile          *string
	clearedprovider_profile   bool
	verification_token        map[uuid.UUID]struct{}
	removedverification_token map[uuid.UUID]struct{}
	clearedverification_token bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetScope sets the "scope" field.
func (m *UserMutation) SetScope(s string) {
	m.scope = &s
}

// Scope returns the value of the "scope" field in the mutation.
func (m *UserMutation) Scope() (r string, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *UserMutation) ResetScope() {
	m.scope = nil
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (m *UserMutation) SetIsEmailVerified(b bool) {
	m.is_email_verified = &b
}

// IsEmailVerified returns the value of the "is_email_verified" field in the mutation.
func (m *UserMutation) IsEmailVerified() (r bool, exists bool) {
	v := m.is_email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEmailVerified returns the old "is_email_verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEmailVerified: %w", err)
	}
	return oldValue.IsEmailVerified, nil
}

// ResetIsEmailVerified resets all changes to the "is_email_verified" field.
func (m *UserMutation) ResetIsEmailVerified() {
	m.is_email_verified = nil
}

// SetHasEarlyAccess sets the "has_early_access" field.
func (m *UserMutation) SetHasEarlyAccess(b bool) {
	m.has_early_access = &b
}

// HasEarlyAccess returns the value of the "has_early_access" field in the mutation.
func (m *UserMutation) HasEarlyAccess() (r bool, exists bool) {
	v := m.has_early_access
	if v == nil {
		return
	}
	return *v, true
}

// OldHasEarlyAccess returns the old "has_early_access" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHasEarlyAccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasEarlyAccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasEarlyAccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasEarlyAccess: %w", err)
	}
	return oldValue.HasEarlyAccess, nil
}

// ResetHasEarlyAccess resets all changes to the "has_early_access" field.
func (m *UserMutation) ResetHasEarlyAccess() {
	m.has_early_access = nil
}

// SetSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by id.
func (m *UserMutation) SetSenderProfileID(id uuid.UUID) {
	m.sender_profile = &id
}

// ClearSenderProfile clears the "sender_profile" edge to the SenderProfile entity.
func (m *UserMutation) ClearSenderProfile() {
	m.clearedsender_profile = true
}

// SenderProfileCleared reports if the "sender_profile" edge to the SenderProfile entity was cleared.
func (m *UserMutation) SenderProfileCleared() bool {
	return m.clearedsender_profile
}

// SenderProfileID returns the "sender_profile" edge ID in the mutation.
func (m *UserMutation) SenderProfileID() (id uuid.UUID, exists bool) {
	if m.sender_profile != nil {
		return *m.sender_profile, true
	}
	return
}

// SenderProfileIDs returns the "sender_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SenderProfileIDs() (ids []uuid.UUID) {
	if id := m.sender_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSenderProfile resets all changes to the "sender_profile" edge.
func (m *UserMutation) ResetSenderProfile() {
	m.sender_profile = nil
	m.clearedsender_profile = false
}

// SetProviderProfileID sets the "provider_profile" edge to the ProviderProfile entity by id.
func (m *UserMutation) SetProviderProfileID(id string) {
	m.provider_profile = &id
}

// ClearProviderProfile clears the "provider_profile" edge to the ProviderProfile entity.
func (m *UserMutation) ClearProviderProfile() {
	m.clearedprovider_profile = true
}

// ProviderProfileCleared reports if the "provider_profile" edge to the ProviderProfile entity was cleared.
func (m *UserMutation) ProviderProfileCleared() bool {
	return m.clearedprovider_profile
}

// ProviderProfileID returns the "provider_profile" edge ID in the mutation.
func (m *UserMutation) ProviderProfileID() (id string, exists bool) {
	if m.provider_profile != nil {
		return *m.provider_profile, true
	}
	return
}

// ProviderProfileIDs returns the "provider_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProviderProfileIDs() (ids []string) {
	if id := m.provider_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderProfile resets all changes to the "provider_profile" edge.
func (m *UserMutation) ResetProviderProfile() {
	m.provider_profile = nil
	m.clearedprovider_profile = false
}

// AddVerificationTokenIDs adds the "verification_token" edge to the VerificationToken entity by ids.
func (m *UserMutation) AddVerificationTokenIDs(ids ...uuid.UUID) {
	if m.verification_token == nil {
		m.verification_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.verification_token[ids[i]] = struct{}{}
	}
}

// ClearVerificationToken clears the "verification_token" edge to the VerificationToken entity.
func (m *UserMutation) ClearVerificationToken() {
	m.clearedverification_token = true
}

// VerificationTokenCleared reports if the "verification_token" edge to the VerificationToken entity was cleared.
func (m *UserMutation) VerificationTokenCleared() bool {
	return m.clearedverification_token
}

// RemoveVerificationTokenIDs removes the "verification_token" edge to the VerificationToken entity by IDs.
func (m *UserMutation) RemoveVerificationTokenIDs(ids ...uuid.UUID) {
	if m.removedverification_token == nil {
		m.removedverification_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.verification_token, ids[i])
		m.removedverification_token[ids[i]] = struct{}{}
	}
}

// RemovedVerificationToken returns the removed IDs of the "verification_token" edge to the VerificationToken entity.
func (m *UserMutation) RemovedVerificationTokenIDs() (ids []uuid.UUID) {
	for id := range m.removedverification_token {
		ids = append(ids, id)
	}
	return
}

// VerificationTokenIDs returns the "verification_token" edge IDs in the mutation.
func (m *UserMutation) VerificationTokenIDs() (ids []uuid.UUID) {
	for id := range m.verification_token {
		ids = append(ids, id)
	}
	return
}

// ResetVerificationToken resets all changes to the "verification_token" edge.
func (m *UserMutation) ResetVerificationToken() {
	m.verification_token = nil
	m.clearedverification_token = false
	m.removedverification_token = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.scope != nil {
		fields = append(fields, user.FieldScope)
	}
	if m.is_email_verified != nil {
		fields = append(fields, user.FieldIsEmailVerified)
	}
	if m.has_early_access != nil {
		fields = append(fields, user.FieldHasEarlyAccess)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldScope:
		return m.Scope()
	case user.FieldIsEmailVerified:
		return m.IsEmailVerified()
	case user.FieldHasEarlyAccess:
		return m.HasEarlyAccess()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldScope:
		return m.OldScope(ctx)
	case user.FieldIsEmailVerified:
		return m.OldIsEmailVerified(ctx)
	case user.FieldHasEarlyAccess:
		return m.OldHasEarlyAccess(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case user.FieldIsEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEmailVerified(v)
		return nil
	case user.FieldHasEarlyAccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasEarlyAccess(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldScope:
		m.ResetScope()
		return nil
	case user.FieldIsEmailVerified:
		m.ResetIsEmailVerified()
		return nil
	case user.FieldHasEarlyAccess:
		m.ResetHasEarlyAccess()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sender_profile != nil {
		edges = append(edges, user.EdgeSenderProfile)
	}
	if m.provider_profile != nil {
		edges = append(edges, user.EdgeProviderProfile)
	}
	if m.verification_token != nil {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSenderProfile:
		if id := m.sender_profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeProviderProfile:
		if id := m.provider_profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeVerificationToken:
		ids := make([]ent.Value, 0, len(m.verification_token))
		for id := range m.verification_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedverification_token != nil {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeVerificationToken:
		ids := make([]ent.Value, 0, len(m.removedverification_token))
		for id := range m.removedverification_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsender_profile {
		edges = append(edges, user.EdgeSenderProfile)
	}
	if m.clearedprovider_profile {
		edges = append(edges, user.EdgeProviderProfile)
	}
	if m.clearedverification_token {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSenderProfile:
		return m.clearedsender_profile
	case user.EdgeProviderProfile:
		return m.clearedprovider_profile
	case user.EdgeVerificationToken:
		return m.clearedverification_token
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSenderProfile:
		m.ClearSenderProfile()
		return nil
	case user.EdgeProviderProfile:
		m.ClearProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSenderProfile:
		m.ResetSenderProfile()
		return nil
	case user.EdgeProviderProfile:
		m.ResetProviderProfile()
		return nil
	case user.EdgeVerificationToken:
		m.ResetVerificationToken()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VerificationTokenMutation represents an operation that mutates the VerificationToken nodes in the graph.
type VerificationTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	token         *string
	scope         *verificationtoken.Scope
	expiry_at     *time.Time
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*VerificationToken, error)
	predicates    []predicate.VerificationToken
}

var _ ent.Mutation = (*VerificationTokenMutation)(nil)

// verificationtokenOption allows management of the mutation configuration using functional options.
type verificationtokenOption func(*VerificationTokenMutation)

// newVerificationTokenMutation creates new mutation for the VerificationToken entity.
func newVerificationTokenMutation(c config, op Op, opts ...verificationtokenOption) *VerificationTokenMutation {
	m := &VerificationTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeVerificationToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVerificationTokenID sets the ID field of the mutation.
func withVerificationTokenID(id uuid.UUID) verificationtokenOption {
	return func(m *VerificationTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *VerificationToken
		)
		m.oldValue = func(ctx context.Context) (*VerificationToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VerificationToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVerificationToken sets the old VerificationToken of the mutation.
func withVerificationToken(node *VerificationToken) verificationtokenOption {
	return func(m *VerificationTokenMutation) {
		m.oldValue = func(context.Context) (*VerificationToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VerificationTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VerificationTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VerificationToken entities.
func (m *VerificationTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VerificationTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VerificationTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VerificationToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *VerificationTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VerificationTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VerificationTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VerificationTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VerificationTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VerificationTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetToken sets the "token" field.
func (m *VerificationTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *VerificationTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *VerificationTokenMutation) ResetToken() {
	m.token = nil
}

// SetScope sets the "scope" field.
func (m *VerificationTokenMutation) SetScope(v verificationtoken.Scope) {
	m.scope = &v
}

// Scope returns the value of the "scope" field in the mutation.
func (m *VerificationTokenMutation) Scope() (r verificationtoken.Scope, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldScope(ctx context.Context) (v verificationtoken.Scope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *VerificationTokenMutation) ResetScope() {
	m.scope = nil
}

// SetExpiryAt sets the "expiry_at" field.
func (m *VerificationTokenMutation) SetExpiryAt(t time.Time) {
	m.expiry_at = &t
}

// ExpiryAt returns the value of the "expiry_at" field in the mutation.
func (m *VerificationTokenMutation) ExpiryAt() (r time.Time, exists bool) {
	v := m.expiry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryAt returns the old "expiry_at" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldExpiryAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryAt: %w", err)
	}
	return oldValue.ExpiryAt, nil
}

// ResetExpiryAt resets all changes to the "expiry_at" field.
func (m *VerificationTokenMutation) ResetExpiryAt() {
	m.expiry_at = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *VerificationTokenMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *VerificationTokenMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *VerificationTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *VerificationTokenMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *VerificationTokenMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *VerificationTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the VerificationTokenMutation builder.
func (m *VerificationTokenMutation) Where(ps ...predicate.VerificationToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VerificationTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VerificationTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VerificationToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VerificationTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VerificationTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VerificationToken).
func (m *VerificationTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VerificationTokenMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, verificationtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, verificationtoken.FieldUpdatedAt)
	}
	if m.token != nil {
		fields = append(fields, verificationtoken.FieldToken)
	}
	if m.scope != nil {
		fields = append(fields, verificationtoken.FieldScope)
	}
	if m.expiry_at != nil {
		fields = append(fields, verificationtoken.FieldExpiryAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VerificationTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case verificationtoken.FieldCreatedAt:
		return m.CreatedAt()
	case verificationtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case verificationtoken.FieldToken:
		return m.Token()
	case verificationtoken.FieldScope:
		return m.Scope()
	case verificationtoken.FieldExpiryAt:
		return m.ExpiryAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VerificationTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case verificationtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case verificationtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case verificationtoken.FieldToken:
		return m.OldToken(ctx)
	case verificationtoken.FieldScope:
		return m.OldScope(ctx)
	case verificationtoken.FieldExpiryAt:
		return m.OldExpiryAt(ctx)
	}
	return nil, fmt.Errorf("unknown VerificationToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case verificationtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case verificationtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case verificationtoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case verificationtoken.FieldScope:
		v, ok := value.(verificationtoken.Scope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case verificationtoken.FieldExpiryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryAt(v)
		return nil
	}
	return fmt.Errorf("unknown VerificationToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VerificationTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VerificationTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VerificationToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VerificationTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VerificationTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VerificationTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VerificationToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VerificationTokenMutation) ResetField(name string) error {
	switch name {
	case verificationtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case verificationtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case verificationtoken.FieldToken:
		m.ResetToken()
		return nil
	case verificationtoken.FieldScope:
		m.ResetScope()
		return nil
	case verificationtoken.FieldExpiryAt:
		m.ResetExpiryAt()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VerificationTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, verificationtoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VerificationTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case verificationtoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VerificationTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VerificationTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VerificationTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, verificationtoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VerificationTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case verificationtoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VerificationTokenMutation) ClearEdge(name string) error {
	switch name {
	case verificationtoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VerificationTokenMutation) ResetEdge(name string) error {
	switch name {
	case verificationtoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken edge %s", name)
}

// WebhookRetryAttemptMutation represents an operation that mutates the WebhookRetryAttempt nodes in the graph.
type WebhookRetryAttemptMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	attempt_number    *int
	addattempt_number *int
	next_retry_time   *time.Time
	payload           *map[string]interface{}
	signature         *string
	webhook_url       *string
	status            *webhookretryattempt.Status
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*WebhookRetryAttempt, error)
	predicates        []predicate.WebhookRetryAttempt
}

var _ ent.Mutation = (*WebhookRetryAttemptMutation)(nil)

// webhookretryattemptOption allows management of the mutation configuration using functional options.
type webhookretryattemptOption func(*WebhookRetryAttemptMutation)

// newWebhookRetryAttemptMutation creates new mutation for the WebhookRetryAttempt entity.
func newWebhookRetryAttemptMutation(c config, op Op, opts ...webhookretryattemptOption) *WebhookRetryAttemptMutation {
	m := &WebhookRetryAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypeWebhookRetryAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebhookRetryAttemptID sets the ID field of the mutation.
func withWebhookRetryAttemptID(id int) webhookretryattemptOption {
	return func(m *WebhookRetryAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *WebhookRetryAttempt
		)
		m.oldValue = func(ctx context.Context) (*WebhookRetryAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebhookRetryAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebhookRetryAttempt sets the old WebhookRetryAttempt of the mutation.
func withWebhookRetryAttempt(node *WebhookRetryAttempt) webhookretryattemptOption {
	return func(m *WebhookRetryAttemptMutation) {
		m.oldValue = func(context.Context) (*WebhookRetryAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebhookRetryAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebhookRetryAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebhookRetryAttemptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebhookRetryAttemptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebhookRetryAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WebhookRetryAttemptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebhookRetryAttemptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebhookRetryAttemptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebhookRetryAttemptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebhookRetryAttemptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebhookRetryAttemptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAttemptNumber sets the "attempt_number" field.
func (m *WebhookRetryAttemptMutation) SetAttemptNumber(i int) {
	m.attempt_number = &i
	m.addattempt_number = nil
}

// AttemptNumber returns the value of the "attempt_number" field in the mutation.
func (m *WebhookRetryAttemptMutation) AttemptNumber() (r int, exists bool) {
	v := m.attempt_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptNumber returns the old "attempt_number" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldAttemptNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptNumber: %w", err)
	}
	return oldValue.AttemptNumber, nil
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (m *WebhookRetryAttemptMutation) AddAttemptNumber(i int) {
	if m.addattempt_number != nil {
		*m.addattempt_number += i
	} else {
		m.addattempt_number = &i
	}
}

// AddedAttemptNumber returns the value that was added to the "attempt_number" field in this mutation.
func (m *WebhookRetryAttemptMutation) AddedAttemptNumber() (r int, exists bool) {
	v := m.addattempt_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptNumber resets all changes to the "attempt_number" field.
func (m *WebhookRetryAttemptMutation) ResetAttemptNumber() {
	m.attempt_number = nil
	m.addattempt_number = nil
}

// SetNextRetryTime sets the "next_retry_time" field.
func (m *WebhookRetryAttemptMutation) SetNextRetryTime(t time.Time) {
	m.next_retry_time = &t
}

// NextRetryTime returns the value of the "next_retry_time" field in the mutation.
func (m *WebhookRetryAttemptMutation) NextRetryTime() (r time.Time, exists bool) {
	v := m.next_retry_time
	if v == nil {
		return
	}
	return *v, true
}

// OldNextRetryTime returns the old "next_retry_time" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldNextRetryTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextRetryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextRetryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextRetryTime: %w", err)
	}
	return oldValue.NextRetryTime, nil
}

// ResetNextRetryTime resets all changes to the "next_retry_time" field.
func (m *WebhookRetryAttemptMutation) ResetNextRetryTime() {
	m.next_retry_time = nil
}

// SetPayload sets the "payload" field.
func (m *WebhookRetryAttemptMutation) SetPayload(value map[string]interface{}) {
	m.payload = &value
}

// Payload returns the value of the "payload" field in the mutation.
func (m *WebhookRetryAttemptMutation) Payload() (r map[string]interface{}, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldPayload(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *WebhookRetryAttemptMutation) ResetPayload() {
	m.payload = nil
}

// SetSignature sets the "signature" field.
func (m *WebhookRetryAttemptMutation) SetSignature(s string) {
	m.signature = &s
}

// Signature returns the value of the "signature" field in the mutation.
func (m *WebhookRetryAttemptMutation) Signature() (r string, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldSignature(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ClearSignature clears the value of the "signature" field.
func (m *WebhookRetryAttemptMutation) ClearSignature() {
	m.signature = nil
	m.clearedFields[webhookretryattempt.FieldSignature] = struct{}{}
}

// SignatureCleared returns if the "signature" field was cleared in this mutation.
func (m *WebhookRetryAttemptMutation) SignatureCleared() bool {
	_, ok := m.clearedFields[webhookretryattempt.FieldSignature]
	return ok
}

// ResetSignature resets all changes to the "signature" field.
func (m *WebhookRetryAttemptMutation) ResetSignature() {
	m.signature = nil
	delete(m.clearedFields, webhookretryattempt.FieldSignature)
}

// SetWebhookURL sets the "webhook_url" field.
func (m *WebhookRetryAttemptMutation) SetWebhookURL(s string) {
	m.webhook_url = &s
}

// WebhookURL returns the value of the "webhook_url" field in the mutation.
func (m *WebhookRetryAttemptMutation) WebhookURL() (r string, exists bool) {
	v := m.webhook_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhookURL returns the old "webhook_url" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldWebhookURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhookURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhookURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhookURL: %w", err)
	}
	return oldValue.WebhookURL, nil
}

// ResetWebhookURL resets all changes to the "webhook_url" field.
func (m *WebhookRetryAttemptMutation) ResetWebhookURL() {
	m.webhook_url = nil
}

// SetStatus sets the "status" field.
func (m *WebhookRetryAttemptMutation) SetStatus(w webhookretryattempt.Status) {
	m.status = &w
}

// Status returns the value of the "status" field in the mutation.
func (m *WebhookRetryAttemptMutation) Status() (r webhookretryattempt.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WebhookRetryAttempt entity.
// If the WebhookRetryAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebhookRetryAttemptMutation) OldStatus(ctx context.Context) (v webhookretryattempt.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WebhookRetryAttemptMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the WebhookRetryAttemptMutation builder.
func (m *WebhookRetryAttemptMutation) Where(ps ...predicate.WebhookRetryAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebhookRetryAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebhookRetryAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebhookRetryAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebhookRetryAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebhookRetryAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebhookRetryAttempt).
func (m *WebhookRetryAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebhookRetryAttemptMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, webhookretryattempt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, webhookretryattempt.FieldUpdatedAt)
	}
	if m.attempt_number != nil {
		fields = append(fields, webhookretryattempt.FieldAttemptNumber)
	}
	if m.next_retry_time != nil {
		fields = append(fields, webhookretryattempt.FieldNextRetryTime)
	}
	if m.payload != nil {
		fields = append(fields, webhookretryattempt.FieldPayload)
	}
	if m.signature != nil {
		fields = append(fields, webhookretryattempt.FieldSignature)
	}
	if m.webhook_url != nil {
		fields = append(fields, webhookretryattempt.FieldWebhookURL)
	}
	if m.status != nil {
		fields = append(fields, webhookretryattempt.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebhookRetryAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webhookretryattempt.FieldCreatedAt:
		return m.CreatedAt()
	case webhookretryattempt.FieldUpdatedAt:
		return m.UpdatedAt()
	case webhookretryattempt.FieldAttemptNumber:
		return m.AttemptNumber()
	case webhookretryattempt.FieldNextRetryTime:
		return m.NextRetryTime()
	case webhookretryattempt.FieldPayload:
		return m.Payload()
	case webhookretryattempt.FieldSignature:
		return m.Signature()
	case webhookretryattempt.FieldWebhookURL:
		return m.WebhookURL()
	case webhookretryattempt.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebhookRetryAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webhookretryattempt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case webhookretryattempt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case webhookretryattempt.FieldAttemptNumber:
		return m.OldAttemptNumber(ctx)
	case webhookretryattempt.FieldNextRetryTime:
		return m.OldNextRetryTime(ctx)
	case webhookretryattempt.FieldPayload:
		return m.OldPayload(ctx)
	case webhookretryattempt.FieldSignature:
		return m.OldSignature(ctx)
	case webhookretryattempt.FieldWebhookURL:
		return m.OldWebhookURL(ctx)
	case webhookretryattempt.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown WebhookRetryAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebhookRetryAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webhookretryattempt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case webhookretryattempt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case webhookretryattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptNumber(v)
		return nil
	case webhookretryattempt.FieldNextRetryTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextRetryTime(v)
		return nil
	case webhookretryattempt.FieldPayload:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case webhookretryattempt.FieldSignature:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	case webhookretryattempt.FieldWebhookURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhookURL(v)
		return nil
	case webhookretryattempt.FieldStatus:
		v, ok := value.(webhookretryattempt.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown WebhookRetryAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebhookRetryAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addattempt_number != nil {
		fields = append(fields, webhookretryattempt.FieldAttemptNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebhookRetryAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case webhookretryattempt.FieldAttemptNumber:
		return m.AddedAttemptNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebhookRetryAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case webhookretryattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptNumber(v)
		return nil
	}
	return fmt.Errorf("unknown WebhookRetryAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebhookRetryAttemptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(webhookretryattempt.FieldSignature) {
		fields = append(fields, webhookretryattempt.FieldSignature)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebhookRetryAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebhookRetryAttemptMutation) ClearField(name string) error {
	switch name {
	case webhookretryattempt.FieldSignature:
		m.ClearSignature()
		return nil
	}
	return fmt.Errorf("unknown WebhookRetryAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebhookRetryAttemptMutation) ResetField(name string) error {
	switch name {
	case webhookretryattempt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case webhookretryattempt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case webhookretryattempt.FieldAttemptNumber:
		m.ResetAttemptNumber()
		return nil
	case webhookretryattempt.FieldNextRetryTime:
		m.ResetNextRetryTime()
		return nil
	case webhookretryattempt.FieldPayload:
		m.ResetPayload()
		return nil
	case webhookretryattempt.FieldSignature:
		m.ResetSignature()
		return nil
	case webhookretryattempt.FieldWebhookURL:
		m.ResetWebhookURL()
		return nil
	case webhookretryattempt.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown WebhookRetryAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebhookRetryAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebhookRetryAttemptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebhookRetryAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebhookRetryAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebhookRetryAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebhookRetryAttemptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebhookRetryAttemptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WebhookRetryAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebhookRetryAttemptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WebhookRetryAttempt edge %s", name)
}
