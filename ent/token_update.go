// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/senderordertoken"
	"github.com/paycrest/aggregator/ent/token"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks    []Hook
	mutation *TokenMutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tu *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TokenUpdate) SetUpdatedAt(t time.Time) *TokenUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetSymbol sets the "symbol" field.
func (tu *TokenUpdate) SetSymbol(s string) *TokenUpdate {
	tu.mutation.SetSymbol(s)
	return tu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableSymbol(s *string) *TokenUpdate {
	if s != nil {
		tu.SetSymbol(*s)
	}
	return tu
}

// SetContractAddress sets the "contract_address" field.
func (tu *TokenUpdate) SetContractAddress(s string) *TokenUpdate {
	tu.mutation.SetContractAddress(s)
	return tu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableContractAddress(s *string) *TokenUpdate {
	if s != nil {
		tu.SetContractAddress(*s)
	}
	return tu
}

// SetDecimals sets the "decimals" field.
func (tu *TokenUpdate) SetDecimals(i int8) *TokenUpdate {
	tu.mutation.ResetDecimals()
	tu.mutation.SetDecimals(i)
	return tu
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableDecimals(i *int8) *TokenUpdate {
	if i != nil {
		tu.SetDecimals(*i)
	}
	return tu
}

// AddDecimals adds i to the "decimals" field.
func (tu *TokenUpdate) AddDecimals(i int8) *TokenUpdate {
	tu.mutation.AddDecimals(i)
	return tu
}

// SetIsEnabled sets the "is_enabled" field.
func (tu *TokenUpdate) SetIsEnabled(b bool) *TokenUpdate {
	tu.mutation.SetIsEnabled(b)
	return tu
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableIsEnabled(b *bool) *TokenUpdate {
	if b != nil {
		tu.SetIsEnabled(*b)
	}
	return tu
}

// SetNetworkID sets the "network" edge to the Network entity by ID.
func (tu *TokenUpdate) SetNetworkID(id int) *TokenUpdate {
	tu.mutation.SetNetworkID(id)
	return tu
}

// SetNetwork sets the "network" edge to the Network entity.
func (tu *TokenUpdate) SetNetwork(n *Network) *TokenUpdate {
	return tu.SetNetworkID(n.ID)
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by IDs.
func (tu *TokenUpdate) AddPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdate {
	tu.mutation.AddPaymentOrderIDs(ids...)
	return tu
}

// AddPaymentOrders adds the "payment_orders" edges to the PaymentOrder entity.
func (tu *TokenUpdate) AddPaymentOrders(p ...*PaymentOrder) *TokenUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPaymentOrderIDs(ids...)
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (tu *TokenUpdate) AddLockPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdate {
	tu.mutation.AddLockPaymentOrderIDs(ids...)
	return tu
}

// AddLockPaymentOrders adds the "lock_payment_orders" edges to the LockPaymentOrder entity.
func (tu *TokenUpdate) AddLockPaymentOrders(l ...*LockPaymentOrder) *TokenUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLockPaymentOrderIDs(ids...)
}

// AddSenderSettingIDs adds the "sender_settings" edge to the SenderOrderToken entity by IDs.
func (tu *TokenUpdate) AddSenderSettingIDs(ids ...int) *TokenUpdate {
	tu.mutation.AddSenderSettingIDs(ids...)
	return tu
}

// AddSenderSettings adds the "sender_settings" edges to the SenderOrderToken entity.
func (tu *TokenUpdate) AddSenderSettings(s ...*SenderOrderToken) *TokenUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSenderSettingIDs(ids...)
}

// AddProviderSettingIDs adds the "provider_settings" edge to the ProviderOrderToken entity by IDs.
func (tu *TokenUpdate) AddProviderSettingIDs(ids ...int) *TokenUpdate {
	tu.mutation.AddProviderSettingIDs(ids...)
	return tu
}

// AddProviderSettings adds the "provider_settings" edges to the ProviderOrderToken entity.
func (tu *TokenUpdate) AddProviderSettings(p ...*ProviderOrderToken) *TokenUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProviderSettingIDs(ids...)
}

// Mutation returns the TokenMutation object of the builder.
func (tu *TokenUpdate) Mutation() *TokenMutation {
	return tu.mutation
}

// ClearNetwork clears the "network" edge to the Network entity.
func (tu *TokenUpdate) ClearNetwork() *TokenUpdate {
	tu.mutation.ClearNetwork()
	return tu
}

// ClearPaymentOrders clears all "payment_orders" edges to the PaymentOrder entity.
func (tu *TokenUpdate) ClearPaymentOrders() *TokenUpdate {
	tu.mutation.ClearPaymentOrders()
	return tu
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to PaymentOrder entities by IDs.
func (tu *TokenUpdate) RemovePaymentOrderIDs(ids ...uuid.UUID) *TokenUpdate {
	tu.mutation.RemovePaymentOrderIDs(ids...)
	return tu
}

// RemovePaymentOrders removes "payment_orders" edges to PaymentOrder entities.
func (tu *TokenUpdate) RemovePaymentOrders(p ...*PaymentOrder) *TokenUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePaymentOrderIDs(ids...)
}

// ClearLockPaymentOrders clears all "lock_payment_orders" edges to the LockPaymentOrder entity.
func (tu *TokenUpdate) ClearLockPaymentOrders() *TokenUpdate {
	tu.mutation.ClearLockPaymentOrders()
	return tu
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to LockPaymentOrder entities by IDs.
func (tu *TokenUpdate) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdate {
	tu.mutation.RemoveLockPaymentOrderIDs(ids...)
	return tu
}

// RemoveLockPaymentOrders removes "lock_payment_orders" edges to LockPaymentOrder entities.
func (tu *TokenUpdate) RemoveLockPaymentOrders(l ...*LockPaymentOrder) *TokenUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLockPaymentOrderIDs(ids...)
}

// ClearSenderSettings clears all "sender_settings" edges to the SenderOrderToken entity.
func (tu *TokenUpdate) ClearSenderSettings() *TokenUpdate {
	tu.mutation.ClearSenderSettings()
	return tu
}

// RemoveSenderSettingIDs removes the "sender_settings" edge to SenderOrderToken entities by IDs.
func (tu *TokenUpdate) RemoveSenderSettingIDs(ids ...int) *TokenUpdate {
	tu.mutation.RemoveSenderSettingIDs(ids...)
	return tu
}

// RemoveSenderSettings removes "sender_settings" edges to SenderOrderToken entities.
func (tu *TokenUpdate) RemoveSenderSettings(s ...*SenderOrderToken) *TokenUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSenderSettingIDs(ids...)
}

// ClearProviderSettings clears all "provider_settings" edges to the ProviderOrderToken entity.
func (tu *TokenUpdate) ClearProviderSettings() *TokenUpdate {
	tu.mutation.ClearProviderSettings()
	return tu
}

// RemoveProviderSettingIDs removes the "provider_settings" edge to ProviderOrderToken entities by IDs.
func (tu *TokenUpdate) RemoveProviderSettingIDs(ids ...int) *TokenUpdate {
	tu.mutation.RemoveProviderSettingIDs(ids...)
	return tu
}

// RemoveProviderSettings removes "provider_settings" edges to ProviderOrderToken entities.
func (tu *TokenUpdate) RemoveProviderSettings(p ...*ProviderOrderToken) *TokenUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProviderSettingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TokenUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TokenUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TokenUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TokenUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TokenUpdate) check() error {
	if v, ok := tu.mutation.Symbol(); ok {
		if err := token.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Token.symbol": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ContractAddress(); ok {
		if err := token.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "Token.contract_address": %w`, err)}
		}
	}
	if tu.mutation.NetworkCleared() && len(tu.mutation.NetworkIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Token.network"`)
	}
	return nil
}

func (tu *TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Symbol(); ok {
		_spec.SetField(token.FieldSymbol, field.TypeString, value)
	}
	if value, ok := tu.mutation.ContractAddress(); ok {
		_spec.SetField(token.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.Decimals(); ok {
		_spec.SetField(token.FieldDecimals, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedDecimals(); ok {
		_spec.AddField(token.FieldDecimals, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.IsEnabled(); ok {
		_spec.SetField(token.FieldIsEnabled, field.TypeBool, value)
	}
	if tu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.NetworkTable,
			Columns: []string{token.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.NetworkTable,
			Columns: []string{token.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPaymentOrdersIDs(); len(nodes) > 0 && !tu.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLockPaymentOrdersIDs(); len(nodes) > 0 && !tu.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LockPaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SenderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSenderSettingsIDs(); len(nodes) > 0 && !tu.mutation.SenderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SenderSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProviderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProviderSettingsIDs(); len(nodes) > 0 && !tu.mutation.ProviderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProviderSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TokenUpdateOne) SetUpdatedAt(t time.Time) *TokenUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetSymbol sets the "symbol" field.
func (tuo *TokenUpdateOne) SetSymbol(s string) *TokenUpdateOne {
	tuo.mutation.SetSymbol(s)
	return tuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableSymbol(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetSymbol(*s)
	}
	return tuo
}

// SetContractAddress sets the "contract_address" field.
func (tuo *TokenUpdateOne) SetContractAddress(s string) *TokenUpdateOne {
	tuo.mutation.SetContractAddress(s)
	return tuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableContractAddress(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetContractAddress(*s)
	}
	return tuo
}

// SetDecimals sets the "decimals" field.
func (tuo *TokenUpdateOne) SetDecimals(i int8) *TokenUpdateOne {
	tuo.mutation.ResetDecimals()
	tuo.mutation.SetDecimals(i)
	return tuo
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableDecimals(i *int8) *TokenUpdateOne {
	if i != nil {
		tuo.SetDecimals(*i)
	}
	return tuo
}

// AddDecimals adds i to the "decimals" field.
func (tuo *TokenUpdateOne) AddDecimals(i int8) *TokenUpdateOne {
	tuo.mutation.AddDecimals(i)
	return tuo
}

// SetIsEnabled sets the "is_enabled" field.
func (tuo *TokenUpdateOne) SetIsEnabled(b bool) *TokenUpdateOne {
	tuo.mutation.SetIsEnabled(b)
	return tuo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableIsEnabled(b *bool) *TokenUpdateOne {
	if b != nil {
		tuo.SetIsEnabled(*b)
	}
	return tuo
}

// SetNetworkID sets the "network" edge to the Network entity by ID.
func (tuo *TokenUpdateOne) SetNetworkID(id int) *TokenUpdateOne {
	tuo.mutation.SetNetworkID(id)
	return tuo
}

// SetNetwork sets the "network" edge to the Network entity.
func (tuo *TokenUpdateOne) SetNetwork(n *Network) *TokenUpdateOne {
	return tuo.SetNetworkID(n.ID)
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by IDs.
func (tuo *TokenUpdateOne) AddPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdateOne {
	tuo.mutation.AddPaymentOrderIDs(ids...)
	return tuo
}

// AddPaymentOrders adds the "payment_orders" edges to the PaymentOrder entity.
func (tuo *TokenUpdateOne) AddPaymentOrders(p ...*PaymentOrder) *TokenUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPaymentOrderIDs(ids...)
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (tuo *TokenUpdateOne) AddLockPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdateOne {
	tuo.mutation.AddLockPaymentOrderIDs(ids...)
	return tuo
}

// AddLockPaymentOrders adds the "lock_payment_orders" edges to the LockPaymentOrder entity.
func (tuo *TokenUpdateOne) AddLockPaymentOrders(l ...*LockPaymentOrder) *TokenUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLockPaymentOrderIDs(ids...)
}

// AddSenderSettingIDs adds the "sender_settings" edge to the SenderOrderToken entity by IDs.
func (tuo *TokenUpdateOne) AddSenderSettingIDs(ids ...int) *TokenUpdateOne {
	tuo.mutation.AddSenderSettingIDs(ids...)
	return tuo
}

// AddSenderSettings adds the "sender_settings" edges to the SenderOrderToken entity.
func (tuo *TokenUpdateOne) AddSenderSettings(s ...*SenderOrderToken) *TokenUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSenderSettingIDs(ids...)
}

// AddProviderSettingIDs adds the "provider_settings" edge to the ProviderOrderToken entity by IDs.
func (tuo *TokenUpdateOne) AddProviderSettingIDs(ids ...int) *TokenUpdateOne {
	tuo.mutation.AddProviderSettingIDs(ids...)
	return tuo
}

// AddProviderSettings adds the "provider_settings" edges to the ProviderOrderToken entity.
func (tuo *TokenUpdateOne) AddProviderSettings(p ...*ProviderOrderToken) *TokenUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProviderSettingIDs(ids...)
}

// Mutation returns the TokenMutation object of the builder.
func (tuo *TokenUpdateOne) Mutation() *TokenMutation {
	return tuo.mutation
}

// ClearNetwork clears the "network" edge to the Network entity.
func (tuo *TokenUpdateOne) ClearNetwork() *TokenUpdateOne {
	tuo.mutation.ClearNetwork()
	return tuo
}

// ClearPaymentOrders clears all "payment_orders" edges to the PaymentOrder entity.
func (tuo *TokenUpdateOne) ClearPaymentOrders() *TokenUpdateOne {
	tuo.mutation.ClearPaymentOrders()
	return tuo
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to PaymentOrder entities by IDs.
func (tuo *TokenUpdateOne) RemovePaymentOrderIDs(ids ...uuid.UUID) *TokenUpdateOne {
	tuo.mutation.RemovePaymentOrderIDs(ids...)
	return tuo
}

// RemovePaymentOrders removes "payment_orders" edges to PaymentOrder entities.
func (tuo *TokenUpdateOne) RemovePaymentOrders(p ...*PaymentOrder) *TokenUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePaymentOrderIDs(ids...)
}

// ClearLockPaymentOrders clears all "lock_payment_orders" edges to the LockPaymentOrder entity.
func (tuo *TokenUpdateOne) ClearLockPaymentOrders() *TokenUpdateOne {
	tuo.mutation.ClearLockPaymentOrders()
	return tuo
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to LockPaymentOrder entities by IDs.
func (tuo *TokenUpdateOne) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) *TokenUpdateOne {
	tuo.mutation.RemoveLockPaymentOrderIDs(ids...)
	return tuo
}

// RemoveLockPaymentOrders removes "lock_payment_orders" edges to LockPaymentOrder entities.
func (tuo *TokenUpdateOne) RemoveLockPaymentOrders(l ...*LockPaymentOrder) *TokenUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLockPaymentOrderIDs(ids...)
}

// ClearSenderSettings clears all "sender_settings" edges to the SenderOrderToken entity.
func (tuo *TokenUpdateOne) ClearSenderSettings() *TokenUpdateOne {
	tuo.mutation.ClearSenderSettings()
	return tuo
}

// RemoveSenderSettingIDs removes the "sender_settings" edge to SenderOrderToken entities by IDs.
func (tuo *TokenUpdateOne) RemoveSenderSettingIDs(ids ...int) *TokenUpdateOne {
	tuo.mutation.RemoveSenderSettingIDs(ids...)
	return tuo
}

// RemoveSenderSettings removes "sender_settings" edges to SenderOrderToken entities.
func (tuo *TokenUpdateOne) RemoveSenderSettings(s ...*SenderOrderToken) *TokenUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSenderSettingIDs(ids...)
}

// ClearProviderSettings clears all "provider_settings" edges to the ProviderOrderToken entity.
func (tuo *TokenUpdateOne) ClearProviderSettings() *TokenUpdateOne {
	tuo.mutation.ClearProviderSettings()
	return tuo
}

// RemoveProviderSettingIDs removes the "provider_settings" edge to ProviderOrderToken entities by IDs.
func (tuo *TokenUpdateOne) RemoveProviderSettingIDs(ids ...int) *TokenUpdateOne {
	tuo.mutation.RemoveProviderSettingIDs(ids...)
	return tuo
}

// RemoveProviderSettings removes "provider_settings" edges to ProviderOrderToken entities.
func (tuo *TokenUpdateOne) RemoveProviderSettings(p ...*ProviderOrderToken) *TokenUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProviderSettingIDs(ids...)
}

// Where appends a list predicates to the TokenUpdate builder.
func (tuo *TokenUpdateOne) Where(ps ...predicate.Token) *TokenUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Token entity.
func (tuo *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TokenUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TokenUpdateOne) check() error {
	if v, ok := tuo.mutation.Symbol(); ok {
		if err := token.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Token.symbol": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ContractAddress(); ok {
		if err := token.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "Token.contract_address": %w`, err)}
		}
	}
	if tuo.mutation.NetworkCleared() && len(tuo.mutation.NetworkIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Token.network"`)
	}
	return nil
}

func (tuo *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Symbol(); ok {
		_spec.SetField(token.FieldSymbol, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ContractAddress(); ok {
		_spec.SetField(token.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Decimals(); ok {
		_spec.SetField(token.FieldDecimals, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedDecimals(); ok {
		_spec.AddField(token.FieldDecimals, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.IsEnabled(); ok {
		_spec.SetField(token.FieldIsEnabled, field.TypeBool, value)
	}
	if tuo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.NetworkTable,
			Columns: []string{token.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.NetworkTable,
			Columns: []string{token.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPaymentOrdersIDs(); len(nodes) > 0 && !tuo.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.PaymentOrdersTable,
			Columns: []string{token.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLockPaymentOrdersIDs(); len(nodes) > 0 && !tuo.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LockPaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.LockPaymentOrdersTable,
			Columns: []string{token.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SenderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSenderSettingsIDs(); len(nodes) > 0 && !tuo.mutation.SenderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SenderSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.SenderSettingsTable,
			Columns: []string{token.SenderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProviderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProviderSettingsIDs(); len(nodes) > 0 && !tuo.mutation.ProviderSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProviderSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   token.ProviderSettingsTable,
			Columns: []string{token.ProviderSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Token{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
