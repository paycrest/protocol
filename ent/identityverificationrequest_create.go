// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
)

// IdentityVerificationRequestCreate is the builder for creating a IdentityVerificationRequest entity.
type IdentityVerificationRequestCreate struct {
	config
	mutation *IdentityVerificationRequestMutation
	hooks    []Hook
}

// SetWalletAddress sets the "wallet_address" field.
func (ivrc *IdentityVerificationRequestCreate) SetWalletAddress(s string) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetWalletAddress(s)
	return ivrc
}

// SetWalletSignature sets the "wallet_signature" field.
func (ivrc *IdentityVerificationRequestCreate) SetWalletSignature(s string) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetWalletSignature(s)
	return ivrc
}

// SetPlatform sets the "platform" field.
func (ivrc *IdentityVerificationRequestCreate) SetPlatform(i identityverificationrequest.Platform) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetPlatform(i)
	return ivrc
}

// SetPlatformRef sets the "platform_ref" field.
func (ivrc *IdentityVerificationRequestCreate) SetPlatformRef(s string) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetPlatformRef(s)
	return ivrc
}

// SetVerificationURL sets the "verification_url" field.
func (ivrc *IdentityVerificationRequestCreate) SetVerificationURL(s string) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetVerificationURL(s)
	return ivrc
}

// SetStatus sets the "status" field.
func (ivrc *IdentityVerificationRequestCreate) SetStatus(i identityverificationrequest.Status) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetStatus(i)
	return ivrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ivrc *IdentityVerificationRequestCreate) SetNillableStatus(i *identityverificationrequest.Status) *IdentityVerificationRequestCreate {
	if i != nil {
		ivrc.SetStatus(*i)
	}
	return ivrc
}

// SetFeeReclaimed sets the "fee_reclaimed" field.
func (ivrc *IdentityVerificationRequestCreate) SetFeeReclaimed(b bool) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetFeeReclaimed(b)
	return ivrc
}

// SetNillableFeeReclaimed sets the "fee_reclaimed" field if the given value is not nil.
func (ivrc *IdentityVerificationRequestCreate) SetNillableFeeReclaimed(b *bool) *IdentityVerificationRequestCreate {
	if b != nil {
		ivrc.SetFeeReclaimed(*b)
	}
	return ivrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ivrc *IdentityVerificationRequestCreate) SetUpdatedAt(t time.Time) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetUpdatedAt(t)
	return ivrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ivrc *IdentityVerificationRequestCreate) SetNillableUpdatedAt(t *time.Time) *IdentityVerificationRequestCreate {
	if t != nil {
		ivrc.SetUpdatedAt(*t)
	}
	return ivrc
}

// SetLastURLCreatedAt sets the "last_url_created_at" field.
func (ivrc *IdentityVerificationRequestCreate) SetLastURLCreatedAt(t time.Time) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetLastURLCreatedAt(t)
	return ivrc
}

// SetNillableLastURLCreatedAt sets the "last_url_created_at" field if the given value is not nil.
func (ivrc *IdentityVerificationRequestCreate) SetNillableLastURLCreatedAt(t *time.Time) *IdentityVerificationRequestCreate {
	if t != nil {
		ivrc.SetLastURLCreatedAt(*t)
	}
	return ivrc
}

// SetID sets the "id" field.
func (ivrc *IdentityVerificationRequestCreate) SetID(u uuid.UUID) *IdentityVerificationRequestCreate {
	ivrc.mutation.SetID(u)
	return ivrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ivrc *IdentityVerificationRequestCreate) SetNillableID(u *uuid.UUID) *IdentityVerificationRequestCreate {
	if u != nil {
		ivrc.SetID(*u)
	}
	return ivrc
}

// Mutation returns the IdentityVerificationRequestMutation object of the builder.
func (ivrc *IdentityVerificationRequestCreate) Mutation() *IdentityVerificationRequestMutation {
	return ivrc.mutation
}

// Save creates the IdentityVerificationRequest in the database.
func (ivrc *IdentityVerificationRequestCreate) Save(ctx context.Context) (*IdentityVerificationRequest, error) {
	ivrc.defaults()
	return withHooks(ctx, ivrc.sqlSave, ivrc.mutation, ivrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ivrc *IdentityVerificationRequestCreate) SaveX(ctx context.Context) *IdentityVerificationRequest {
	v, err := ivrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivrc *IdentityVerificationRequestCreate) Exec(ctx context.Context) error {
	_, err := ivrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivrc *IdentityVerificationRequestCreate) ExecX(ctx context.Context) {
	if err := ivrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ivrc *IdentityVerificationRequestCreate) defaults() {
	if _, ok := ivrc.mutation.Status(); !ok {
		v := identityverificationrequest.DefaultStatus
		ivrc.mutation.SetStatus(v)
	}
	if _, ok := ivrc.mutation.FeeReclaimed(); !ok {
		v := identityverificationrequest.DefaultFeeReclaimed
		ivrc.mutation.SetFeeReclaimed(v)
	}
	if _, ok := ivrc.mutation.UpdatedAt(); !ok {
		v := identityverificationrequest.DefaultUpdatedAt()
		ivrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ivrc.mutation.LastURLCreatedAt(); !ok {
		v := identityverificationrequest.DefaultLastURLCreatedAt()
		ivrc.mutation.SetLastURLCreatedAt(v)
	}
	if _, ok := ivrc.mutation.ID(); !ok {
		v := identityverificationrequest.DefaultID()
		ivrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivrc *IdentityVerificationRequestCreate) check() error {
	if _, ok := ivrc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "IdentityVerificationRequest.wallet_address"`)}
	}
	if _, ok := ivrc.mutation.WalletSignature(); !ok {
		return &ValidationError{Name: "wallet_signature", err: errors.New(`ent: missing required field "IdentityVerificationRequest.wallet_signature"`)}
	}
	if _, ok := ivrc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "IdentityVerificationRequest.platform"`)}
	}
	if v, ok := ivrc.mutation.Platform(); ok {
		if err := identityverificationrequest.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.platform": %w`, err)}
		}
	}
	if _, ok := ivrc.mutation.PlatformRef(); !ok {
		return &ValidationError{Name: "platform_ref", err: errors.New(`ent: missing required field "IdentityVerificationRequest.platform_ref"`)}
	}
	if _, ok := ivrc.mutation.VerificationURL(); !ok {
		return &ValidationError{Name: "verification_url", err: errors.New(`ent: missing required field "IdentityVerificationRequest.verification_url"`)}
	}
	if _, ok := ivrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "IdentityVerificationRequest.status"`)}
	}
	if v, ok := ivrc.mutation.Status(); ok {
		if err := identityverificationrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.status": %w`, err)}
		}
	}
	if _, ok := ivrc.mutation.FeeReclaimed(); !ok {
		return &ValidationError{Name: "fee_reclaimed", err: errors.New(`ent: missing required field "IdentityVerificationRequest.fee_reclaimed"`)}
	}
	if _, ok := ivrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IdentityVerificationRequest.updated_at"`)}
	}
	if _, ok := ivrc.mutation.LastURLCreatedAt(); !ok {
		return &ValidationError{Name: "last_url_created_at", err: errors.New(`ent: missing required field "IdentityVerificationRequest.last_url_created_at"`)}
	}
	return nil
}

func (ivrc *IdentityVerificationRequestCreate) sqlSave(ctx context.Context) (*IdentityVerificationRequest, error) {
	if err := ivrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ivrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ivrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ivrc.mutation.id = &_node.ID
	ivrc.mutation.done = true
	return _node, nil
}

func (ivrc *IdentityVerificationRequestCreate) createSpec() (*IdentityVerificationRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &IdentityVerificationRequest{config: ivrc.config}
		_spec = sqlgraph.NewCreateSpec(identityverificationrequest.Table, sqlgraph.NewFieldSpec(identityverificationrequest.FieldID, field.TypeUUID))
	)
	if id, ok := ivrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ivrc.mutation.WalletAddress(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := ivrc.mutation.WalletSignature(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletSignature, field.TypeString, value)
		_node.WalletSignature = value
	}
	if value, ok := ivrc.mutation.Platform(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := ivrc.mutation.PlatformRef(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatformRef, field.TypeString, value)
		_node.PlatformRef = value
	}
	if value, ok := ivrc.mutation.VerificationURL(); ok {
		_spec.SetField(identityverificationrequest.FieldVerificationURL, field.TypeString, value)
		_node.VerificationURL = value
	}
	if value, ok := ivrc.mutation.Status(); ok {
		_spec.SetField(identityverificationrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ivrc.mutation.FeeReclaimed(); ok {
		_spec.SetField(identityverificationrequest.FieldFeeReclaimed, field.TypeBool, value)
		_node.FeeReclaimed = value
	}
	if value, ok := ivrc.mutation.UpdatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ivrc.mutation.LastURLCreatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldLastURLCreatedAt, field.TypeTime, value)
		_node.LastURLCreatedAt = value
	}
	return _node, _spec
}

// IdentityVerificationRequestCreateBulk is the builder for creating many IdentityVerificationRequest entities in bulk.
type IdentityVerificationRequestCreateBulk struct {
	config
	err      error
	builders []*IdentityVerificationRequestCreate
}

// Save creates the IdentityVerificationRequest entities in the database.
func (ivrcb *IdentityVerificationRequestCreateBulk) Save(ctx context.Context) ([]*IdentityVerificationRequest, error) {
	if ivrcb.err != nil {
		return nil, ivrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ivrcb.builders))
	nodes := make([]*IdentityVerificationRequest, len(ivrcb.builders))
	mutators := make([]Mutator, len(ivrcb.builders))
	for i := range ivrcb.builders {
		func(i int, root context.Context) {
			builder := ivrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentityVerificationRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ivrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ivrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ivrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ivrcb *IdentityVerificationRequestCreateBulk) SaveX(ctx context.Context) []*IdentityVerificationRequest {
	v, err := ivrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivrcb *IdentityVerificationRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := ivrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivrcb *IdentityVerificationRequestCreateBulk) ExecX(ctx context.Context) {
	if err := ivrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
