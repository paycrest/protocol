// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
	"github.com/paycrest/aggregator/ent/institution"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/receiveaddress"
	"github.com/paycrest/aggregator/ent/senderordertoken"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/paycrest/aggregator/ent/transactionlog"
	"github.com/paycrest/aggregator/ent/user"
	"github.com/paycrest/aggregator/ent/verificationtoken"
	"github.com/paycrest/aggregator/ent/webhookretryattempt"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APIKey is the client for interacting with the APIKey builders.
	APIKey *APIKeyClient
	// FiatCurrency is the client for interacting with the FiatCurrency builders.
	FiatCurrency *FiatCurrencyClient
	// IdentityVerificationRequest is the client for interacting with the IdentityVerificationRequest builders.
	IdentityVerificationRequest *IdentityVerificationRequestClient
	// Institution is the client for interacting with the Institution builders.
	Institution *InstitutionClient
	// LinkedAddress is the client for interacting with the LinkedAddress builders.
	LinkedAddress *LinkedAddressClient
	// LockOrderFulfillment is the client for interacting with the LockOrderFulfillment builders.
	LockOrderFulfillment *LockOrderFulfillmentClient
	// LockPaymentOrder is the client for interacting with the LockPaymentOrder builders.
	LockPaymentOrder *LockPaymentOrderClient
	// Network is the client for interacting with the Network builders.
	Network *NetworkClient
	// PaymentOrder is the client for interacting with the PaymentOrder builders.
	PaymentOrder *PaymentOrderClient
	// PaymentOrderRecipient is the client for interacting with the PaymentOrderRecipient builders.
	PaymentOrderRecipient *PaymentOrderRecipientClient
	// ProviderOrderToken is the client for interacting with the ProviderOrderToken builders.
	ProviderOrderToken *ProviderOrderTokenClient
	// ProviderProfile is the client for interacting with the ProviderProfile builders.
	ProviderProfile *ProviderProfileClient
	// ProviderRating is the client for interacting with the ProviderRating builders.
	ProviderRating *ProviderRatingClient
	// ProvisionBucket is the client for interacting with the ProvisionBucket builders.
	ProvisionBucket *ProvisionBucketClient
	// ReceiveAddress is the client for interacting with the ReceiveAddress builders.
	ReceiveAddress *ReceiveAddressClient
	// SenderOrderToken is the client for interacting with the SenderOrderToken builders.
	SenderOrderToken *SenderOrderTokenClient
	// SenderProfile is the client for interacting with the SenderProfile builders.
	SenderProfile *SenderProfileClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// TransactionLog is the client for interacting with the TransactionLog builders.
	TransactionLog *TransactionLogClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VerificationToken is the client for interacting with the VerificationToken builders.
	VerificationToken *VerificationTokenClient
	// WebhookRetryAttempt is the client for interacting with the WebhookRetryAttempt builders.
	WebhookRetryAttempt *WebhookRetryAttemptClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APIKey = NewAPIKeyClient(c.config)
	c.FiatCurrency = NewFiatCurrencyClient(c.config)
	c.IdentityVerificationRequest = NewIdentityVerificationRequestClient(c.config)
	c.Institution = NewInstitutionClient(c.config)
	c.LinkedAddress = NewLinkedAddressClient(c.config)
	c.LockOrderFulfillment = NewLockOrderFulfillmentClient(c.config)
	c.LockPaymentOrder = NewLockPaymentOrderClient(c.config)
	c.Network = NewNetworkClient(c.config)
	c.PaymentOrder = NewPaymentOrderClient(c.config)
	c.PaymentOrderRecipient = NewPaymentOrderRecipientClient(c.config)
	c.ProviderOrderToken = NewProviderOrderTokenClient(c.config)
	c.ProviderProfile = NewProviderProfileClient(c.config)
	c.ProviderRating = NewProviderRatingClient(c.config)
	c.ProvisionBucket = NewProvisionBucketClient(c.config)
	c.ReceiveAddress = NewReceiveAddressClient(c.config)
	c.SenderOrderToken = NewSenderOrderTokenClient(c.config)
	c.SenderProfile = NewSenderProfileClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.TransactionLog = NewTransactionLogClient(c.config)
	c.User = NewUserClient(c.config)
	c.VerificationToken = NewVerificationTokenClient(c.config)
	c.WebhookRetryAttempt = NewWebhookRetryAttemptClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		APIKey:                      NewAPIKeyClient(cfg),
		FiatCurrency:                NewFiatCurrencyClient(cfg),
		IdentityVerificationRequest: NewIdentityVerificationRequestClient(cfg),
		Institution:                 NewInstitutionClient(cfg),
		LinkedAddress:               NewLinkedAddressClient(cfg),
		LockOrderFulfillment:        NewLockOrderFulfillmentClient(cfg),
		LockPaymentOrder:            NewLockPaymentOrderClient(cfg),
		Network:                     NewNetworkClient(cfg),
		PaymentOrder:                NewPaymentOrderClient(cfg),
		PaymentOrderRecipient:       NewPaymentOrderRecipientClient(cfg),
		ProviderOrderToken:          NewProviderOrderTokenClient(cfg),
		ProviderProfile:             NewProviderProfileClient(cfg),
		ProviderRating:              NewProviderRatingClient(cfg),
		ProvisionBucket:             NewProvisionBucketClient(cfg),
		ReceiveAddress:              NewReceiveAddressClient(cfg),
		SenderOrderToken:            NewSenderOrderTokenClient(cfg),
		SenderProfile:               NewSenderProfileClient(cfg),
		Token:                       NewTokenClient(cfg),
		TransactionLog:              NewTransactionLogClient(cfg),
		User:                        NewUserClient(cfg),
		VerificationToken:           NewVerificationTokenClient(cfg),
		WebhookRetryAttempt:         NewWebhookRetryAttemptClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		APIKey:                      NewAPIKeyClient(cfg),
		FiatCurrency:                NewFiatCurrencyClient(cfg),
		IdentityVerificationRequest: NewIdentityVerificationRequestClient(cfg),
		Institution:                 NewInstitutionClient(cfg),
		LinkedAddress:               NewLinkedAddressClient(cfg),
		LockOrderFulfillment:        NewLockOrderFulfillmentClient(cfg),
		LockPaymentOrder:            NewLockPaymentOrderClient(cfg),
		Network:                     NewNetworkClient(cfg),
		PaymentOrder:                NewPaymentOrderClient(cfg),
		PaymentOrderRecipient:       NewPaymentOrderRecipientClient(cfg),
		ProviderOrderToken:          NewProviderOrderTokenClient(cfg),
		ProviderProfile:             NewProviderProfileClient(cfg),
		ProviderRating:              NewProviderRatingClient(cfg),
		ProvisionBucket:             NewProvisionBucketClient(cfg),
		ReceiveAddress:              NewReceiveAddressClient(cfg),
		SenderOrderToken:            NewSenderOrderTokenClient(cfg),
		SenderProfile:               NewSenderProfileClient(cfg),
		Token:                       NewTokenClient(cfg),
		TransactionLog:              NewTransactionLogClient(cfg),
		User:                        NewUserClient(cfg),
		VerificationToken:           NewVerificationTokenClient(cfg),
		WebhookRetryAttempt:         NewWebhookRetryAttemptClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APIKey.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APIKey, c.FiatCurrency, c.IdentityVerificationRequest, c.Institution,
		c.LinkedAddress, c.LockOrderFulfillment, c.LockPaymentOrder, c.Network,
		c.PaymentOrder, c.PaymentOrderRecipient, c.ProviderOrderToken,
		c.ProviderProfile, c.ProviderRating, c.ProvisionBucket, c.ReceiveAddress,
		c.SenderOrderToken, c.SenderProfile, c.Token, c.TransactionLog, c.User,
		c.VerificationToken, c.WebhookRetryAttempt,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APIKey, c.FiatCurrency, c.IdentityVerificationRequest, c.Institution,
		c.LinkedAddress, c.LockOrderFulfillment, c.LockPaymentOrder, c.Network,
		c.PaymentOrder, c.PaymentOrderRecipient, c.ProviderOrderToken,
		c.ProviderProfile, c.ProviderRating, c.ProvisionBucket, c.ReceiveAddress,
		c.SenderOrderToken, c.SenderProfile, c.Token, c.TransactionLog, c.User,
		c.VerificationToken, c.WebhookRetryAttempt,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APIKeyMutation:
		return c.APIKey.mutate(ctx, m)
	case *FiatCurrencyMutation:
		return c.FiatCurrency.mutate(ctx, m)
	case *IdentityVerificationRequestMutation:
		return c.IdentityVerificationRequest.mutate(ctx, m)
	case *InstitutionMutation:
		return c.Institution.mutate(ctx, m)
	case *LinkedAddressMutation:
		return c.LinkedAddress.mutate(ctx, m)
	case *LockOrderFulfillmentMutation:
		return c.LockOrderFulfillment.mutate(ctx, m)
	case *LockPaymentOrderMutation:
		return c.LockPaymentOrder.mutate(ctx, m)
	case *NetworkMutation:
		return c.Network.mutate(ctx, m)
	case *PaymentOrderMutation:
		return c.PaymentOrder.mutate(ctx, m)
	case *PaymentOrderRecipientMutation:
		return c.PaymentOrderRecipient.mutate(ctx, m)
	case *ProviderOrderTokenMutation:
		return c.ProviderOrderToken.mutate(ctx, m)
	case *ProviderProfileMutation:
		return c.ProviderProfile.mutate(ctx, m)
	case *ProviderRatingMutation:
		return c.ProviderRating.mutate(ctx, m)
	case *ProvisionBucketMutation:
		return c.ProvisionBucket.mutate(ctx, m)
	case *ReceiveAddressMutation:
		return c.ReceiveAddress.mutate(ctx, m)
	case *SenderOrderTokenMutation:
		return c.SenderOrderToken.mutate(ctx, m)
	case *SenderProfileMutation:
		return c.SenderProfile.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *TransactionLogMutation:
		return c.TransactionLog.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VerificationTokenMutation:
		return c.VerificationToken.mutate(ctx, m)
	case *WebhookRetryAttemptMutation:
		return c.WebhookRetryAttempt.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APIKeyClient is a client for the APIKey schema.
type APIKeyClient struct {
	config
}

// NewAPIKeyClient returns a client for the APIKey from the given config.
func NewAPIKeyClient(c config) *APIKeyClient {
	return &APIKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *APIKeyClient) Use(hooks ...Hook) {
	c.hooks.APIKey = append(c.hooks.APIKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *APIKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.APIKey = append(c.inters.APIKey, interceptors...)
}

// Create returns a builder for creating a APIKey entity.
func (c *APIKeyClient) Create() *APIKeyCreate {
	mutation := newAPIKeyMutation(c.config, OpCreate)
	return &APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APIKey entities.
func (c *APIKeyClient) CreateBulk(builders ...*APIKeyCreate) *APIKeyCreateBulk {
	return &APIKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *APIKeyClient) MapCreateBulk(slice any, setFunc func(*APIKeyCreate, int)) *APIKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &APIKeyCreateBulk{err: fmt.Errorf("calling to APIKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*APIKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &APIKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APIKey.
func (c *APIKeyClient) Update() *APIKeyUpdate {
	mutation := newAPIKeyMutation(c.config, OpUpdate)
	return &APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APIKeyClient) UpdateOne(ak *APIKey) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKey(ak))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APIKeyClient) UpdateOneID(id uuid.UUID) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKeyID(id))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APIKey.
func (c *APIKeyClient) Delete() *APIKeyDelete {
	mutation := newAPIKeyMutation(c.config, OpDelete)
	return &APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APIKeyClient) DeleteOne(ak *APIKey) *APIKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APIKeyClient) DeleteOneID(id uuid.UUID) *APIKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIKeyDeleteOne{builder}
}

// Query returns a query builder for APIKey.
func (c *APIKeyClient) Query() *APIKeyQuery {
	return &APIKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPIKey},
		inters: c.Interceptors(),
	}
}

// Get returns a APIKey entity by its id.
func (c *APIKeyClient) Get(ctx context.Context, id uuid.UUID) (*APIKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APIKeyClient) GetX(ctx context.Context, id uuid.UUID) *APIKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySenderProfile queries the sender_profile edge of a APIKey.
func (c *APIKeyClient) QuerySenderProfile(ak *APIKey) *SenderProfileQuery {
	query := (&SenderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(senderprofile.Table, senderprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apikey.SenderProfileTable, apikey.SenderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderProfile queries the provider_profile edge of a APIKey.
func (c *APIKeyClient) QueryProviderProfile(ak *APIKey) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apikey.ProviderProfileTable, apikey.ProviderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentOrders queries the payment_orders edge of a APIKey.
func (c *APIKeyClient) QueryPaymentOrders(ak *APIKey) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apikey.PaymentOrdersTable, apikey.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APIKeyClient) Hooks() []Hook {
	return c.hooks.APIKey
}

// Interceptors returns the client interceptors.
func (c *APIKeyClient) Interceptors() []Interceptor {
	return c.inters.APIKey
}

func (c *APIKeyClient) mutate(ctx context.Context, m *APIKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APIKey mutation op: %q", m.Op())
	}
}

// FiatCurrencyClient is a client for the FiatCurrency schema.
type FiatCurrencyClient struct {
	config
}

// NewFiatCurrencyClient returns a client for the FiatCurrency from the given config.
func NewFiatCurrencyClient(c config) *FiatCurrencyClient {
	return &FiatCurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fiatcurrency.Hooks(f(g(h())))`.
func (c *FiatCurrencyClient) Use(hooks ...Hook) {
	c.hooks.FiatCurrency = append(c.hooks.FiatCurrency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fiatcurrency.Intercept(f(g(h())))`.
func (c *FiatCurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.FiatCurrency = append(c.inters.FiatCurrency, interceptors...)
}

// Create returns a builder for creating a FiatCurrency entity.
func (c *FiatCurrencyClient) Create() *FiatCurrencyCreate {
	mutation := newFiatCurrencyMutation(c.config, OpCreate)
	return &FiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FiatCurrency entities.
func (c *FiatCurrencyClient) CreateBulk(builders ...*FiatCurrencyCreate) *FiatCurrencyCreateBulk {
	return &FiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FiatCurrencyClient) MapCreateBulk(slice any, setFunc func(*FiatCurrencyCreate, int)) *FiatCurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FiatCurrencyCreateBulk{err: fmt.Errorf("calling to FiatCurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FiatCurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FiatCurrency.
func (c *FiatCurrencyClient) Update() *FiatCurrencyUpdate {
	mutation := newFiatCurrencyMutation(c.config, OpUpdate)
	return &FiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FiatCurrencyClient) UpdateOne(fc *FiatCurrency) *FiatCurrencyUpdateOne {
	mutation := newFiatCurrencyMutation(c.config, OpUpdateOne, withFiatCurrency(fc))
	return &FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FiatCurrencyClient) UpdateOneID(id uuid.UUID) *FiatCurrencyUpdateOne {
	mutation := newFiatCurrencyMutation(c.config, OpUpdateOne, withFiatCurrencyID(id))
	return &FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FiatCurrency.
func (c *FiatCurrencyClient) Delete() *FiatCurrencyDelete {
	mutation := newFiatCurrencyMutation(c.config, OpDelete)
	return &FiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FiatCurrencyClient) DeleteOne(fc *FiatCurrency) *FiatCurrencyDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FiatCurrencyClient) DeleteOneID(id uuid.UUID) *FiatCurrencyDeleteOne {
	builder := c.Delete().Where(fiatcurrency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FiatCurrencyDeleteOne{builder}
}

// Query returns a query builder for FiatCurrency.
func (c *FiatCurrencyClient) Query() *FiatCurrencyQuery {
	return &FiatCurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiatCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a FiatCurrency entity by its id.
func (c *FiatCurrencyClient) Get(ctx context.Context, id uuid.UUID) (*FiatCurrency, error) {
	return c.Query().Where(fiatcurrency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FiatCurrencyClient) GetX(ctx context.Context, id uuid.UUID) *FiatCurrency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProviders queries the providers edge of a FiatCurrency.
func (c *FiatCurrencyClient) QueryProviders(fc *FiatCurrency) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fiatcurrency.Table, fiatcurrency.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, fiatcurrency.ProvidersTable, fiatcurrency.ProvidersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionBuckets queries the provision_buckets edge of a FiatCurrency.
func (c *FiatCurrencyClient) QueryProvisionBuckets(fc *FiatCurrency) *ProvisionBucketQuery {
	query := (&ProvisionBucketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fiatcurrency.Table, fiatcurrency.FieldID, id),
			sqlgraph.To(provisionbucket.Table, provisionbucket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fiatcurrency.ProvisionBucketsTable, fiatcurrency.ProvisionBucketsColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitutions queries the institutions edge of a FiatCurrency.
func (c *FiatCurrencyClient) QueryInstitutions(fc *FiatCurrency) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fiatcurrency.Table, fiatcurrency.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fiatcurrency.InstitutionsTable, fiatcurrency.InstitutionsColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderSettings queries the provider_settings edge of a FiatCurrency.
func (c *FiatCurrencyClient) QueryProviderSettings(fc *FiatCurrency) *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fiatcurrency.Table, fiatcurrency.FieldID, id),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fiatcurrency.ProviderSettingsTable, fiatcurrency.ProviderSettingsColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FiatCurrencyClient) Hooks() []Hook {
	return c.hooks.FiatCurrency
}

// Interceptors returns the client interceptors.
func (c *FiatCurrencyClient) Interceptors() []Interceptor {
	return c.inters.FiatCurrency
}

func (c *FiatCurrencyClient) mutate(ctx context.Context, m *FiatCurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FiatCurrency mutation op: %q", m.Op())
	}
}

// IdentityVerificationRequestClient is a client for the IdentityVerificationRequest schema.
type IdentityVerificationRequestClient struct {
	config
}

// NewIdentityVerificationRequestClient returns a client for the IdentityVerificationRequest from the given config.
func NewIdentityVerificationRequestClient(c config) *IdentityVerificationRequestClient {
	return &IdentityVerificationRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identityverificationrequest.Hooks(f(g(h())))`.
func (c *IdentityVerificationRequestClient) Use(hooks ...Hook) {
	c.hooks.IdentityVerificationRequest = append(c.hooks.IdentityVerificationRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `identityverificationrequest.Intercept(f(g(h())))`.
func (c *IdentityVerificationRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.IdentityVerificationRequest = append(c.inters.IdentityVerificationRequest, interceptors...)
}

// Create returns a builder for creating a IdentityVerificationRequest entity.
func (c *IdentityVerificationRequestClient) Create() *IdentityVerificationRequestCreate {
	mutation := newIdentityVerificationRequestMutation(c.config, OpCreate)
	return &IdentityVerificationRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IdentityVerificationRequest entities.
func (c *IdentityVerificationRequestClient) CreateBulk(builders ...*IdentityVerificationRequestCreate) *IdentityVerificationRequestCreateBulk {
	return &IdentityVerificationRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdentityVerificationRequestClient) MapCreateBulk(slice any, setFunc func(*IdentityVerificationRequestCreate, int)) *IdentityVerificationRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdentityVerificationRequestCreateBulk{err: fmt.Errorf("calling to IdentityVerificationRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdentityVerificationRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdentityVerificationRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IdentityVerificationRequest.
func (c *IdentityVerificationRequestClient) Update() *IdentityVerificationRequestUpdate {
	mutation := newIdentityVerificationRequestMutation(c.config, OpUpdate)
	return &IdentityVerificationRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityVerificationRequestClient) UpdateOne(ivr *IdentityVerificationRequest) *IdentityVerificationRequestUpdateOne {
	mutation := newIdentityVerificationRequestMutation(c.config, OpUpdateOne, withIdentityVerificationRequest(ivr))
	return &IdentityVerificationRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityVerificationRequestClient) UpdateOneID(id uuid.UUID) *IdentityVerificationRequestUpdateOne {
	mutation := newIdentityVerificationRequestMutation(c.config, OpUpdateOne, withIdentityVerificationRequestID(id))
	return &IdentityVerificationRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IdentityVerificationRequest.
func (c *IdentityVerificationRequestClient) Delete() *IdentityVerificationRequestDelete {
	mutation := newIdentityVerificationRequestMutation(c.config, OpDelete)
	return &IdentityVerificationRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdentityVerificationRequestClient) DeleteOne(ivr *IdentityVerificationRequest) *IdentityVerificationRequestDeleteOne {
	return c.DeleteOneID(ivr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdentityVerificationRequestClient) DeleteOneID(id uuid.UUID) *IdentityVerificationRequestDeleteOne {
	builder := c.Delete().Where(identityverificationrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityVerificationRequestDeleteOne{builder}
}

// Query returns a query builder for IdentityVerificationRequest.
func (c *IdentityVerificationRequestClient) Query() *IdentityVerificationRequestQuery {
	return &IdentityVerificationRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdentityVerificationRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a IdentityVerificationRequest entity by its id.
func (c *IdentityVerificationRequestClient) Get(ctx context.Context, id uuid.UUID) (*IdentityVerificationRequest, error) {
	return c.Query().Where(identityverificationrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityVerificationRequestClient) GetX(ctx context.Context, id uuid.UUID) *IdentityVerificationRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IdentityVerificationRequestClient) Hooks() []Hook {
	return c.hooks.IdentityVerificationRequest
}

// Interceptors returns the client interceptors.
func (c *IdentityVerificationRequestClient) Interceptors() []Interceptor {
	return c.inters.IdentityVerificationRequest
}

func (c *IdentityVerificationRequestClient) mutate(ctx context.Context, m *IdentityVerificationRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdentityVerificationRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdentityVerificationRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdentityVerificationRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdentityVerificationRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IdentityVerificationRequest mutation op: %q", m.Op())
	}
}

// InstitutionClient is a client for the Institution schema.
type InstitutionClient struct {
	config
}

// NewInstitutionClient returns a client for the Institution from the given config.
func NewInstitutionClient(c config) *InstitutionClient {
	return &InstitutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `institution.Hooks(f(g(h())))`.
func (c *InstitutionClient) Use(hooks ...Hook) {
	c.hooks.Institution = append(c.hooks.Institution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `institution.Intercept(f(g(h())))`.
func (c *InstitutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Institution = append(c.inters.Institution, interceptors...)
}

// Create returns a builder for creating a Institution entity.
func (c *InstitutionClient) Create() *InstitutionCreate {
	mutation := newInstitutionMutation(c.config, OpCreate)
	return &InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Institution entities.
func (c *InstitutionClient) CreateBulk(builders ...*InstitutionCreate) *InstitutionCreateBulk {
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InstitutionClient) MapCreateBulk(slice any, setFunc func(*InstitutionCreate, int)) *InstitutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InstitutionCreateBulk{err: fmt.Errorf("calling to InstitutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InstitutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Institution.
func (c *InstitutionClient) Update() *InstitutionUpdate {
	mutation := newInstitutionMutation(c.config, OpUpdate)
	return &InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstitutionClient) UpdateOne(i *Institution) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitution(i))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstitutionClient) UpdateOneID(id int) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitutionID(id))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Institution.
func (c *InstitutionClient) Delete() *InstitutionDelete {
	mutation := newInstitutionMutation(c.config, OpDelete)
	return &InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstitutionClient) DeleteOne(i *Institution) *InstitutionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstitutionClient) DeleteOneID(id int) *InstitutionDeleteOne {
	builder := c.Delete().Where(institution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstitutionDeleteOne{builder}
}

// Query returns a query builder for Institution.
func (c *InstitutionClient) Query() *InstitutionQuery {
	return &InstitutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstitution},
		inters: c.Interceptors(),
	}
}

// Get returns a Institution entity by its id.
func (c *InstitutionClient) Get(ctx context.Context, id int) (*Institution, error) {
	return c.Query().Where(institution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstitutionClient) GetX(ctx context.Context, id int) *Institution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFiatCurrency queries the fiat_currency edge of a Institution.
func (c *InstitutionClient) QueryFiatCurrency(i *Institution) *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, institution.FiatCurrencyTable, institution.FiatCurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstitutionClient) Hooks() []Hook {
	return c.hooks.Institution
}

// Interceptors returns the client interceptors.
func (c *InstitutionClient) Interceptors() []Interceptor {
	return c.inters.Institution
}

func (c *InstitutionClient) mutate(ctx context.Context, m *InstitutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Institution mutation op: %q", m.Op())
	}
}

// LinkedAddressClient is a client for the LinkedAddress schema.
type LinkedAddressClient struct {
	config
}

// NewLinkedAddressClient returns a client for the LinkedAddress from the given config.
func NewLinkedAddressClient(c config) *LinkedAddressClient {
	return &LinkedAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linkedaddress.Hooks(f(g(h())))`.
func (c *LinkedAddressClient) Use(hooks ...Hook) {
	c.hooks.LinkedAddress = append(c.hooks.LinkedAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `linkedaddress.Intercept(f(g(h())))`.
func (c *LinkedAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.LinkedAddress = append(c.inters.LinkedAddress, interceptors...)
}

// Create returns a builder for creating a LinkedAddress entity.
func (c *LinkedAddressClient) Create() *LinkedAddressCreate {
	mutation := newLinkedAddressMutation(c.config, OpCreate)
	return &LinkedAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinkedAddress entities.
func (c *LinkedAddressClient) CreateBulk(builders ...*LinkedAddressCreate) *LinkedAddressCreateBulk {
	return &LinkedAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LinkedAddressClient) MapCreateBulk(slice any, setFunc func(*LinkedAddressCreate, int)) *LinkedAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LinkedAddressCreateBulk{err: fmt.Errorf("calling to LinkedAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LinkedAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LinkedAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinkedAddress.
func (c *LinkedAddressClient) Update() *LinkedAddressUpdate {
	mutation := newLinkedAddressMutation(c.config, OpUpdate)
	return &LinkedAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinkedAddressClient) UpdateOne(la *LinkedAddress) *LinkedAddressUpdateOne {
	mutation := newLinkedAddressMutation(c.config, OpUpdateOne, withLinkedAddress(la))
	return &LinkedAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinkedAddressClient) UpdateOneID(id int) *LinkedAddressUpdateOne {
	mutation := newLinkedAddressMutation(c.config, OpUpdateOne, withLinkedAddressID(id))
	return &LinkedAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinkedAddress.
func (c *LinkedAddressClient) Delete() *LinkedAddressDelete {
	mutation := newLinkedAddressMutation(c.config, OpDelete)
	return &LinkedAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LinkedAddressClient) DeleteOne(la *LinkedAddress) *LinkedAddressDeleteOne {
	return c.DeleteOneID(la.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LinkedAddressClient) DeleteOneID(id int) *LinkedAddressDeleteOne {
	builder := c.Delete().Where(linkedaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinkedAddressDeleteOne{builder}
}

// Query returns a query builder for LinkedAddress.
func (c *LinkedAddressClient) Query() *LinkedAddressQuery {
	return &LinkedAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLinkedAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a LinkedAddress entity by its id.
func (c *LinkedAddressClient) Get(ctx context.Context, id int) (*LinkedAddress, error) {
	return c.Query().Where(linkedaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinkedAddressClient) GetX(ctx context.Context, id int) *LinkedAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentOrders queries the payment_orders edge of a LinkedAddress.
func (c *LinkedAddressClient) QueryPaymentOrders(la *LinkedAddress) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := la.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(linkedaddress.Table, linkedaddress.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, linkedaddress.PaymentOrdersTable, linkedaddress.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(la.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinkedAddressClient) Hooks() []Hook {
	return c.hooks.LinkedAddress
}

// Interceptors returns the client interceptors.
func (c *LinkedAddressClient) Interceptors() []Interceptor {
	return c.inters.LinkedAddress
}

func (c *LinkedAddressClient) mutate(ctx context.Context, m *LinkedAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LinkedAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LinkedAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LinkedAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LinkedAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LinkedAddress mutation op: %q", m.Op())
	}
}

// LockOrderFulfillmentClient is a client for the LockOrderFulfillment schema.
type LockOrderFulfillmentClient struct {
	config
}

// NewLockOrderFulfillmentClient returns a client for the LockOrderFulfillment from the given config.
func NewLockOrderFulfillmentClient(c config) *LockOrderFulfillmentClient {
	return &LockOrderFulfillmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lockorderfulfillment.Hooks(f(g(h())))`.
func (c *LockOrderFulfillmentClient) Use(hooks ...Hook) {
	c.hooks.LockOrderFulfillment = append(c.hooks.LockOrderFulfillment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lockorderfulfillment.Intercept(f(g(h())))`.
func (c *LockOrderFulfillmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.LockOrderFulfillment = append(c.inters.LockOrderFulfillment, interceptors...)
}

// Create returns a builder for creating a LockOrderFulfillment entity.
func (c *LockOrderFulfillmentClient) Create() *LockOrderFulfillmentCreate {
	mutation := newLockOrderFulfillmentMutation(c.config, OpCreate)
	return &LockOrderFulfillmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LockOrderFulfillment entities.
func (c *LockOrderFulfillmentClient) CreateBulk(builders ...*LockOrderFulfillmentCreate) *LockOrderFulfillmentCreateBulk {
	return &LockOrderFulfillmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LockOrderFulfillmentClient) MapCreateBulk(slice any, setFunc func(*LockOrderFulfillmentCreate, int)) *LockOrderFulfillmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LockOrderFulfillmentCreateBulk{err: fmt.Errorf("calling to LockOrderFulfillmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LockOrderFulfillmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LockOrderFulfillmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LockOrderFulfillment.
func (c *LockOrderFulfillmentClient) Update() *LockOrderFulfillmentUpdate {
	mutation := newLockOrderFulfillmentMutation(c.config, OpUpdate)
	return &LockOrderFulfillmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LockOrderFulfillmentClient) UpdateOne(lof *LockOrderFulfillment) *LockOrderFulfillmentUpdateOne {
	mutation := newLockOrderFulfillmentMutation(c.config, OpUpdateOne, withLockOrderFulfillment(lof))
	return &LockOrderFulfillmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LockOrderFulfillmentClient) UpdateOneID(id uuid.UUID) *LockOrderFulfillmentUpdateOne {
	mutation := newLockOrderFulfillmentMutation(c.config, OpUpdateOne, withLockOrderFulfillmentID(id))
	return &LockOrderFulfillmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LockOrderFulfillment.
func (c *LockOrderFulfillmentClient) Delete() *LockOrderFulfillmentDelete {
	mutation := newLockOrderFulfillmentMutation(c.config, OpDelete)
	return &LockOrderFulfillmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LockOrderFulfillmentClient) DeleteOne(lof *LockOrderFulfillment) *LockOrderFulfillmentDeleteOne {
	return c.DeleteOneID(lof.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LockOrderFulfillmentClient) DeleteOneID(id uuid.UUID) *LockOrderFulfillmentDeleteOne {
	builder := c.Delete().Where(lockorderfulfillment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LockOrderFulfillmentDeleteOne{builder}
}

// Query returns a query builder for LockOrderFulfillment.
func (c *LockOrderFulfillmentClient) Query() *LockOrderFulfillmentQuery {
	return &LockOrderFulfillmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLockOrderFulfillment},
		inters: c.Interceptors(),
	}
}

// Get returns a LockOrderFulfillment entity by its id.
func (c *LockOrderFulfillmentClient) Get(ctx context.Context, id uuid.UUID) (*LockOrderFulfillment, error) {
	return c.Query().Where(lockorderfulfillment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LockOrderFulfillmentClient) GetX(ctx context.Context, id uuid.UUID) *LockOrderFulfillment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a LockOrderFulfillment.
func (c *LockOrderFulfillmentClient) QueryOrder(lof *LockOrderFulfillment) *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lof.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockorderfulfillment.Table, lockorderfulfillment.FieldID, id),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockorderfulfillment.OrderTable, lockorderfulfillment.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(lof.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LockOrderFulfillmentClient) Hooks() []Hook {
	return c.hooks.LockOrderFulfillment
}

// Interceptors returns the client interceptors.
func (c *LockOrderFulfillmentClient) Interceptors() []Interceptor {
	return c.inters.LockOrderFulfillment
}

func (c *LockOrderFulfillmentClient) mutate(ctx context.Context, m *LockOrderFulfillmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LockOrderFulfillmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LockOrderFulfillmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LockOrderFulfillmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LockOrderFulfillmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LockOrderFulfillment mutation op: %q", m.Op())
	}
}

// LockPaymentOrderClient is a client for the LockPaymentOrder schema.
type LockPaymentOrderClient struct {
	config
}

// NewLockPaymentOrderClient returns a client for the LockPaymentOrder from the given config.
func NewLockPaymentOrderClient(c config) *LockPaymentOrderClient {
	return &LockPaymentOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lockpaymentorder.Hooks(f(g(h())))`.
func (c *LockPaymentOrderClient) Use(hooks ...Hook) {
	c.hooks.LockPaymentOrder = append(c.hooks.LockPaymentOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lockpaymentorder.Intercept(f(g(h())))`.
func (c *LockPaymentOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.LockPaymentOrder = append(c.inters.LockPaymentOrder, interceptors...)
}

// Create returns a builder for creating a LockPaymentOrder entity.
func (c *LockPaymentOrderClient) Create() *LockPaymentOrderCreate {
	mutation := newLockPaymentOrderMutation(c.config, OpCreate)
	return &LockPaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LockPaymentOrder entities.
func (c *LockPaymentOrderClient) CreateBulk(builders ...*LockPaymentOrderCreate) *LockPaymentOrderCreateBulk {
	return &LockPaymentOrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LockPaymentOrderClient) MapCreateBulk(slice any, setFunc func(*LockPaymentOrderCreate, int)) *LockPaymentOrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LockPaymentOrderCreateBulk{err: fmt.Errorf("calling to LockPaymentOrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LockPaymentOrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LockPaymentOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LockPaymentOrder.
func (c *LockPaymentOrderClient) Update() *LockPaymentOrderUpdate {
	mutation := newLockPaymentOrderMutation(c.config, OpUpdate)
	return &LockPaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LockPaymentOrderClient) UpdateOne(lpo *LockPaymentOrder) *LockPaymentOrderUpdateOne {
	mutation := newLockPaymentOrderMutation(c.config, OpUpdateOne, withLockPaymentOrder(lpo))
	return &LockPaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LockPaymentOrderClient) UpdateOneID(id uuid.UUID) *LockPaymentOrderUpdateOne {
	mutation := newLockPaymentOrderMutation(c.config, OpUpdateOne, withLockPaymentOrderID(id))
	return &LockPaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LockPaymentOrder.
func (c *LockPaymentOrderClient) Delete() *LockPaymentOrderDelete {
	mutation := newLockPaymentOrderMutation(c.config, OpDelete)
	return &LockPaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LockPaymentOrderClient) DeleteOne(lpo *LockPaymentOrder) *LockPaymentOrderDeleteOne {
	return c.DeleteOneID(lpo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LockPaymentOrderClient) DeleteOneID(id uuid.UUID) *LockPaymentOrderDeleteOne {
	builder := c.Delete().Where(lockpaymentorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LockPaymentOrderDeleteOne{builder}
}

// Query returns a query builder for LockPaymentOrder.
func (c *LockPaymentOrderClient) Query() *LockPaymentOrderQuery {
	return &LockPaymentOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLockPaymentOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a LockPaymentOrder entity by its id.
func (c *LockPaymentOrderClient) Get(ctx context.Context, id uuid.UUID) (*LockPaymentOrder, error) {
	return c.Query().Where(lockpaymentorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LockPaymentOrderClient) GetX(ctx context.Context, id uuid.UUID) *LockPaymentOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryToken queries the token edge of a LockPaymentOrder.
func (c *LockPaymentOrderClient) QueryToken(lpo *LockPaymentOrder) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lpo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.TokenTable, lockpaymentorder.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(lpo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionBucket queries the provision_bucket edge of a LockPaymentOrder.
func (c *LockPaymentOrderClient) QueryProvisionBucket(lpo *LockPaymentOrder) *ProvisionBucketQuery {
	query := (&ProvisionBucketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lpo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, id),
			sqlgraph.To(provisionbucket.Table, provisionbucket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.ProvisionBucketTable, lockpaymentorder.ProvisionBucketColumn),
		)
		fromV = sqlgraph.Neighbors(lpo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a LockPaymentOrder.
func (c *LockPaymentOrderClient) QueryProvider(lpo *LockPaymentOrder) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lpo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.ProviderTable, lockpaymentorder.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(lpo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFulfillments queries the fulfillments edge of a LockPaymentOrder.
func (c *LockPaymentOrderClient) QueryFulfillments(lpo *LockPaymentOrder) *LockOrderFulfillmentQuery {
	query := (&LockOrderFulfillmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lpo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, id),
			sqlgraph.To(lockorderfulfillment.Table, lockorderfulfillment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lockpaymentorder.FulfillmentsTable, lockpaymentorder.FulfillmentsColumn),
		)
		fromV = sqlgraph.Neighbors(lpo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a LockPaymentOrder.
func (c *LockPaymentOrderClient) QueryTransactions(lpo *LockPaymentOrder) *TransactionLogQuery {
	query := (&TransactionLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lpo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, id),
			sqlgraph.To(transactionlog.Table, transactionlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lockpaymentorder.TransactionsTable, lockpaymentorder.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(lpo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LockPaymentOrderClient) Hooks() []Hook {
	return c.hooks.LockPaymentOrder
}

// Interceptors returns the client interceptors.
func (c *LockPaymentOrderClient) Interceptors() []Interceptor {
	return c.inters.LockPaymentOrder
}

func (c *LockPaymentOrderClient) mutate(ctx context.Context, m *LockPaymentOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LockPaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LockPaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LockPaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LockPaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LockPaymentOrder mutation op: %q", m.Op())
	}
}

// NetworkClient is a client for the Network schema.
type NetworkClient struct {
	config
}

// NewNetworkClient returns a client for the Network from the given config.
func NewNetworkClient(c config) *NetworkClient {
	return &NetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `network.Hooks(f(g(h())))`.
func (c *NetworkClient) Use(hooks ...Hook) {
	c.hooks.Network = append(c.hooks.Network, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `network.Intercept(f(g(h())))`.
func (c *NetworkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Network = append(c.inters.Network, interceptors...)
}

// Create returns a builder for creating a Network entity.
func (c *NetworkClient) Create() *NetworkCreate {
	mutation := newNetworkMutation(c.config, OpCreate)
	return &NetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Network entities.
func (c *NetworkClient) CreateBulk(builders ...*NetworkCreate) *NetworkCreateBulk {
	return &NetworkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NetworkClient) MapCreateBulk(slice any, setFunc func(*NetworkCreate, int)) *NetworkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NetworkCreateBulk{err: fmt.Errorf("calling to NetworkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NetworkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Network.
func (c *NetworkClient) Update() *NetworkUpdate {
	mutation := newNetworkMutation(c.config, OpUpdate)
	return &NetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkClient) UpdateOne(n *Network) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetwork(n))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkClient) UpdateOneID(id int) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetworkID(id))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Network.
func (c *NetworkClient) Delete() *NetworkDelete {
	mutation := newNetworkMutation(c.config, OpDelete)
	return &NetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkClient) DeleteOne(n *Network) *NetworkDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkClient) DeleteOneID(id int) *NetworkDeleteOne {
	builder := c.Delete().Where(network.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkDeleteOne{builder}
}

// Query returns a query builder for Network.
func (c *NetworkClient) Query() *NetworkQuery {
	return &NetworkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetwork},
		inters: c.Interceptors(),
	}
}

// Get returns a Network entity by its id.
func (c *NetworkClient) Get(ctx context.Context, id int) (*Network, error) {
	return c.Query().Where(network.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkClient) GetX(ctx context.Context, id int) *Network {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTokens queries the tokens edge of a Network.
func (c *NetworkClient) QueryTokens(n *Network) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, network.TokensTable, network.TokensColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkClient) Hooks() []Hook {
	return c.hooks.Network
}

// Interceptors returns the client interceptors.
func (c *NetworkClient) Interceptors() []Interceptor {
	return c.inters.Network
}

func (c *NetworkClient) mutate(ctx context.Context, m *NetworkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Network mutation op: %q", m.Op())
	}
}

// PaymentOrderClient is a client for the PaymentOrder schema.
type PaymentOrderClient struct {
	config
}

// NewPaymentOrderClient returns a client for the PaymentOrder from the given config.
func NewPaymentOrderClient(c config) *PaymentOrderClient {
	return &PaymentOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentorder.Hooks(f(g(h())))`.
func (c *PaymentOrderClient) Use(hooks ...Hook) {
	c.hooks.PaymentOrder = append(c.hooks.PaymentOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentorder.Intercept(f(g(h())))`.
func (c *PaymentOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentOrder = append(c.inters.PaymentOrder, interceptors...)
}

// Create returns a builder for creating a PaymentOrder entity.
func (c *PaymentOrderClient) Create() *PaymentOrderCreate {
	mutation := newPaymentOrderMutation(c.config, OpCreate)
	return &PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentOrder entities.
func (c *PaymentOrderClient) CreateBulk(builders ...*PaymentOrderCreate) *PaymentOrderCreateBulk {
	return &PaymentOrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentOrderClient) MapCreateBulk(slice any, setFunc func(*PaymentOrderCreate, int)) *PaymentOrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentOrderCreateBulk{err: fmt.Errorf("calling to PaymentOrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentOrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentOrder.
func (c *PaymentOrderClient) Update() *PaymentOrderUpdate {
	mutation := newPaymentOrderMutation(c.config, OpUpdate)
	return &PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentOrderClient) UpdateOne(po *PaymentOrder) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrder(po))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentOrderClient) UpdateOneID(id uuid.UUID) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrderID(id))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentOrder.
func (c *PaymentOrderClient) Delete() *PaymentOrderDelete {
	mutation := newPaymentOrderMutation(c.config, OpDelete)
	return &PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentOrderClient) DeleteOne(po *PaymentOrder) *PaymentOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentOrderClient) DeleteOneID(id uuid.UUID) *PaymentOrderDeleteOne {
	builder := c.Delete().Where(paymentorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentOrderDeleteOne{builder}
}

// Query returns a query builder for PaymentOrder.
func (c *PaymentOrderClient) Query() *PaymentOrderQuery {
	return &PaymentOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentOrder entity by its id.
func (c *PaymentOrderClient) Get(ctx context.Context, id uuid.UUID) (*PaymentOrder, error) {
	return c.Query().Where(paymentorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentOrderClient) GetX(ctx context.Context, id uuid.UUID) *PaymentOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySenderProfile queries the sender_profile edge of a PaymentOrder.
func (c *PaymentOrderClient) QuerySenderProfile(po *PaymentOrder) *SenderProfileQuery {
	query := (&SenderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(senderprofile.Table, senderprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentorder.SenderProfileTable, paymentorder.SenderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToken queries the token edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryToken(po *PaymentOrder) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentorder.TokenTable, paymentorder.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinkedAddress queries the linked_address edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryLinkedAddress(po *PaymentOrder) *LinkedAddressQuery {
	query := (&LinkedAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(linkedaddress.Table, linkedaddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentorder.LinkedAddressTable, paymentorder.LinkedAddressColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiveAddress queries the receive_address edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryReceiveAddress(po *PaymentOrder) *ReceiveAddressQuery {
	query := (&ReceiveAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(receiveaddress.Table, receiveaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentorder.ReceiveAddressTable, paymentorder.ReceiveAddressColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipient queries the recipient edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryRecipient(po *PaymentOrder) *PaymentOrderRecipientQuery {
	query := (&PaymentOrderRecipientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(paymentorderrecipient.Table, paymentorderrecipient.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentorder.RecipientTable, paymentorder.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryTransactions(po *PaymentOrder) *TransactionLogQuery {
	query := (&TransactionLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(transactionlog.Table, transactionlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentorder.TransactionsTable, paymentorder.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentOrderClient) Hooks() []Hook {
	return c.hooks.PaymentOrder
}

// Interceptors returns the client interceptors.
func (c *PaymentOrderClient) Interceptors() []Interceptor {
	return c.inters.PaymentOrder
}

func (c *PaymentOrderClient) mutate(ctx context.Context, m *PaymentOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentOrder mutation op: %q", m.Op())
	}
}

// PaymentOrderRecipientClient is a client for the PaymentOrderRecipient schema.
type PaymentOrderRecipientClient struct {
	config
}

// NewPaymentOrderRecipientClient returns a client for the PaymentOrderRecipient from the given config.
func NewPaymentOrderRecipientClient(c config) *PaymentOrderRecipientClient {
	return &PaymentOrderRecipientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentorderrecipient.Hooks(f(g(h())))`.
func (c *PaymentOrderRecipientClient) Use(hooks ...Hook) {
	c.hooks.PaymentOrderRecipient = append(c.hooks.PaymentOrderRecipient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentorderrecipient.Intercept(f(g(h())))`.
func (c *PaymentOrderRecipientClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentOrderRecipient = append(c.inters.PaymentOrderRecipient, interceptors...)
}

// Create returns a builder for creating a PaymentOrderRecipient entity.
func (c *PaymentOrderRecipientClient) Create() *PaymentOrderRecipientCreate {
	mutation := newPaymentOrderRecipientMutation(c.config, OpCreate)
	return &PaymentOrderRecipientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentOrderRecipient entities.
func (c *PaymentOrderRecipientClient) CreateBulk(builders ...*PaymentOrderRecipientCreate) *PaymentOrderRecipientCreateBulk {
	return &PaymentOrderRecipientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentOrderRecipientClient) MapCreateBulk(slice any, setFunc func(*PaymentOrderRecipientCreate, int)) *PaymentOrderRecipientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentOrderRecipientCreateBulk{err: fmt.Errorf("calling to PaymentOrderRecipientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentOrderRecipientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentOrderRecipientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Update() *PaymentOrderRecipientUpdate {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdate)
	return &PaymentOrderRecipientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentOrderRecipientClient) UpdateOne(por *PaymentOrderRecipient) *PaymentOrderRecipientUpdateOne {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdateOne, withPaymentOrderRecipient(por))
	return &PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentOrderRecipientClient) UpdateOneID(id int) *PaymentOrderRecipientUpdateOne {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdateOne, withPaymentOrderRecipientID(id))
	return &PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Delete() *PaymentOrderRecipientDelete {
	mutation := newPaymentOrderRecipientMutation(c.config, OpDelete)
	return &PaymentOrderRecipientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentOrderRecipientClient) DeleteOne(por *PaymentOrderRecipient) *PaymentOrderRecipientDeleteOne {
	return c.DeleteOneID(por.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentOrderRecipientClient) DeleteOneID(id int) *PaymentOrderRecipientDeleteOne {
	builder := c.Delete().Where(paymentorderrecipient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentOrderRecipientDeleteOne{builder}
}

// Query returns a query builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Query() *PaymentOrderRecipientQuery {
	return &PaymentOrderRecipientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentOrderRecipient},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentOrderRecipient entity by its id.
func (c *PaymentOrderRecipientClient) Get(ctx context.Context, id int) (*PaymentOrderRecipient, error) {
	return c.Query().Where(paymentorderrecipient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentOrderRecipientClient) GetX(ctx context.Context, id int) *PaymentOrderRecipient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentOrder queries the payment_order edge of a PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) QueryPaymentOrder(por *PaymentOrderRecipient) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := por.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorderrecipient.Table, paymentorderrecipient.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, paymentorderrecipient.PaymentOrderTable, paymentorderrecipient.PaymentOrderColumn),
		)
		fromV = sqlgraph.Neighbors(por.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentOrderRecipientClient) Hooks() []Hook {
	return c.hooks.PaymentOrderRecipient
}

// Interceptors returns the client interceptors.
func (c *PaymentOrderRecipientClient) Interceptors() []Interceptor {
	return c.inters.PaymentOrderRecipient
}

func (c *PaymentOrderRecipientClient) mutate(ctx context.Context, m *PaymentOrderRecipientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentOrderRecipientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentOrderRecipientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentOrderRecipientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentOrderRecipient mutation op: %q", m.Op())
	}
}

// ProviderOrderTokenClient is a client for the ProviderOrderToken schema.
type ProviderOrderTokenClient struct {
	config
}

// NewProviderOrderTokenClient returns a client for the ProviderOrderToken from the given config.
func NewProviderOrderTokenClient(c config) *ProviderOrderTokenClient {
	return &ProviderOrderTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerordertoken.Hooks(f(g(h())))`.
func (c *ProviderOrderTokenClient) Use(hooks ...Hook) {
	c.hooks.ProviderOrderToken = append(c.hooks.ProviderOrderToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerordertoken.Intercept(f(g(h())))`.
func (c *ProviderOrderTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderOrderToken = append(c.inters.ProviderOrderToken, interceptors...)
}

// Create returns a builder for creating a ProviderOrderToken entity.
func (c *ProviderOrderTokenClient) Create() *ProviderOrderTokenCreate {
	mutation := newProviderOrderTokenMutation(c.config, OpCreate)
	return &ProviderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderOrderToken entities.
func (c *ProviderOrderTokenClient) CreateBulk(builders ...*ProviderOrderTokenCreate) *ProviderOrderTokenCreateBulk {
	return &ProviderOrderTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProviderOrderTokenClient) MapCreateBulk(slice any, setFunc func(*ProviderOrderTokenCreate, int)) *ProviderOrderTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProviderOrderTokenCreateBulk{err: fmt.Errorf("calling to ProviderOrderTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProviderOrderTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProviderOrderTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Update() *ProviderOrderTokenUpdate {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdate)
	return &ProviderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderOrderTokenClient) UpdateOne(pot *ProviderOrderToken) *ProviderOrderTokenUpdateOne {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdateOne, withProviderOrderToken(pot))
	return &ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderOrderTokenClient) UpdateOneID(id int) *ProviderOrderTokenUpdateOne {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdateOne, withProviderOrderTokenID(id))
	return &ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Delete() *ProviderOrderTokenDelete {
	mutation := newProviderOrderTokenMutation(c.config, OpDelete)
	return &ProviderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderOrderTokenClient) DeleteOne(pot *ProviderOrderToken) *ProviderOrderTokenDeleteOne {
	return c.DeleteOneID(pot.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderOrderTokenClient) DeleteOneID(id int) *ProviderOrderTokenDeleteOne {
	builder := c.Delete().Where(providerordertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderOrderTokenDeleteOne{builder}
}

// Query returns a query builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Query() *ProviderOrderTokenQuery {
	return &ProviderOrderTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderOrderToken},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderOrderToken entity by its id.
func (c *ProviderOrderTokenClient) Get(ctx context.Context, id int) (*ProviderOrderToken, error) {
	return c.Query().Where(providerordertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderOrderTokenClient) GetX(ctx context.Context, id int) *ProviderOrderToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a ProviderOrderToken.
func (c *ProviderOrderTokenClient) QueryProvider(pot *ProviderOrderToken) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertoken.Table, providerordertoken.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerordertoken.ProviderTable, providerordertoken.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(pot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToken queries the token edge of a ProviderOrderToken.
func (c *ProviderOrderTokenClient) QueryToken(pot *ProviderOrderToken) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertoken.Table, providerordertoken.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerordertoken.TokenTable, providerordertoken.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(pot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrency queries the currency edge of a ProviderOrderToken.
func (c *ProviderOrderTokenClient) QueryCurrency(pot *ProviderOrderToken) *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertoken.Table, providerordertoken.FieldID, id),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerordertoken.CurrencyTable, providerordertoken.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(pot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderOrderTokenClient) Hooks() []Hook {
	return c.hooks.ProviderOrderToken
}

// Interceptors returns the client interceptors.
func (c *ProviderOrderTokenClient) Interceptors() []Interceptor {
	return c.inters.ProviderOrderToken
}

func (c *ProviderOrderTokenClient) mutate(ctx context.Context, m *ProviderOrderTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderOrderToken mutation op: %q", m.Op())
	}
}

// ProviderProfileClient is a client for the ProviderProfile schema.
type ProviderProfileClient struct {
	config
}

// NewProviderProfileClient returns a client for the ProviderProfile from the given config.
func NewProviderProfileClient(c config) *ProviderProfileClient {
	return &ProviderProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerprofile.Hooks(f(g(h())))`.
func (c *ProviderProfileClient) Use(hooks ...Hook) {
	c.hooks.ProviderProfile = append(c.hooks.ProviderProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerprofile.Intercept(f(g(h())))`.
func (c *ProviderProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderProfile = append(c.inters.ProviderProfile, interceptors...)
}

// Create returns a builder for creating a ProviderProfile entity.
func (c *ProviderProfileClient) Create() *ProviderProfileCreate {
	mutation := newProviderProfileMutation(c.config, OpCreate)
	return &ProviderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderProfile entities.
func (c *ProviderProfileClient) CreateBulk(builders ...*ProviderProfileCreate) *ProviderProfileCreateBulk {
	return &ProviderProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProviderProfileClient) MapCreateBulk(slice any, setFunc func(*ProviderProfileCreate, int)) *ProviderProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProviderProfileCreateBulk{err: fmt.Errorf("calling to ProviderProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProviderProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProviderProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderProfile.
func (c *ProviderProfileClient) Update() *ProviderProfileUpdate {
	mutation := newProviderProfileMutation(c.config, OpUpdate)
	return &ProviderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderProfileClient) UpdateOne(pp *ProviderProfile) *ProviderProfileUpdateOne {
	mutation := newProviderProfileMutation(c.config, OpUpdateOne, withProviderProfile(pp))
	return &ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderProfileClient) UpdateOneID(id string) *ProviderProfileUpdateOne {
	mutation := newProviderProfileMutation(c.config, OpUpdateOne, withProviderProfileID(id))
	return &ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderProfile.
func (c *ProviderProfileClient) Delete() *ProviderProfileDelete {
	mutation := newProviderProfileMutation(c.config, OpDelete)
	return &ProviderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderProfileClient) DeleteOne(pp *ProviderProfile) *ProviderProfileDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderProfileClient) DeleteOneID(id string) *ProviderProfileDeleteOne {
	builder := c.Delete().Where(providerprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderProfileDeleteOne{builder}
}

// Query returns a query builder for ProviderProfile.
func (c *ProviderProfileClient) Query() *ProviderProfileQuery {
	return &ProviderProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderProfile entity by its id.
func (c *ProviderProfileClient) Get(ctx context.Context, id string) (*ProviderProfile, error) {
	return c.Query().Where(providerprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderProfileClient) GetX(ctx context.Context, id string) *ProviderProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryUser(pp *ProviderProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, providerprofile.UserTable, providerprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKey queries the api_key edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryAPIKey(pp *ProviderProfile) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, providerprofile.APIKeyTable, providerprofile.APIKeyColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrencies queries the currencies edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryCurrencies(pp *ProviderProfile) *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, providerprofile.CurrenciesTable, providerprofile.CurrenciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionBuckets queries the provision_buckets edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryProvisionBuckets(pp *ProviderProfile) *ProvisionBucketQuery {
	query := (&ProvisionBucketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(provisionbucket.Table, provisionbucket.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, providerprofile.ProvisionBucketsTable, providerprofile.ProvisionBucketsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderTokens queries the order_tokens edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryOrderTokens(pp *ProviderProfile) *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerprofile.OrderTokensTable, providerprofile.OrderTokensColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderRating queries the provider_rating edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryProviderRating(pp *ProviderProfile) *ProviderRatingQuery {
	query := (&ProviderRatingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(providerrating.Table, providerrating.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, providerprofile.ProviderRatingTable, providerprofile.ProviderRatingColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedOrders queries the assigned_orders edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryAssignedOrders(pp *ProviderProfile) *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerprofile.AssignedOrdersTable, providerprofile.AssignedOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderProfileClient) Hooks() []Hook {
	return c.hooks.ProviderProfile
}

// Interceptors returns the client interceptors.
func (c *ProviderProfileClient) Interceptors() []Interceptor {
	return c.inters.ProviderProfile
}

func (c *ProviderProfileClient) mutate(ctx context.Context, m *ProviderProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderProfile mutation op: %q", m.Op())
	}
}

// ProviderRatingClient is a client for the ProviderRating schema.
type ProviderRatingClient struct {
	config
}

// NewProviderRatingClient returns a client for the ProviderRating from the given config.
func NewProviderRatingClient(c config) *ProviderRatingClient {
	return &ProviderRatingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerrating.Hooks(f(g(h())))`.
func (c *ProviderRatingClient) Use(hooks ...Hook) {
	c.hooks.ProviderRating = append(c.hooks.ProviderRating, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerrating.Intercept(f(g(h())))`.
func (c *ProviderRatingClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderRating = append(c.inters.ProviderRating, interceptors...)
}

// Create returns a builder for creating a ProviderRating entity.
func (c *ProviderRatingClient) Create() *ProviderRatingCreate {
	mutation := newProviderRatingMutation(c.config, OpCreate)
	return &ProviderRatingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderRating entities.
func (c *ProviderRatingClient) CreateBulk(builders ...*ProviderRatingCreate) *ProviderRatingCreateBulk {
	return &ProviderRatingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProviderRatingClient) MapCreateBulk(slice any, setFunc func(*ProviderRatingCreate, int)) *ProviderRatingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProviderRatingCreateBulk{err: fmt.Errorf("calling to ProviderRatingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProviderRatingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProviderRatingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderRating.
func (c *ProviderRatingClient) Update() *ProviderRatingUpdate {
	mutation := newProviderRatingMutation(c.config, OpUpdate)
	return &ProviderRatingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderRatingClient) UpdateOne(pr *ProviderRating) *ProviderRatingUpdateOne {
	mutation := newProviderRatingMutation(c.config, OpUpdateOne, withProviderRating(pr))
	return &ProviderRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderRatingClient) UpdateOneID(id int) *ProviderRatingUpdateOne {
	mutation := newProviderRatingMutation(c.config, OpUpdateOne, withProviderRatingID(id))
	return &ProviderRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderRating.
func (c *ProviderRatingClient) Delete() *ProviderRatingDelete {
	mutation := newProviderRatingMutation(c.config, OpDelete)
	return &ProviderRatingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderRatingClient) DeleteOne(pr *ProviderRating) *ProviderRatingDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderRatingClient) DeleteOneID(id int) *ProviderRatingDeleteOne {
	builder := c.Delete().Where(providerrating.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderRatingDeleteOne{builder}
}

// Query returns a query builder for ProviderRating.
func (c *ProviderRatingClient) Query() *ProviderRatingQuery {
	return &ProviderRatingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderRating},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderRating entity by its id.
func (c *ProviderRatingClient) Get(ctx context.Context, id int) (*ProviderRating, error) {
	return c.Query().Where(providerrating.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderRatingClient) GetX(ctx context.Context, id int) *ProviderRating {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProviderProfile queries the provider_profile edge of a ProviderRating.
func (c *ProviderRatingClient) QueryProviderProfile(pr *ProviderRating) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerrating.Table, providerrating.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, providerrating.ProviderProfileTable, providerrating.ProviderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderRatingClient) Hooks() []Hook {
	return c.hooks.ProviderRating
}

// Interceptors returns the client interceptors.
func (c *ProviderRatingClient) Interceptors() []Interceptor {
	return c.inters.ProviderRating
}

func (c *ProviderRatingClient) mutate(ctx context.Context, m *ProviderRatingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderRatingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderRatingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderRatingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderRating mutation op: %q", m.Op())
	}
}

// ProvisionBucketClient is a client for the ProvisionBucket schema.
type ProvisionBucketClient struct {
	config
}

// NewProvisionBucketClient returns a client for the ProvisionBucket from the given config.
func NewProvisionBucketClient(c config) *ProvisionBucketClient {
	return &ProvisionBucketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provisionbucket.Hooks(f(g(h())))`.
func (c *ProvisionBucketClient) Use(hooks ...Hook) {
	c.hooks.ProvisionBucket = append(c.hooks.ProvisionBucket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `provisionbucket.Intercept(f(g(h())))`.
func (c *ProvisionBucketClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProvisionBucket = append(c.inters.ProvisionBucket, interceptors...)
}

// Create returns a builder for creating a ProvisionBucket entity.
func (c *ProvisionBucketClient) Create() *ProvisionBucketCreate {
	mutation := newProvisionBucketMutation(c.config, OpCreate)
	return &ProvisionBucketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProvisionBucket entities.
func (c *ProvisionBucketClient) CreateBulk(builders ...*ProvisionBucketCreate) *ProvisionBucketCreateBulk {
	return &ProvisionBucketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProvisionBucketClient) MapCreateBulk(slice any, setFunc func(*ProvisionBucketCreate, int)) *ProvisionBucketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProvisionBucketCreateBulk{err: fmt.Errorf("calling to ProvisionBucketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProvisionBucketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProvisionBucketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProvisionBucket.
func (c *ProvisionBucketClient) Update() *ProvisionBucketUpdate {
	mutation := newProvisionBucketMutation(c.config, OpUpdate)
	return &ProvisionBucketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvisionBucketClient) UpdateOne(pb *ProvisionBucket) *ProvisionBucketUpdateOne {
	mutation := newProvisionBucketMutation(c.config, OpUpdateOne, withProvisionBucket(pb))
	return &ProvisionBucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvisionBucketClient) UpdateOneID(id int) *ProvisionBucketUpdateOne {
	mutation := newProvisionBucketMutation(c.config, OpUpdateOne, withProvisionBucketID(id))
	return &ProvisionBucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProvisionBucket.
func (c *ProvisionBucketClient) Delete() *ProvisionBucketDelete {
	mutation := newProvisionBucketMutation(c.config, OpDelete)
	return &ProvisionBucketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProvisionBucketClient) DeleteOne(pb *ProvisionBucket) *ProvisionBucketDeleteOne {
	return c.DeleteOneID(pb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProvisionBucketClient) DeleteOneID(id int) *ProvisionBucketDeleteOne {
	builder := c.Delete().Where(provisionbucket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvisionBucketDeleteOne{builder}
}

// Query returns a query builder for ProvisionBucket.
func (c *ProvisionBucketClient) Query() *ProvisionBucketQuery {
	return &ProvisionBucketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProvisionBucket},
		inters: c.Interceptors(),
	}
}

// Get returns a ProvisionBucket entity by its id.
func (c *ProvisionBucketClient) Get(ctx context.Context, id int) (*ProvisionBucket, error) {
	return c.Query().Where(provisionbucket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvisionBucketClient) GetX(ctx context.Context, id int) *ProvisionBucket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCurrency queries the currency edge of a ProvisionBucket.
func (c *ProvisionBucketClient) QueryCurrency(pb *ProvisionBucket) *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionbucket.Table, provisionbucket.FieldID, id),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, provisionbucket.CurrencyTable, provisionbucket.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(pb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLockPaymentOrders queries the lock_payment_orders edge of a ProvisionBucket.
func (c *ProvisionBucketClient) QueryLockPaymentOrders(pb *ProvisionBucket) *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionbucket.Table, provisionbucket.FieldID, id),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionbucket.LockPaymentOrdersTable, provisionbucket.LockPaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderProfiles queries the provider_profiles edge of a ProvisionBucket.
func (c *ProvisionBucketClient) QueryProviderProfiles(pb *ProvisionBucket) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionbucket.Table, provisionbucket.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisionbucket.ProviderProfilesTable, provisionbucket.ProviderProfilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvisionBucketClient) Hooks() []Hook {
	return c.hooks.ProvisionBucket
}

// Interceptors returns the client interceptors.
func (c *ProvisionBucketClient) Interceptors() []Interceptor {
	return c.inters.ProvisionBucket
}

func (c *ProvisionBucketClient) mutate(ctx context.Context, m *ProvisionBucketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProvisionBucketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProvisionBucketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProvisionBucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProvisionBucketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProvisionBucket mutation op: %q", m.Op())
	}
}

// ReceiveAddressClient is a client for the ReceiveAddress schema.
type ReceiveAddressClient struct {
	config
}

// NewReceiveAddressClient returns a client for the ReceiveAddress from the given config.
func NewReceiveAddressClient(c config) *ReceiveAddressClient {
	return &ReceiveAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `receiveaddress.Hooks(f(g(h())))`.
func (c *ReceiveAddressClient) Use(hooks ...Hook) {
	c.hooks.ReceiveAddress = append(c.hooks.ReceiveAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `receiveaddress.Intercept(f(g(h())))`.
func (c *ReceiveAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReceiveAddress = append(c.inters.ReceiveAddress, interceptors...)
}

// Create returns a builder for creating a ReceiveAddress entity.
func (c *ReceiveAddressClient) Create() *ReceiveAddressCreate {
	mutation := newReceiveAddressMutation(c.config, OpCreate)
	return &ReceiveAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReceiveAddress entities.
func (c *ReceiveAddressClient) CreateBulk(builders ...*ReceiveAddressCreate) *ReceiveAddressCreateBulk {
	return &ReceiveAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReceiveAddressClient) MapCreateBulk(slice any, setFunc func(*ReceiveAddressCreate, int)) *ReceiveAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReceiveAddressCreateBulk{err: fmt.Errorf("calling to ReceiveAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReceiveAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReceiveAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReceiveAddress.
func (c *ReceiveAddressClient) Update() *ReceiveAddressUpdate {
	mutation := newReceiveAddressMutation(c.config, OpUpdate)
	return &ReceiveAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReceiveAddressClient) UpdateOne(ra *ReceiveAddress) *ReceiveAddressUpdateOne {
	mutation := newReceiveAddressMutation(c.config, OpUpdateOne, withReceiveAddress(ra))
	return &ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReceiveAddressClient) UpdateOneID(id int) *ReceiveAddressUpdateOne {
	mutation := newReceiveAddressMutation(c.config, OpUpdateOne, withReceiveAddressID(id))
	return &ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReceiveAddress.
func (c *ReceiveAddressClient) Delete() *ReceiveAddressDelete {
	mutation := newReceiveAddressMutation(c.config, OpDelete)
	return &ReceiveAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReceiveAddressClient) DeleteOne(ra *ReceiveAddress) *ReceiveAddressDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReceiveAddressClient) DeleteOneID(id int) *ReceiveAddressDeleteOne {
	builder := c.Delete().Where(receiveaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReceiveAddressDeleteOne{builder}
}

// Query returns a query builder for ReceiveAddress.
func (c *ReceiveAddressClient) Query() *ReceiveAddressQuery {
	return &ReceiveAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReceiveAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a ReceiveAddress entity by its id.
func (c *ReceiveAddressClient) Get(ctx context.Context, id int) (*ReceiveAddress, error) {
	return c.Query().Where(receiveaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReceiveAddressClient) GetX(ctx context.Context, id int) *ReceiveAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentOrder queries the payment_order edge of a ReceiveAddress.
func (c *ReceiveAddressClient) QueryPaymentOrder(ra *ReceiveAddress) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(receiveaddress.Table, receiveaddress.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, receiveaddress.PaymentOrderTable, receiveaddress.PaymentOrderColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReceiveAddressClient) Hooks() []Hook {
	return c.hooks.ReceiveAddress
}

// Interceptors returns the client interceptors.
func (c *ReceiveAddressClient) Interceptors() []Interceptor {
	return c.inters.ReceiveAddress
}

func (c *ReceiveAddressClient) mutate(ctx context.Context, m *ReceiveAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReceiveAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReceiveAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReceiveAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReceiveAddress mutation op: %q", m.Op())
	}
}

// SenderOrderTokenClient is a client for the SenderOrderToken schema.
type SenderOrderTokenClient struct {
	config
}

// NewSenderOrderTokenClient returns a client for the SenderOrderToken from the given config.
func NewSenderOrderTokenClient(c config) *SenderOrderTokenClient {
	return &SenderOrderTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `senderordertoken.Hooks(f(g(h())))`.
func (c *SenderOrderTokenClient) Use(hooks ...Hook) {
	c.hooks.SenderOrderToken = append(c.hooks.SenderOrderToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `senderordertoken.Intercept(f(g(h())))`.
func (c *SenderOrderTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.SenderOrderToken = append(c.inters.SenderOrderToken, interceptors...)
}

// Create returns a builder for creating a SenderOrderToken entity.
func (c *SenderOrderTokenClient) Create() *SenderOrderTokenCreate {
	mutation := newSenderOrderTokenMutation(c.config, OpCreate)
	return &SenderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SenderOrderToken entities.
func (c *SenderOrderTokenClient) CreateBulk(builders ...*SenderOrderTokenCreate) *SenderOrderTokenCreateBulk {
	return &SenderOrderTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SenderOrderTokenClient) MapCreateBulk(slice any, setFunc func(*SenderOrderTokenCreate, int)) *SenderOrderTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SenderOrderTokenCreateBulk{err: fmt.Errorf("calling to SenderOrderTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SenderOrderTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SenderOrderTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SenderOrderToken.
func (c *SenderOrderTokenClient) Update() *SenderOrderTokenUpdate {
	mutation := newSenderOrderTokenMutation(c.config, OpUpdate)
	return &SenderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SenderOrderTokenClient) UpdateOne(sot *SenderOrderToken) *SenderOrderTokenUpdateOne {
	mutation := newSenderOrderTokenMutation(c.config, OpUpdateOne, withSenderOrderToken(sot))
	return &SenderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SenderOrderTokenClient) UpdateOneID(id int) *SenderOrderTokenUpdateOne {
	mutation := newSenderOrderTokenMutation(c.config, OpUpdateOne, withSenderOrderTokenID(id))
	return &SenderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SenderOrderToken.
func (c *SenderOrderTokenClient) Delete() *SenderOrderTokenDelete {
	mutation := newSenderOrderTokenMutation(c.config, OpDelete)
	return &SenderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SenderOrderTokenClient) DeleteOne(sot *SenderOrderToken) *SenderOrderTokenDeleteOne {
	return c.DeleteOneID(sot.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SenderOrderTokenClient) DeleteOneID(id int) *SenderOrderTokenDeleteOne {
	builder := c.Delete().Where(senderordertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SenderOrderTokenDeleteOne{builder}
}

// Query returns a query builder for SenderOrderToken.
func (c *SenderOrderTokenClient) Query() *SenderOrderTokenQuery {
	return &SenderOrderTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSenderOrderToken},
		inters: c.Interceptors(),
	}
}

// Get returns a SenderOrderToken entity by its id.
func (c *SenderOrderTokenClient) Get(ctx context.Context, id int) (*SenderOrderToken, error) {
	return c.Query().Where(senderordertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SenderOrderTokenClient) GetX(ctx context.Context, id int) *SenderOrderToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a SenderOrderToken.
func (c *SenderOrderTokenClient) QuerySender(sot *SenderOrderToken) *SenderProfileQuery {
	query := (&SenderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderordertoken.Table, senderordertoken.FieldID, id),
			sqlgraph.To(senderprofile.Table, senderprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, senderordertoken.SenderTable, senderordertoken.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(sot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToken queries the token edge of a SenderOrderToken.
func (c *SenderOrderTokenClient) QueryToken(sot *SenderOrderToken) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderordertoken.Table, senderordertoken.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, senderordertoken.TokenTable, senderordertoken.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(sot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SenderOrderTokenClient) Hooks() []Hook {
	return c.hooks.SenderOrderToken
}

// Interceptors returns the client interceptors.
func (c *SenderOrderTokenClient) Interceptors() []Interceptor {
	return c.inters.SenderOrderToken
}

func (c *SenderOrderTokenClient) mutate(ctx context.Context, m *SenderOrderTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SenderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SenderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SenderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SenderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SenderOrderToken mutation op: %q", m.Op())
	}
}

// SenderProfileClient is a client for the SenderProfile schema.
type SenderProfileClient struct {
	config
}

// NewSenderProfileClient returns a client for the SenderProfile from the given config.
func NewSenderProfileClient(c config) *SenderProfileClient {
	return &SenderProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `senderprofile.Hooks(f(g(h())))`.
func (c *SenderProfileClient) Use(hooks ...Hook) {
	c.hooks.SenderProfile = append(c.hooks.SenderProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `senderprofile.Intercept(f(g(h())))`.
func (c *SenderProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.SenderProfile = append(c.inters.SenderProfile, interceptors...)
}

// Create returns a builder for creating a SenderProfile entity.
func (c *SenderProfileClient) Create() *SenderProfileCreate {
	mutation := newSenderProfileMutation(c.config, OpCreate)
	return &SenderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SenderProfile entities.
func (c *SenderProfileClient) CreateBulk(builders ...*SenderProfileCreate) *SenderProfileCreateBulk {
	return &SenderProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SenderProfileClient) MapCreateBulk(slice any, setFunc func(*SenderProfileCreate, int)) *SenderProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SenderProfileCreateBulk{err: fmt.Errorf("calling to SenderProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SenderProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SenderProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SenderProfile.
func (c *SenderProfileClient) Update() *SenderProfileUpdate {
	mutation := newSenderProfileMutation(c.config, OpUpdate)
	return &SenderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SenderProfileClient) UpdateOne(sp *SenderProfile) *SenderProfileUpdateOne {
	mutation := newSenderProfileMutation(c.config, OpUpdateOne, withSenderProfile(sp))
	return &SenderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SenderProfileClient) UpdateOneID(id uuid.UUID) *SenderProfileUpdateOne {
	mutation := newSenderProfileMutation(c.config, OpUpdateOne, withSenderProfileID(id))
	return &SenderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SenderProfile.
func (c *SenderProfileClient) Delete() *SenderProfileDelete {
	mutation := newSenderProfileMutation(c.config, OpDelete)
	return &SenderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SenderProfileClient) DeleteOne(sp *SenderProfile) *SenderProfileDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SenderProfileClient) DeleteOneID(id uuid.UUID) *SenderProfileDeleteOne {
	builder := c.Delete().Where(senderprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SenderProfileDeleteOne{builder}
}

// Query returns a query builder for SenderProfile.
func (c *SenderProfileClient) Query() *SenderProfileQuery {
	return &SenderProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSenderProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a SenderProfile entity by its id.
func (c *SenderProfileClient) Get(ctx context.Context, id uuid.UUID) (*SenderProfile, error) {
	return c.Query().Where(senderprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SenderProfileClient) GetX(ctx context.Context, id uuid.UUID) *SenderProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SenderProfile.
func (c *SenderProfileClient) QueryUser(sp *SenderProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderprofile.Table, senderprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, senderprofile.UserTable, senderprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKey queries the api_key edge of a SenderProfile.
func (c *SenderProfileClient) QueryAPIKey(sp *SenderProfile) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderprofile.Table, senderprofile.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, senderprofile.APIKeyTable, senderprofile.APIKeyColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentOrders queries the payment_orders edge of a SenderProfile.
func (c *SenderProfileClient) QueryPaymentOrders(sp *SenderProfile) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderprofile.Table, senderprofile.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, senderprofile.PaymentOrdersTable, senderprofile.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderTokens queries the order_tokens edge of a SenderProfile.
func (c *SenderProfileClient) QueryOrderTokens(sp *SenderProfile) *SenderOrderTokenQuery {
	query := (&SenderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderprofile.Table, senderprofile.FieldID, id),
			sqlgraph.To(senderordertoken.Table, senderordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, senderprofile.OrderTokensTable, senderprofile.OrderTokensColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinkedAddress queries the linked_address edge of a SenderProfile.
func (c *SenderProfileClient) QueryLinkedAddress(sp *SenderProfile) *LinkedAddressQuery {
	query := (&LinkedAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(senderprofile.Table, senderprofile.FieldID, id),
			sqlgraph.To(linkedaddress.Table, linkedaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, senderprofile.LinkedAddressTable, senderprofile.LinkedAddressColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SenderProfileClient) Hooks() []Hook {
	return c.hooks.SenderProfile
}

// Interceptors returns the client interceptors.
func (c *SenderProfileClient) Interceptors() []Interceptor {
	return c.inters.SenderProfile
}

func (c *SenderProfileClient) mutate(ctx context.Context, m *SenderProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SenderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SenderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SenderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SenderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SenderProfile mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TokenClient) MapCreateBulk(slice any, setFunc func(*TokenCreate, int)) *TokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TokenCreateBulk{err: fmt.Errorf("calling to TokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetwork queries the network edge of a Token.
func (c *TokenClient) QueryNetwork(t *Token) *NetworkQuery {
	query := (&NetworkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, token.NetworkTable, token.NetworkColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentOrders queries the payment_orders edge of a Token.
func (c *TokenClient) QueryPaymentOrders(t *Token) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, token.PaymentOrdersTable, token.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLockPaymentOrders queries the lock_payment_orders edge of a Token.
func (c *TokenClient) QueryLockPaymentOrders(t *Token) *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, token.LockPaymentOrdersTable, token.LockPaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySenderSettings queries the sender_settings edge of a Token.
func (c *TokenClient) QuerySenderSettings(t *Token) *SenderOrderTokenQuery {
	query := (&SenderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(senderordertoken.Table, senderordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, token.SenderSettingsTable, token.SenderSettingsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderSettings queries the provider_settings edge of a Token.
func (c *TokenClient) QueryProviderSettings(t *Token) *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, token.ProviderSettingsTable, token.ProviderSettingsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// TransactionLogClient is a client for the TransactionLog schema.
type TransactionLogClient struct {
	config
}

// NewTransactionLogClient returns a client for the TransactionLog from the given config.
func NewTransactionLogClient(c config) *TransactionLogClient {
	return &TransactionLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionlog.Hooks(f(g(h())))`.
func (c *TransactionLogClient) Use(hooks ...Hook) {
	c.hooks.TransactionLog = append(c.hooks.TransactionLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transactionlog.Intercept(f(g(h())))`.
func (c *TransactionLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.TransactionLog = append(c.inters.TransactionLog, interceptors...)
}

// Create returns a builder for creating a TransactionLog entity.
func (c *TransactionLogClient) Create() *TransactionLogCreate {
	mutation := newTransactionLogMutation(c.config, OpCreate)
	return &TransactionLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionLog entities.
func (c *TransactionLogClient) CreateBulk(builders ...*TransactionLogCreate) *TransactionLogCreateBulk {
	return &TransactionLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransactionLogClient) MapCreateBulk(slice any, setFunc func(*TransactionLogCreate, int)) *TransactionLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransactionLogCreateBulk{err: fmt.Errorf("calling to TransactionLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransactionLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransactionLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionLog.
func (c *TransactionLogClient) Update() *TransactionLogUpdate {
	mutation := newTransactionLogMutation(c.config, OpUpdate)
	return &TransactionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionLogClient) UpdateOne(tl *TransactionLog) *TransactionLogUpdateOne {
	mutation := newTransactionLogMutation(c.config, OpUpdateOne, withTransactionLog(tl))
	return &TransactionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionLogClient) UpdateOneID(id uuid.UUID) *TransactionLogUpdateOne {
	mutation := newTransactionLogMutation(c.config, OpUpdateOne, withTransactionLogID(id))
	return &TransactionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionLog.
func (c *TransactionLogClient) Delete() *TransactionLogDelete {
	mutation := newTransactionLogMutation(c.config, OpDelete)
	return &TransactionLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionLogClient) DeleteOne(tl *TransactionLog) *TransactionLogDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionLogClient) DeleteOneID(id uuid.UUID) *TransactionLogDeleteOne {
	builder := c.Delete().Where(transactionlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionLogDeleteOne{builder}
}

// Query returns a query builder for TransactionLog.
func (c *TransactionLogClient) Query() *TransactionLogQuery {
	return &TransactionLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransactionLog},
		inters: c.Interceptors(),
	}
}

// Get returns a TransactionLog entity by its id.
func (c *TransactionLogClient) Get(ctx context.Context, id uuid.UUID) (*TransactionLog, error) {
	return c.Query().Where(transactionlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionLogClient) GetX(ctx context.Context, id uuid.UUID) *TransactionLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionLogClient) Hooks() []Hook {
	return c.hooks.TransactionLog
}

// Interceptors returns the client interceptors.
func (c *TransactionLogClient) Interceptors() []Interceptor {
	return c.inters.TransactionLog
}

func (c *TransactionLogClient) mutate(ctx context.Context, m *TransactionLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TransactionLog mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySenderProfile queries the sender_profile edge of a User.
func (c *UserClient) QuerySenderProfile(u *User) *SenderProfileQuery {
	query := (&SenderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(senderprofile.Table, senderprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SenderProfileTable, user.SenderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderProfile queries the provider_profile edge of a User.
func (c *UserClient) QueryProviderProfile(u *User) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProviderProfileTable, user.ProviderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVerificationToken queries the verification_token edge of a User.
func (c *UserClient) QueryVerificationToken(u *User) *VerificationTokenQuery {
	query := (&VerificationTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(verificationtoken.Table, verificationtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VerificationTokenTable, user.VerificationTokenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VerificationTokenClient is a client for the VerificationToken schema.
type VerificationTokenClient struct {
	config
}

// NewVerificationTokenClient returns a client for the VerificationToken from the given config.
func NewVerificationTokenClient(c config) *VerificationTokenClient {
	return &VerificationTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `verificationtoken.Hooks(f(g(h())))`.
func (c *VerificationTokenClient) Use(hooks ...Hook) {
	c.hooks.VerificationToken = append(c.hooks.VerificationToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `verificationtoken.Intercept(f(g(h())))`.
func (c *VerificationTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.VerificationToken = append(c.inters.VerificationToken, interceptors...)
}

// Create returns a builder for creating a VerificationToken entity.
func (c *VerificationTokenClient) Create() *VerificationTokenCreate {
	mutation := newVerificationTokenMutation(c.config, OpCreate)
	return &VerificationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VerificationToken entities.
func (c *VerificationTokenClient) CreateBulk(builders ...*VerificationTokenCreate) *VerificationTokenCreateBulk {
	return &VerificationTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VerificationTokenClient) MapCreateBulk(slice any, setFunc func(*VerificationTokenCreate, int)) *VerificationTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VerificationTokenCreateBulk{err: fmt.Errorf("calling to VerificationTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VerificationTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VerificationTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VerificationToken.
func (c *VerificationTokenClient) Update() *VerificationTokenUpdate {
	mutation := newVerificationTokenMutation(c.config, OpUpdate)
	return &VerificationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VerificationTokenClient) UpdateOne(vt *VerificationToken) *VerificationTokenUpdateOne {
	mutation := newVerificationTokenMutation(c.config, OpUpdateOne, withVerificationToken(vt))
	return &VerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VerificationTokenClient) UpdateOneID(id uuid.UUID) *VerificationTokenUpdateOne {
	mutation := newVerificationTokenMutation(c.config, OpUpdateOne, withVerificationTokenID(id))
	return &VerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VerificationToken.
func (c *VerificationTokenClient) Delete() *VerificationTokenDelete {
	mutation := newVerificationTokenMutation(c.config, OpDelete)
	return &VerificationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VerificationTokenClient) DeleteOne(vt *VerificationToken) *VerificationTokenDeleteOne {
	return c.DeleteOneID(vt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VerificationTokenClient) DeleteOneID(id uuid.UUID) *VerificationTokenDeleteOne {
	builder := c.Delete().Where(verificationtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VerificationTokenDeleteOne{builder}
}

// Query returns a query builder for VerificationToken.
func (c *VerificationTokenClient) Query() *VerificationTokenQuery {
	return &VerificationTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVerificationToken},
		inters: c.Interceptors(),
	}
}

// Get returns a VerificationToken entity by its id.
func (c *VerificationTokenClient) Get(ctx context.Context, id uuid.UUID) (*VerificationToken, error) {
	return c.Query().Where(verificationtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VerificationTokenClient) GetX(ctx context.Context, id uuid.UUID) *VerificationToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a VerificationToken.
func (c *VerificationTokenClient) QueryOwner(vt *VerificationToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(verificationtoken.Table, verificationtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, verificationtoken.OwnerTable, verificationtoken.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(vt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VerificationTokenClient) Hooks() []Hook {
	hooks := c.hooks.VerificationToken
	return append(hooks[:len(hooks):len(hooks)], verificationtoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *VerificationTokenClient) Interceptors() []Interceptor {
	return c.inters.VerificationToken
}

func (c *VerificationTokenClient) mutate(ctx context.Context, m *VerificationTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VerificationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VerificationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VerificationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VerificationToken mutation op: %q", m.Op())
	}
}

// WebhookRetryAttemptClient is a client for the WebhookRetryAttempt schema.
type WebhookRetryAttemptClient struct {
	config
}

// NewWebhookRetryAttemptClient returns a client for the WebhookRetryAttempt from the given config.
func NewWebhookRetryAttemptClient(c config) *WebhookRetryAttemptClient {
	return &WebhookRetryAttemptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webhookretryattempt.Hooks(f(g(h())))`.
func (c *WebhookRetryAttemptClient) Use(hooks ...Hook) {
	c.hooks.WebhookRetryAttempt = append(c.hooks.WebhookRetryAttempt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webhookretryattempt.Intercept(f(g(h())))`.
func (c *WebhookRetryAttemptClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebhookRetryAttempt = append(c.inters.WebhookRetryAttempt, interceptors...)
}

// Create returns a builder for creating a WebhookRetryAttempt entity.
func (c *WebhookRetryAttemptClient) Create() *WebhookRetryAttemptCreate {
	mutation := newWebhookRetryAttemptMutation(c.config, OpCreate)
	return &WebhookRetryAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebhookRetryAttempt entities.
func (c *WebhookRetryAttemptClient) CreateBulk(builders ...*WebhookRetryAttemptCreate) *WebhookRetryAttemptCreateBulk {
	return &WebhookRetryAttemptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WebhookRetryAttemptClient) MapCreateBulk(slice any, setFunc func(*WebhookRetryAttemptCreate, int)) *WebhookRetryAttemptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WebhookRetryAttemptCreateBulk{err: fmt.Errorf("calling to WebhookRetryAttemptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WebhookRetryAttemptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WebhookRetryAttemptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebhookRetryAttempt.
func (c *WebhookRetryAttemptClient) Update() *WebhookRetryAttemptUpdate {
	mutation := newWebhookRetryAttemptMutation(c.config, OpUpdate)
	return &WebhookRetryAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebhookRetryAttemptClient) UpdateOne(wra *WebhookRetryAttempt) *WebhookRetryAttemptUpdateOne {
	mutation := newWebhookRetryAttemptMutation(c.config, OpUpdateOne, withWebhookRetryAttempt(wra))
	return &WebhookRetryAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebhookRetryAttemptClient) UpdateOneID(id int) *WebhookRetryAttemptUpdateOne {
	mutation := newWebhookRetryAttemptMutation(c.config, OpUpdateOne, withWebhookRetryAttemptID(id))
	return &WebhookRetryAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebhookRetryAttempt.
func (c *WebhookRetryAttemptClient) Delete() *WebhookRetryAttemptDelete {
	mutation := newWebhookRetryAttemptMutation(c.config, OpDelete)
	return &WebhookRetryAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebhookRetryAttemptClient) DeleteOne(wra *WebhookRetryAttempt) *WebhookRetryAttemptDeleteOne {
	return c.DeleteOneID(wra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebhookRetryAttemptClient) DeleteOneID(id int) *WebhookRetryAttemptDeleteOne {
	builder := c.Delete().Where(webhookretryattempt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebhookRetryAttemptDeleteOne{builder}
}

// Query returns a query builder for WebhookRetryAttempt.
func (c *WebhookRetryAttemptClient) Query() *WebhookRetryAttemptQuery {
	return &WebhookRetryAttemptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebhookRetryAttempt},
		inters: c.Interceptors(),
	}
}

// Get returns a WebhookRetryAttempt entity by its id.
func (c *WebhookRetryAttemptClient) Get(ctx context.Context, id int) (*WebhookRetryAttempt, error) {
	return c.Query().Where(webhookretryattempt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebhookRetryAttemptClient) GetX(ctx context.Context, id int) *WebhookRetryAttempt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WebhookRetryAttemptClient) Hooks() []Hook {
	return c.hooks.WebhookRetryAttempt
}

// Interceptors returns the client interceptors.
func (c *WebhookRetryAttemptClient) Interceptors() []Interceptor {
	return c.inters.WebhookRetryAttempt
}

func (c *WebhookRetryAttemptClient) mutate(ctx context.Context, m *WebhookRetryAttemptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebhookRetryAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebhookRetryAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebhookRetryAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebhookRetryAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebhookRetryAttempt mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APIKey, FiatCurrency, IdentityVerificationRequest, Institution, LinkedAddress,
		LockOrderFulfillment, LockPaymentOrder, Network, PaymentOrder,
		PaymentOrderRecipient, ProviderOrderToken, ProviderProfile, ProviderRating,
		ProvisionBucket, ReceiveAddress, SenderOrderToken, SenderProfile, Token,
		TransactionLog, User, VerificationToken, WebhookRetryAttempt []ent.Hook
	}
	inters struct {
		APIKey, FiatCurrency, IdentityVerificationRequest, Institution, LinkedAddress,
		LockOrderFulfillment, LockPaymentOrder, Network, PaymentOrder,
		PaymentOrderRecipient, ProviderOrderToken, ProviderProfile, ProviderRating,
		ProvisionBucket, ReceiveAddress, SenderOrderToken, SenderProfile, Token,
		TransactionLog, User, VerificationToken, WebhookRetryAttempt []ent.Interceptor
	}
)
