// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/paycrest/aggregator/ent/provisionbucket"
)

// ProviderProfileUpdate is the builder for updating ProviderProfile entities.
type ProviderProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderProfileMutation
}

// Where appends a list predicates to the ProviderProfileUpdate builder.
func (ppu *ProviderProfileUpdate) Where(ps ...predicate.ProviderProfile) *ProviderProfileUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetTradingName sets the "trading_name" field.
func (ppu *ProviderProfileUpdate) SetTradingName(s string) *ProviderProfileUpdate {
	ppu.mutation.SetTradingName(s)
	return ppu
}

// SetNillableTradingName sets the "trading_name" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableTradingName(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetTradingName(*s)
	}
	return ppu
}

// ClearTradingName clears the value of the "trading_name" field.
func (ppu *ProviderProfileUpdate) ClearTradingName() *ProviderProfileUpdate {
	ppu.mutation.ClearTradingName()
	return ppu
}

// SetHostIdentifier sets the "host_identifier" field.
func (ppu *ProviderProfileUpdate) SetHostIdentifier(s string) *ProviderProfileUpdate {
	ppu.mutation.SetHostIdentifier(s)
	return ppu
}

// SetNillableHostIdentifier sets the "host_identifier" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableHostIdentifier(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetHostIdentifier(*s)
	}
	return ppu
}

// ClearHostIdentifier clears the value of the "host_identifier" field.
func (ppu *ProviderProfileUpdate) ClearHostIdentifier() *ProviderProfileUpdate {
	ppu.mutation.ClearHostIdentifier()
	return ppu
}

// SetProvisionMode sets the "provision_mode" field.
func (ppu *ProviderProfileUpdate) SetProvisionMode(pm providerprofile.ProvisionMode) *ProviderProfileUpdate {
	ppu.mutation.SetProvisionMode(pm)
	return ppu
}

// SetNillableProvisionMode sets the "provision_mode" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableProvisionMode(pm *providerprofile.ProvisionMode) *ProviderProfileUpdate {
	if pm != nil {
		ppu.SetProvisionMode(*pm)
	}
	return ppu
}

// SetIsActive sets the "is_active" field.
func (ppu *ProviderProfileUpdate) SetIsActive(b bool) *ProviderProfileUpdate {
	ppu.mutation.SetIsActive(b)
	return ppu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableIsActive(b *bool) *ProviderProfileUpdate {
	if b != nil {
		ppu.SetIsActive(*b)
	}
	return ppu
}

// SetIsAvailable sets the "is_available" field.
func (ppu *ProviderProfileUpdate) SetIsAvailable(b bool) *ProviderProfileUpdate {
	ppu.mutation.SetIsAvailable(b)
	return ppu
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableIsAvailable(b *bool) *ProviderProfileUpdate {
	if b != nil {
		ppu.SetIsAvailable(*b)
	}
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *ProviderProfileUpdate) SetUpdatedAt(t time.Time) *ProviderProfileUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetVisibilityMode sets the "visibility_mode" field.
func (ppu *ProviderProfileUpdate) SetVisibilityMode(pm providerprofile.VisibilityMode) *ProviderProfileUpdate {
	ppu.mutation.SetVisibilityMode(pm)
	return ppu
}

// SetNillableVisibilityMode sets the "visibility_mode" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableVisibilityMode(pm *providerprofile.VisibilityMode) *ProviderProfileUpdate {
	if pm != nil {
		ppu.SetVisibilityMode(*pm)
	}
	return ppu
}

// SetAddress sets the "address" field.
func (ppu *ProviderProfileUpdate) SetAddress(s string) *ProviderProfileUpdate {
	ppu.mutation.SetAddress(s)
	return ppu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableAddress(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetAddress(*s)
	}
	return ppu
}

// ClearAddress clears the value of the "address" field.
func (ppu *ProviderProfileUpdate) ClearAddress() *ProviderProfileUpdate {
	ppu.mutation.ClearAddress()
	return ppu
}

// SetMobileNumber sets the "mobile_number" field.
func (ppu *ProviderProfileUpdate) SetMobileNumber(s string) *ProviderProfileUpdate {
	ppu.mutation.SetMobileNumber(s)
	return ppu
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableMobileNumber(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetMobileNumber(*s)
	}
	return ppu
}

// ClearMobileNumber clears the value of the "mobile_number" field.
func (ppu *ProviderProfileUpdate) ClearMobileNumber() *ProviderProfileUpdate {
	ppu.mutation.ClearMobileNumber()
	return ppu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (ppu *ProviderProfileUpdate) SetDateOfBirth(t time.Time) *ProviderProfileUpdate {
	ppu.mutation.SetDateOfBirth(t)
	return ppu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableDateOfBirth(t *time.Time) *ProviderProfileUpdate {
	if t != nil {
		ppu.SetDateOfBirth(*t)
	}
	return ppu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (ppu *ProviderProfileUpdate) ClearDateOfBirth() *ProviderProfileUpdate {
	ppu.mutation.ClearDateOfBirth()
	return ppu
}

// SetBusinessName sets the "business_name" field.
func (ppu *ProviderProfileUpdate) SetBusinessName(s string) *ProviderProfileUpdate {
	ppu.mutation.SetBusinessName(s)
	return ppu
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableBusinessName(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetBusinessName(*s)
	}
	return ppu
}

// ClearBusinessName clears the value of the "business_name" field.
func (ppu *ProviderProfileUpdate) ClearBusinessName() *ProviderProfileUpdate {
	ppu.mutation.ClearBusinessName()
	return ppu
}

// SetIdentityDocumentType sets the "identity_document_type" field.
func (ppu *ProviderProfileUpdate) SetIdentityDocumentType(pdt providerprofile.IdentityDocumentType) *ProviderProfileUpdate {
	ppu.mutation.SetIdentityDocumentType(pdt)
	return ppu
}

// SetNillableIdentityDocumentType sets the "identity_document_type" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableIdentityDocumentType(pdt *providerprofile.IdentityDocumentType) *ProviderProfileUpdate {
	if pdt != nil {
		ppu.SetIdentityDocumentType(*pdt)
	}
	return ppu
}

// ClearIdentityDocumentType clears the value of the "identity_document_type" field.
func (ppu *ProviderProfileUpdate) ClearIdentityDocumentType() *ProviderProfileUpdate {
	ppu.mutation.ClearIdentityDocumentType()
	return ppu
}

// SetIdentityDocument sets the "identity_document" field.
func (ppu *ProviderProfileUpdate) SetIdentityDocument(s string) *ProviderProfileUpdate {
	ppu.mutation.SetIdentityDocument(s)
	return ppu
}

// SetNillableIdentityDocument sets the "identity_document" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableIdentityDocument(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetIdentityDocument(*s)
	}
	return ppu
}

// ClearIdentityDocument clears the value of the "identity_document" field.
func (ppu *ProviderProfileUpdate) ClearIdentityDocument() *ProviderProfileUpdate {
	ppu.mutation.ClearIdentityDocument()
	return ppu
}

// SetBusinessDocument sets the "business_document" field.
func (ppu *ProviderProfileUpdate) SetBusinessDocument(s string) *ProviderProfileUpdate {
	ppu.mutation.SetBusinessDocument(s)
	return ppu
}

// SetNillableBusinessDocument sets the "business_document" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableBusinessDocument(s *string) *ProviderProfileUpdate {
	if s != nil {
		ppu.SetBusinessDocument(*s)
	}
	return ppu
}

// ClearBusinessDocument clears the value of the "business_document" field.
func (ppu *ProviderProfileUpdate) ClearBusinessDocument() *ProviderProfileUpdate {
	ppu.mutation.ClearBusinessDocument()
	return ppu
}

// SetIsKybVerified sets the "is_kyb_verified" field.
func (ppu *ProviderProfileUpdate) SetIsKybVerified(b bool) *ProviderProfileUpdate {
	ppu.mutation.SetIsKybVerified(b)
	return ppu
}

// SetNillableIsKybVerified sets the "is_kyb_verified" field if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableIsKybVerified(b *bool) *ProviderProfileUpdate {
	if b != nil {
		ppu.SetIsKybVerified(*b)
	}
	return ppu
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (ppu *ProviderProfileUpdate) SetAPIKeyID(id uuid.UUID) *ProviderProfileUpdate {
	ppu.mutation.SetAPIKeyID(id)
	return ppu
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableAPIKeyID(id *uuid.UUID) *ProviderProfileUpdate {
	if id != nil {
		ppu = ppu.SetAPIKeyID(*id)
	}
	return ppu
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (ppu *ProviderProfileUpdate) SetAPIKey(a *APIKey) *ProviderProfileUpdate {
	return ppu.SetAPIKeyID(a.ID)
}

// AddCurrencyIDs adds the "currencies" edge to the FiatCurrency entity by IDs.
func (ppu *ProviderProfileUpdate) AddCurrencyIDs(ids ...uuid.UUID) *ProviderProfileUpdate {
	ppu.mutation.AddCurrencyIDs(ids...)
	return ppu
}

// AddCurrencies adds the "currencies" edges to the FiatCurrency entity.
func (ppu *ProviderProfileUpdate) AddCurrencies(f ...*FiatCurrency) *ProviderProfileUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ppu.AddCurrencyIDs(ids...)
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (ppu *ProviderProfileUpdate) AddProvisionBucketIDs(ids ...int) *ProviderProfileUpdate {
	ppu.mutation.AddProvisionBucketIDs(ids...)
	return ppu
}

// AddProvisionBuckets adds the "provision_buckets" edges to the ProvisionBucket entity.
func (ppu *ProviderProfileUpdate) AddProvisionBuckets(p ...*ProvisionBucket) *ProviderProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddProvisionBucketIDs(ids...)
}

// AddOrderTokenIDs adds the "order_tokens" edge to the ProviderOrderToken entity by IDs.
func (ppu *ProviderProfileUpdate) AddOrderTokenIDs(ids ...int) *ProviderProfileUpdate {
	ppu.mutation.AddOrderTokenIDs(ids...)
	return ppu
}

// AddOrderTokens adds the "order_tokens" edges to the ProviderOrderToken entity.
func (ppu *ProviderProfileUpdate) AddOrderTokens(p ...*ProviderOrderToken) *ProviderProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddOrderTokenIDs(ids...)
}

// SetProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID.
func (ppu *ProviderProfileUpdate) SetProviderRatingID(id int) *ProviderProfileUpdate {
	ppu.mutation.SetProviderRatingID(id)
	return ppu
}

// SetNillableProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID if the given value is not nil.
func (ppu *ProviderProfileUpdate) SetNillableProviderRatingID(id *int) *ProviderProfileUpdate {
	if id != nil {
		ppu = ppu.SetProviderRatingID(*id)
	}
	return ppu
}

// SetProviderRating sets the "provider_rating" edge to the ProviderRating entity.
func (ppu *ProviderProfileUpdate) SetProviderRating(p *ProviderRating) *ProviderProfileUpdate {
	return ppu.SetProviderRatingID(p.ID)
}

// AddAssignedOrderIDs adds the "assigned_orders" edge to the LockPaymentOrder entity by IDs.
func (ppu *ProviderProfileUpdate) AddAssignedOrderIDs(ids ...uuid.UUID) *ProviderProfileUpdate {
	ppu.mutation.AddAssignedOrderIDs(ids...)
	return ppu
}

// AddAssignedOrders adds the "assigned_orders" edges to the LockPaymentOrder entity.
func (ppu *ProviderProfileUpdate) AddAssignedOrders(l ...*LockPaymentOrder) *ProviderProfileUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ppu.AddAssignedOrderIDs(ids...)
}

// Mutation returns the ProviderProfileMutation object of the builder.
func (ppu *ProviderProfileUpdate) Mutation() *ProviderProfileMutation {
	return ppu.mutation
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (ppu *ProviderProfileUpdate) ClearAPIKey() *ProviderProfileUpdate {
	ppu.mutation.ClearAPIKey()
	return ppu
}

// ClearCurrencies clears all "currencies" edges to the FiatCurrency entity.
func (ppu *ProviderProfileUpdate) ClearCurrencies() *ProviderProfileUpdate {
	ppu.mutation.ClearCurrencies()
	return ppu
}

// RemoveCurrencyIDs removes the "currencies" edge to FiatCurrency entities by IDs.
func (ppu *ProviderProfileUpdate) RemoveCurrencyIDs(ids ...uuid.UUID) *ProviderProfileUpdate {
	ppu.mutation.RemoveCurrencyIDs(ids...)
	return ppu
}

// RemoveCurrencies removes "currencies" edges to FiatCurrency entities.
func (ppu *ProviderProfileUpdate) RemoveCurrencies(f ...*FiatCurrency) *ProviderProfileUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ppu.RemoveCurrencyIDs(ids...)
}

// ClearProvisionBuckets clears all "provision_buckets" edges to the ProvisionBucket entity.
func (ppu *ProviderProfileUpdate) ClearProvisionBuckets() *ProviderProfileUpdate {
	ppu.mutation.ClearProvisionBuckets()
	return ppu
}

// RemoveProvisionBucketIDs removes the "provision_buckets" edge to ProvisionBucket entities by IDs.
func (ppu *ProviderProfileUpdate) RemoveProvisionBucketIDs(ids ...int) *ProviderProfileUpdate {
	ppu.mutation.RemoveProvisionBucketIDs(ids...)
	return ppu
}

// RemoveProvisionBuckets removes "provision_buckets" edges to ProvisionBucket entities.
func (ppu *ProviderProfileUpdate) RemoveProvisionBuckets(p ...*ProvisionBucket) *ProviderProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveProvisionBucketIDs(ids...)
}

// ClearOrderTokens clears all "order_tokens" edges to the ProviderOrderToken entity.
func (ppu *ProviderProfileUpdate) ClearOrderTokens() *ProviderProfileUpdate {
	ppu.mutation.ClearOrderTokens()
	return ppu
}

// RemoveOrderTokenIDs removes the "order_tokens" edge to ProviderOrderToken entities by IDs.
func (ppu *ProviderProfileUpdate) RemoveOrderTokenIDs(ids ...int) *ProviderProfileUpdate {
	ppu.mutation.RemoveOrderTokenIDs(ids...)
	return ppu
}

// RemoveOrderTokens removes "order_tokens" edges to ProviderOrderToken entities.
func (ppu *ProviderProfileUpdate) RemoveOrderTokens(p ...*ProviderOrderToken) *ProviderProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveOrderTokenIDs(ids...)
}

// ClearProviderRating clears the "provider_rating" edge to the ProviderRating entity.
func (ppu *ProviderProfileUpdate) ClearProviderRating() *ProviderProfileUpdate {
	ppu.mutation.ClearProviderRating()
	return ppu
}

// ClearAssignedOrders clears all "assigned_orders" edges to the LockPaymentOrder entity.
func (ppu *ProviderProfileUpdate) ClearAssignedOrders() *ProviderProfileUpdate {
	ppu.mutation.ClearAssignedOrders()
	return ppu
}

// RemoveAssignedOrderIDs removes the "assigned_orders" edge to LockPaymentOrder entities by IDs.
func (ppu *ProviderProfileUpdate) RemoveAssignedOrderIDs(ids ...uuid.UUID) *ProviderProfileUpdate {
	ppu.mutation.RemoveAssignedOrderIDs(ids...)
	return ppu
}

// RemoveAssignedOrders removes "assigned_orders" edges to LockPaymentOrder entities.
func (ppu *ProviderProfileUpdate) RemoveAssignedOrders(l ...*LockPaymentOrder) *ProviderProfileUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ppu.RemoveAssignedOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProviderProfileUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProviderProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProviderProfileUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProviderProfileUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *ProviderProfileUpdate) defaults() {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		v := providerprofile.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *ProviderProfileUpdate) check() error {
	if v, ok := ppu.mutation.TradingName(); ok {
		if err := providerprofile.TradingNameValidator(v); err != nil {
			return &ValidationError{Name: "trading_name", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.trading_name": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.ProvisionMode(); ok {
		if err := providerprofile.ProvisionModeValidator(v); err != nil {
			return &ValidationError{Name: "provision_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.provision_mode": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.VisibilityMode(); ok {
		if err := providerprofile.VisibilityModeValidator(v); err != nil {
			return &ValidationError{Name: "visibility_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.visibility_mode": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.IdentityDocumentType(); ok {
		if err := providerprofile.IdentityDocumentTypeValidator(v); err != nil {
			return &ValidationError{Name: "identity_document_type", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.identity_document_type": %w`, err)}
		}
	}
	if ppu.mutation.UserCleared() && len(ppu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderProfile.user"`)
	}
	return nil
}

func (ppu *ProviderProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerprofile.Table, providerprofile.Columns, sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.TradingName(); ok {
		_spec.SetField(providerprofile.FieldTradingName, field.TypeString, value)
	}
	if ppu.mutation.TradingNameCleared() {
		_spec.ClearField(providerprofile.FieldTradingName, field.TypeString)
	}
	if value, ok := ppu.mutation.HostIdentifier(); ok {
		_spec.SetField(providerprofile.FieldHostIdentifier, field.TypeString, value)
	}
	if ppu.mutation.HostIdentifierCleared() {
		_spec.ClearField(providerprofile.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := ppu.mutation.ProvisionMode(); ok {
		_spec.SetField(providerprofile.FieldProvisionMode, field.TypeEnum, value)
	}
	if value, ok := ppu.mutation.IsActive(); ok {
		_spec.SetField(providerprofile.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ppu.mutation.IsAvailable(); ok {
		_spec.SetField(providerprofile.FieldIsAvailable, field.TypeBool, value)
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(providerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.VisibilityMode(); ok {
		_spec.SetField(providerprofile.FieldVisibilityMode, field.TypeEnum, value)
	}
	if value, ok := ppu.mutation.Address(); ok {
		_spec.SetField(providerprofile.FieldAddress, field.TypeString, value)
	}
	if ppu.mutation.AddressCleared() {
		_spec.ClearField(providerprofile.FieldAddress, field.TypeString)
	}
	if value, ok := ppu.mutation.MobileNumber(); ok {
		_spec.SetField(providerprofile.FieldMobileNumber, field.TypeString, value)
	}
	if ppu.mutation.MobileNumberCleared() {
		_spec.ClearField(providerprofile.FieldMobileNumber, field.TypeString)
	}
	if value, ok := ppu.mutation.DateOfBirth(); ok {
		_spec.SetField(providerprofile.FieldDateOfBirth, field.TypeTime, value)
	}
	if ppu.mutation.DateOfBirthCleared() {
		_spec.ClearField(providerprofile.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := ppu.mutation.BusinessName(); ok {
		_spec.SetField(providerprofile.FieldBusinessName, field.TypeString, value)
	}
	if ppu.mutation.BusinessNameCleared() {
		_spec.ClearField(providerprofile.FieldBusinessName, field.TypeString)
	}
	if value, ok := ppu.mutation.IdentityDocumentType(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocumentType, field.TypeEnum, value)
	}
	if ppu.mutation.IdentityDocumentTypeCleared() {
		_spec.ClearField(providerprofile.FieldIdentityDocumentType, field.TypeEnum)
	}
	if value, ok := ppu.mutation.IdentityDocument(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocument, field.TypeString, value)
	}
	if ppu.mutation.IdentityDocumentCleared() {
		_spec.ClearField(providerprofile.FieldIdentityDocument, field.TypeString)
	}
	if value, ok := ppu.mutation.BusinessDocument(); ok {
		_spec.SetField(providerprofile.FieldBusinessDocument, field.TypeString, value)
	}
	if ppu.mutation.BusinessDocumentCleared() {
		_spec.ClearField(providerprofile.FieldBusinessDocument, field.TypeString)
	}
	if value, ok := ppu.mutation.IsKybVerified(); ok {
		_spec.SetField(providerprofile.FieldIsKybVerified, field.TypeBool, value)
	}
	if ppu.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.APIKeyTable,
			Columns: []string{providerprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.APIKeyTable,
			Columns: []string{providerprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.CurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedCurrenciesIDs(); len(nodes) > 0 && !ppu.mutation.CurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.CurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProvisionBucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedProvisionBucketsIDs(); len(nodes) > 0 && !ppu.mutation.ProvisionBucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProvisionBucketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.OrderTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedOrderTokensIDs(); len(nodes) > 0 && !ppu.mutation.OrderTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.OrderTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProviderRatingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.ProviderRatingTable,
			Columns: []string{providerprofile.ProviderRatingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerrating.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProviderRatingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.ProviderRatingTable,
			Columns: []string{providerprofile.ProviderRatingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerrating.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.AssignedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedAssignedOrdersIDs(); len(nodes) > 0 && !ppu.mutation.AssignedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.AssignedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// ProviderProfileUpdateOne is the builder for updating a single ProviderProfile entity.
type ProviderProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderProfileMutation
}

// SetTradingName sets the "trading_name" field.
func (ppuo *ProviderProfileUpdateOne) SetTradingName(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetTradingName(s)
	return ppuo
}

// SetNillableTradingName sets the "trading_name" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableTradingName(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetTradingName(*s)
	}
	return ppuo
}

// ClearTradingName clears the value of the "trading_name" field.
func (ppuo *ProviderProfileUpdateOne) ClearTradingName() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearTradingName()
	return ppuo
}

// SetHostIdentifier sets the "host_identifier" field.
func (ppuo *ProviderProfileUpdateOne) SetHostIdentifier(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetHostIdentifier(s)
	return ppuo
}

// SetNillableHostIdentifier sets the "host_identifier" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableHostIdentifier(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetHostIdentifier(*s)
	}
	return ppuo
}

// ClearHostIdentifier clears the value of the "host_identifier" field.
func (ppuo *ProviderProfileUpdateOne) ClearHostIdentifier() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearHostIdentifier()
	return ppuo
}

// SetProvisionMode sets the "provision_mode" field.
func (ppuo *ProviderProfileUpdateOne) SetProvisionMode(pm providerprofile.ProvisionMode) *ProviderProfileUpdateOne {
	ppuo.mutation.SetProvisionMode(pm)
	return ppuo
}

// SetNillableProvisionMode sets the "provision_mode" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableProvisionMode(pm *providerprofile.ProvisionMode) *ProviderProfileUpdateOne {
	if pm != nil {
		ppuo.SetProvisionMode(*pm)
	}
	return ppuo
}

// SetIsActive sets the "is_active" field.
func (ppuo *ProviderProfileUpdateOne) SetIsActive(b bool) *ProviderProfileUpdateOne {
	ppuo.mutation.SetIsActive(b)
	return ppuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableIsActive(b *bool) *ProviderProfileUpdateOne {
	if b != nil {
		ppuo.SetIsActive(*b)
	}
	return ppuo
}

// SetIsAvailable sets the "is_available" field.
func (ppuo *ProviderProfileUpdateOne) SetIsAvailable(b bool) *ProviderProfileUpdateOne {
	ppuo.mutation.SetIsAvailable(b)
	return ppuo
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableIsAvailable(b *bool) *ProviderProfileUpdateOne {
	if b != nil {
		ppuo.SetIsAvailable(*b)
	}
	return ppuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *ProviderProfileUpdateOne) SetUpdatedAt(t time.Time) *ProviderProfileUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetVisibilityMode sets the "visibility_mode" field.
func (ppuo *ProviderProfileUpdateOne) SetVisibilityMode(pm providerprofile.VisibilityMode) *ProviderProfileUpdateOne {
	ppuo.mutation.SetVisibilityMode(pm)
	return ppuo
}

// SetNillableVisibilityMode sets the "visibility_mode" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableVisibilityMode(pm *providerprofile.VisibilityMode) *ProviderProfileUpdateOne {
	if pm != nil {
		ppuo.SetVisibilityMode(*pm)
	}
	return ppuo
}

// SetAddress sets the "address" field.
func (ppuo *ProviderProfileUpdateOne) SetAddress(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetAddress(s)
	return ppuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableAddress(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetAddress(*s)
	}
	return ppuo
}

// ClearAddress clears the value of the "address" field.
func (ppuo *ProviderProfileUpdateOne) ClearAddress() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearAddress()
	return ppuo
}

// SetMobileNumber sets the "mobile_number" field.
func (ppuo *ProviderProfileUpdateOne) SetMobileNumber(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetMobileNumber(s)
	return ppuo
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableMobileNumber(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetMobileNumber(*s)
	}
	return ppuo
}

// ClearMobileNumber clears the value of the "mobile_number" field.
func (ppuo *ProviderProfileUpdateOne) ClearMobileNumber() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearMobileNumber()
	return ppuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (ppuo *ProviderProfileUpdateOne) SetDateOfBirth(t time.Time) *ProviderProfileUpdateOne {
	ppuo.mutation.SetDateOfBirth(t)
	return ppuo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableDateOfBirth(t *time.Time) *ProviderProfileUpdateOne {
	if t != nil {
		ppuo.SetDateOfBirth(*t)
	}
	return ppuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (ppuo *ProviderProfileUpdateOne) ClearDateOfBirth() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearDateOfBirth()
	return ppuo
}

// SetBusinessName sets the "business_name" field.
func (ppuo *ProviderProfileUpdateOne) SetBusinessName(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetBusinessName(s)
	return ppuo
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableBusinessName(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetBusinessName(*s)
	}
	return ppuo
}

// ClearBusinessName clears the value of the "business_name" field.
func (ppuo *ProviderProfileUpdateOne) ClearBusinessName() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearBusinessName()
	return ppuo
}

// SetIdentityDocumentType sets the "identity_document_type" field.
func (ppuo *ProviderProfileUpdateOne) SetIdentityDocumentType(pdt providerprofile.IdentityDocumentType) *ProviderProfileUpdateOne {
	ppuo.mutation.SetIdentityDocumentType(pdt)
	return ppuo
}

// SetNillableIdentityDocumentType sets the "identity_document_type" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableIdentityDocumentType(pdt *providerprofile.IdentityDocumentType) *ProviderProfileUpdateOne {
	if pdt != nil {
		ppuo.SetIdentityDocumentType(*pdt)
	}
	return ppuo
}

// ClearIdentityDocumentType clears the value of the "identity_document_type" field.
func (ppuo *ProviderProfileUpdateOne) ClearIdentityDocumentType() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearIdentityDocumentType()
	return ppuo
}

// SetIdentityDocument sets the "identity_document" field.
func (ppuo *ProviderProfileUpdateOne) SetIdentityDocument(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetIdentityDocument(s)
	return ppuo
}

// SetNillableIdentityDocument sets the "identity_document" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableIdentityDocument(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetIdentityDocument(*s)
	}
	return ppuo
}

// ClearIdentityDocument clears the value of the "identity_document" field.
func (ppuo *ProviderProfileUpdateOne) ClearIdentityDocument() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearIdentityDocument()
	return ppuo
}

// SetBusinessDocument sets the "business_document" field.
func (ppuo *ProviderProfileUpdateOne) SetBusinessDocument(s string) *ProviderProfileUpdateOne {
	ppuo.mutation.SetBusinessDocument(s)
	return ppuo
}

// SetNillableBusinessDocument sets the "business_document" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableBusinessDocument(s *string) *ProviderProfileUpdateOne {
	if s != nil {
		ppuo.SetBusinessDocument(*s)
	}
	return ppuo
}

// ClearBusinessDocument clears the value of the "business_document" field.
func (ppuo *ProviderProfileUpdateOne) ClearBusinessDocument() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearBusinessDocument()
	return ppuo
}

// SetIsKybVerified sets the "is_kyb_verified" field.
func (ppuo *ProviderProfileUpdateOne) SetIsKybVerified(b bool) *ProviderProfileUpdateOne {
	ppuo.mutation.SetIsKybVerified(b)
	return ppuo
}

// SetNillableIsKybVerified sets the "is_kyb_verified" field if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableIsKybVerified(b *bool) *ProviderProfileUpdateOne {
	if b != nil {
		ppuo.SetIsKybVerified(*b)
	}
	return ppuo
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (ppuo *ProviderProfileUpdateOne) SetAPIKeyID(id uuid.UUID) *ProviderProfileUpdateOne {
	ppuo.mutation.SetAPIKeyID(id)
	return ppuo
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableAPIKeyID(id *uuid.UUID) *ProviderProfileUpdateOne {
	if id != nil {
		ppuo = ppuo.SetAPIKeyID(*id)
	}
	return ppuo
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (ppuo *ProviderProfileUpdateOne) SetAPIKey(a *APIKey) *ProviderProfileUpdateOne {
	return ppuo.SetAPIKeyID(a.ID)
}

// AddCurrencyIDs adds the "currencies" edge to the FiatCurrency entity by IDs.
func (ppuo *ProviderProfileUpdateOne) AddCurrencyIDs(ids ...uuid.UUID) *ProviderProfileUpdateOne {
	ppuo.mutation.AddCurrencyIDs(ids...)
	return ppuo
}

// AddCurrencies adds the "currencies" edges to the FiatCurrency entity.
func (ppuo *ProviderProfileUpdateOne) AddCurrencies(f ...*FiatCurrency) *ProviderProfileUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ppuo.AddCurrencyIDs(ids...)
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (ppuo *ProviderProfileUpdateOne) AddProvisionBucketIDs(ids ...int) *ProviderProfileUpdateOne {
	ppuo.mutation.AddProvisionBucketIDs(ids...)
	return ppuo
}

// AddProvisionBuckets adds the "provision_buckets" edges to the ProvisionBucket entity.
func (ppuo *ProviderProfileUpdateOne) AddProvisionBuckets(p ...*ProvisionBucket) *ProviderProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddProvisionBucketIDs(ids...)
}

// AddOrderTokenIDs adds the "order_tokens" edge to the ProviderOrderToken entity by IDs.
func (ppuo *ProviderProfileUpdateOne) AddOrderTokenIDs(ids ...int) *ProviderProfileUpdateOne {
	ppuo.mutation.AddOrderTokenIDs(ids...)
	return ppuo
}

// AddOrderTokens adds the "order_tokens" edges to the ProviderOrderToken entity.
func (ppuo *ProviderProfileUpdateOne) AddOrderTokens(p ...*ProviderOrderToken) *ProviderProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddOrderTokenIDs(ids...)
}

// SetProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID.
func (ppuo *ProviderProfileUpdateOne) SetProviderRatingID(id int) *ProviderProfileUpdateOne {
	ppuo.mutation.SetProviderRatingID(id)
	return ppuo
}

// SetNillableProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID if the given value is not nil.
func (ppuo *ProviderProfileUpdateOne) SetNillableProviderRatingID(id *int) *ProviderProfileUpdateOne {
	if id != nil {
		ppuo = ppuo.SetProviderRatingID(*id)
	}
	return ppuo
}

// SetProviderRating sets the "provider_rating" edge to the ProviderRating entity.
func (ppuo *ProviderProfileUpdateOne) SetProviderRating(p *ProviderRating) *ProviderProfileUpdateOne {
	return ppuo.SetProviderRatingID(p.ID)
}

// AddAssignedOrderIDs adds the "assigned_orders" edge to the LockPaymentOrder entity by IDs.
func (ppuo *ProviderProfileUpdateOne) AddAssignedOrderIDs(ids ...uuid.UUID) *ProviderProfileUpdateOne {
	ppuo.mutation.AddAssignedOrderIDs(ids...)
	return ppuo
}

// AddAssignedOrders adds the "assigned_orders" edges to the LockPaymentOrder entity.
func (ppuo *ProviderProfileUpdateOne) AddAssignedOrders(l ...*LockPaymentOrder) *ProviderProfileUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ppuo.AddAssignedOrderIDs(ids...)
}

// Mutation returns the ProviderProfileMutation object of the builder.
func (ppuo *ProviderProfileUpdateOne) Mutation() *ProviderProfileMutation {
	return ppuo.mutation
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (ppuo *ProviderProfileUpdateOne) ClearAPIKey() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearAPIKey()
	return ppuo
}

// ClearCurrencies clears all "currencies" edges to the FiatCurrency entity.
func (ppuo *ProviderProfileUpdateOne) ClearCurrencies() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearCurrencies()
	return ppuo
}

// RemoveCurrencyIDs removes the "currencies" edge to FiatCurrency entities by IDs.
func (ppuo *ProviderProfileUpdateOne) RemoveCurrencyIDs(ids ...uuid.UUID) *ProviderProfileUpdateOne {
	ppuo.mutation.RemoveCurrencyIDs(ids...)
	return ppuo
}

// RemoveCurrencies removes "currencies" edges to FiatCurrency entities.
func (ppuo *ProviderProfileUpdateOne) RemoveCurrencies(f ...*FiatCurrency) *ProviderProfileUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ppuo.RemoveCurrencyIDs(ids...)
}

// ClearProvisionBuckets clears all "provision_buckets" edges to the ProvisionBucket entity.
func (ppuo *ProviderProfileUpdateOne) ClearProvisionBuckets() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearProvisionBuckets()
	return ppuo
}

// RemoveProvisionBucketIDs removes the "provision_buckets" edge to ProvisionBucket entities by IDs.
func (ppuo *ProviderProfileUpdateOne) RemoveProvisionBucketIDs(ids ...int) *ProviderProfileUpdateOne {
	ppuo.mutation.RemoveProvisionBucketIDs(ids...)
	return ppuo
}

// RemoveProvisionBuckets removes "provision_buckets" edges to ProvisionBucket entities.
func (ppuo *ProviderProfileUpdateOne) RemoveProvisionBuckets(p ...*ProvisionBucket) *ProviderProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveProvisionBucketIDs(ids...)
}

// ClearOrderTokens clears all "order_tokens" edges to the ProviderOrderToken entity.
func (ppuo *ProviderProfileUpdateOne) ClearOrderTokens() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearOrderTokens()
	return ppuo
}

// RemoveOrderTokenIDs removes the "order_tokens" edge to ProviderOrderToken entities by IDs.
func (ppuo *ProviderProfileUpdateOne) RemoveOrderTokenIDs(ids ...int) *ProviderProfileUpdateOne {
	ppuo.mutation.RemoveOrderTokenIDs(ids...)
	return ppuo
}

// RemoveOrderTokens removes "order_tokens" edges to ProviderOrderToken entities.
func (ppuo *ProviderProfileUpdateOne) RemoveOrderTokens(p ...*ProviderOrderToken) *ProviderProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveOrderTokenIDs(ids...)
}

// ClearProviderRating clears the "provider_rating" edge to the ProviderRating entity.
func (ppuo *ProviderProfileUpdateOne) ClearProviderRating() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearProviderRating()
	return ppuo
}

// ClearAssignedOrders clears all "assigned_orders" edges to the LockPaymentOrder entity.
func (ppuo *ProviderProfileUpdateOne) ClearAssignedOrders() *ProviderProfileUpdateOne {
	ppuo.mutation.ClearAssignedOrders()
	return ppuo
}

// RemoveAssignedOrderIDs removes the "assigned_orders" edge to LockPaymentOrder entities by IDs.
func (ppuo *ProviderProfileUpdateOne) RemoveAssignedOrderIDs(ids ...uuid.UUID) *ProviderProfileUpdateOne {
	ppuo.mutation.RemoveAssignedOrderIDs(ids...)
	return ppuo
}

// RemoveAssignedOrders removes "assigned_orders" edges to LockPaymentOrder entities.
func (ppuo *ProviderProfileUpdateOne) RemoveAssignedOrders(l ...*LockPaymentOrder) *ProviderProfileUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ppuo.RemoveAssignedOrderIDs(ids...)
}

// Where appends a list predicates to the ProviderProfileUpdate builder.
func (ppuo *ProviderProfileUpdateOne) Where(ps ...predicate.ProviderProfile) *ProviderProfileUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProviderProfileUpdateOne) Select(field string, fields ...string) *ProviderProfileUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProviderProfile entity.
func (ppuo *ProviderProfileUpdateOne) Save(ctx context.Context) (*ProviderProfile, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProviderProfileUpdateOne) SaveX(ctx context.Context) *ProviderProfile {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProviderProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProviderProfileUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *ProviderProfileUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		v := providerprofile.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *ProviderProfileUpdateOne) check() error {
	if v, ok := ppuo.mutation.TradingName(); ok {
		if err := providerprofile.TradingNameValidator(v); err != nil {
			return &ValidationError{Name: "trading_name", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.trading_name": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.ProvisionMode(); ok {
		if err := providerprofile.ProvisionModeValidator(v); err != nil {
			return &ValidationError{Name: "provision_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.provision_mode": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.VisibilityMode(); ok {
		if err := providerprofile.VisibilityModeValidator(v); err != nil {
			return &ValidationError{Name: "visibility_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.visibility_mode": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.IdentityDocumentType(); ok {
		if err := providerprofile.IdentityDocumentTypeValidator(v); err != nil {
			return &ValidationError{Name: "identity_document_type", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.identity_document_type": %w`, err)}
		}
	}
	if ppuo.mutation.UserCleared() && len(ppuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderProfile.user"`)
	}
	return nil
}

func (ppuo *ProviderProfileUpdateOne) sqlSave(ctx context.Context) (_node *ProviderProfile, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerprofile.Table, providerprofile.Columns, sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerprofile.FieldID)
		for _, f := range fields {
			if !providerprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.TradingName(); ok {
		_spec.SetField(providerprofile.FieldTradingName, field.TypeString, value)
	}
	if ppuo.mutation.TradingNameCleared() {
		_spec.ClearField(providerprofile.FieldTradingName, field.TypeString)
	}
	if value, ok := ppuo.mutation.HostIdentifier(); ok {
		_spec.SetField(providerprofile.FieldHostIdentifier, field.TypeString, value)
	}
	if ppuo.mutation.HostIdentifierCleared() {
		_spec.ClearField(providerprofile.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := ppuo.mutation.ProvisionMode(); ok {
		_spec.SetField(providerprofile.FieldProvisionMode, field.TypeEnum, value)
	}
	if value, ok := ppuo.mutation.IsActive(); ok {
		_spec.SetField(providerprofile.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ppuo.mutation.IsAvailable(); ok {
		_spec.SetField(providerprofile.FieldIsAvailable, field.TypeBool, value)
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(providerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.VisibilityMode(); ok {
		_spec.SetField(providerprofile.FieldVisibilityMode, field.TypeEnum, value)
	}
	if value, ok := ppuo.mutation.Address(); ok {
		_spec.SetField(providerprofile.FieldAddress, field.TypeString, value)
	}
	if ppuo.mutation.AddressCleared() {
		_spec.ClearField(providerprofile.FieldAddress, field.TypeString)
	}
	if value, ok := ppuo.mutation.MobileNumber(); ok {
		_spec.SetField(providerprofile.FieldMobileNumber, field.TypeString, value)
	}
	if ppuo.mutation.MobileNumberCleared() {
		_spec.ClearField(providerprofile.FieldMobileNumber, field.TypeString)
	}
	if value, ok := ppuo.mutation.DateOfBirth(); ok {
		_spec.SetField(providerprofile.FieldDateOfBirth, field.TypeTime, value)
	}
	if ppuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(providerprofile.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := ppuo.mutation.BusinessName(); ok {
		_spec.SetField(providerprofile.FieldBusinessName, field.TypeString, value)
	}
	if ppuo.mutation.BusinessNameCleared() {
		_spec.ClearField(providerprofile.FieldBusinessName, field.TypeString)
	}
	if value, ok := ppuo.mutation.IdentityDocumentType(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocumentType, field.TypeEnum, value)
	}
	if ppuo.mutation.IdentityDocumentTypeCleared() {
		_spec.ClearField(providerprofile.FieldIdentityDocumentType, field.TypeEnum)
	}
	if value, ok := ppuo.mutation.IdentityDocument(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocument, field.TypeString, value)
	}
	if ppuo.mutation.IdentityDocumentCleared() {
		_spec.ClearField(providerprofile.FieldIdentityDocument, field.TypeString)
	}
	if value, ok := ppuo.mutation.BusinessDocument(); ok {
		_spec.SetField(providerprofile.FieldBusinessDocument, field.TypeString, value)
	}
	if ppuo.mutation.BusinessDocumentCleared() {
		_spec.ClearField(providerprofile.FieldBusinessDocument, field.TypeString)
	}
	if value, ok := ppuo.mutation.IsKybVerified(); ok {
		_spec.SetField(providerprofile.FieldIsKybVerified, field.TypeBool, value)
	}
	if ppuo.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.APIKeyTable,
			Columns: []string{providerprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.APIKeyTable,
			Columns: []string{providerprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.CurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedCurrenciesIDs(); len(nodes) > 0 && !ppuo.mutation.CurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.CurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.CurrenciesTable,
			Columns: providerprofile.CurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProvisionBucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedProvisionBucketsIDs(); len(nodes) > 0 && !ppuo.mutation.ProvisionBucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProvisionBucketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.OrderTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedOrderTokensIDs(); len(nodes) > 0 && !ppuo.mutation.OrderTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.OrderTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProviderRatingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.ProviderRatingTable,
			Columns: []string{providerprofile.ProviderRatingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerrating.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProviderRatingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.ProviderRatingTable,
			Columns: []string{providerprofile.ProviderRatingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerrating.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.AssignedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedAssignedOrdersIDs(); len(nodes) > 0 && !ppuo.mutation.AssignedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.AssignedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderProfile{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
