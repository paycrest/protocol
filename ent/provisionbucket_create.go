// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/shopspring/decimal"
)

// ProvisionBucketCreate is the builder for creating a ProvisionBucket entity.
type ProvisionBucketCreate struct {
	config
	mutation *ProvisionBucketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMinAmount sets the "min_amount" field.
func (pbc *ProvisionBucketCreate) SetMinAmount(d decimal.Decimal) *ProvisionBucketCreate {
	pbc.mutation.SetMinAmount(d)
	return pbc
}

// SetMaxAmount sets the "max_amount" field.
func (pbc *ProvisionBucketCreate) SetMaxAmount(d decimal.Decimal) *ProvisionBucketCreate {
	pbc.mutation.SetMaxAmount(d)
	return pbc
}

// SetCreatedAt sets the "created_at" field.
func (pbc *ProvisionBucketCreate) SetCreatedAt(t time.Time) *ProvisionBucketCreate {
	pbc.mutation.SetCreatedAt(t)
	return pbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbc *ProvisionBucketCreate) SetNillableCreatedAt(t *time.Time) *ProvisionBucketCreate {
	if t != nil {
		pbc.SetCreatedAt(*t)
	}
	return pbc
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pbc *ProvisionBucketCreate) SetCurrencyID(id uuid.UUID) *ProvisionBucketCreate {
	pbc.mutation.SetCurrencyID(id)
	return pbc
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pbc *ProvisionBucketCreate) SetCurrency(f *FiatCurrency) *ProvisionBucketCreate {
	return pbc.SetCurrencyID(f.ID)
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (pbc *ProvisionBucketCreate) AddLockPaymentOrderIDs(ids ...uuid.UUID) *ProvisionBucketCreate {
	pbc.mutation.AddLockPaymentOrderIDs(ids...)
	return pbc
}

// AddLockPaymentOrders adds the "lock_payment_orders" edges to the LockPaymentOrder entity.
func (pbc *ProvisionBucketCreate) AddLockPaymentOrders(l ...*LockPaymentOrder) *ProvisionBucketCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pbc.AddLockPaymentOrderIDs(ids...)
}

// AddProviderProfileIDs adds the "provider_profiles" edge to the ProviderProfile entity by IDs.
func (pbc *ProvisionBucketCreate) AddProviderProfileIDs(ids ...string) *ProvisionBucketCreate {
	pbc.mutation.AddProviderProfileIDs(ids...)
	return pbc
}

// AddProviderProfiles adds the "provider_profiles" edges to the ProviderProfile entity.
func (pbc *ProvisionBucketCreate) AddProviderProfiles(p ...*ProviderProfile) *ProvisionBucketCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbc.AddProviderProfileIDs(ids...)
}

// Mutation returns the ProvisionBucketMutation object of the builder.
func (pbc *ProvisionBucketCreate) Mutation() *ProvisionBucketMutation {
	return pbc.mutation
}

// Save creates the ProvisionBucket in the database.
func (pbc *ProvisionBucketCreate) Save(ctx context.Context) (*ProvisionBucket, error) {
	pbc.defaults()
	return withHooks(ctx, pbc.sqlSave, pbc.mutation, pbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pbc *ProvisionBucketCreate) SaveX(ctx context.Context) *ProvisionBucket {
	v, err := pbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbc *ProvisionBucketCreate) Exec(ctx context.Context) error {
	_, err := pbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbc *ProvisionBucketCreate) ExecX(ctx context.Context) {
	if err := pbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbc *ProvisionBucketCreate) defaults() {
	if _, ok := pbc.mutation.CreatedAt(); !ok {
		v := provisionbucket.DefaultCreatedAt()
		pbc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbc *ProvisionBucketCreate) check() error {
	if _, ok := pbc.mutation.MinAmount(); !ok {
		return &ValidationError{Name: "min_amount", err: errors.New(`ent: missing required field "ProvisionBucket.min_amount"`)}
	}
	if _, ok := pbc.mutation.MaxAmount(); !ok {
		return &ValidationError{Name: "max_amount", err: errors.New(`ent: missing required field "ProvisionBucket.max_amount"`)}
	}
	if _, ok := pbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProvisionBucket.created_at"`)}
	}
	if len(pbc.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "ProvisionBucket.currency"`)}
	}
	return nil
}

func (pbc *ProvisionBucketCreate) sqlSave(ctx context.Context) (*ProvisionBucket, error) {
	if err := pbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pbc.mutation.id = &_node.ID
	pbc.mutation.done = true
	return _node, nil
}

func (pbc *ProvisionBucketCreate) createSpec() (*ProvisionBucket, *sqlgraph.CreateSpec) {
	var (
		_node = &ProvisionBucket{config: pbc.config}
		_spec = sqlgraph.NewCreateSpec(provisionbucket.Table, sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pbc.conflict
	if value, ok := pbc.mutation.MinAmount(); ok {
		_spec.SetField(provisionbucket.FieldMinAmount, field.TypeFloat64, value)
		_node.MinAmount = value
	}
	if value, ok := pbc.mutation.MaxAmount(); ok {
		_spec.SetField(provisionbucket.FieldMaxAmount, field.TypeFloat64, value)
		_node.MaxAmount = value
	}
	if value, ok := pbc.mutation.CreatedAt(); ok {
		_spec.SetField(provisionbucket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pbc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provisionbucket.CurrencyTable,
			Columns: []string{provisionbucket.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fiat_currency_provision_buckets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pbc.mutation.LockPaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pbc.mutation.ProviderProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProvisionBucket.Create().
//		SetMinAmount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProvisionBucketUpsert) {
//			SetMinAmount(v+v).
//		}).
//		Exec(ctx)
func (pbc *ProvisionBucketCreate) OnConflict(opts ...sql.ConflictOption) *ProvisionBucketUpsertOne {
	pbc.conflict = opts
	return &ProvisionBucketUpsertOne{
		create: pbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pbc *ProvisionBucketCreate) OnConflictColumns(columns ...string) *ProvisionBucketUpsertOne {
	pbc.conflict = append(pbc.conflict, sql.ConflictColumns(columns...))
	return &ProvisionBucketUpsertOne{
		create: pbc,
	}
}

type (
	// ProvisionBucketUpsertOne is the builder for "upsert"-ing
	//  one ProvisionBucket node.
	ProvisionBucketUpsertOne struct {
		create *ProvisionBucketCreate
	}

	// ProvisionBucketUpsert is the "OnConflict" setter.
	ProvisionBucketUpsert struct {
		*sql.UpdateSet
	}
)

// SetMinAmount sets the "min_amount" field.
func (u *ProvisionBucketUpsert) SetMinAmount(v decimal.Decimal) *ProvisionBucketUpsert {
	u.Set(provisionbucket.FieldMinAmount, v)
	return u
}

// UpdateMinAmount sets the "min_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsert) UpdateMinAmount() *ProvisionBucketUpsert {
	u.SetExcluded(provisionbucket.FieldMinAmount)
	return u
}

// AddMinAmount adds v to the "min_amount" field.
func (u *ProvisionBucketUpsert) AddMinAmount(v decimal.Decimal) *ProvisionBucketUpsert {
	u.Add(provisionbucket.FieldMinAmount, v)
	return u
}

// SetMaxAmount sets the "max_amount" field.
func (u *ProvisionBucketUpsert) SetMaxAmount(v decimal.Decimal) *ProvisionBucketUpsert {
	u.Set(provisionbucket.FieldMaxAmount, v)
	return u
}

// UpdateMaxAmount sets the "max_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsert) UpdateMaxAmount() *ProvisionBucketUpsert {
	u.SetExcluded(provisionbucket.FieldMaxAmount)
	return u
}

// AddMaxAmount adds v to the "max_amount" field.
func (u *ProvisionBucketUpsert) AddMaxAmount(v decimal.Decimal) *ProvisionBucketUpsert {
	u.Add(provisionbucket.FieldMaxAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProvisionBucketUpsertOne) UpdateNewValues() *ProvisionBucketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(provisionbucket.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProvisionBucketUpsertOne) Ignore() *ProvisionBucketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProvisionBucketUpsertOne) DoNothing() *ProvisionBucketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProvisionBucketCreate.OnConflict
// documentation for more info.
func (u *ProvisionBucketUpsertOne) Update(set func(*ProvisionBucketUpsert)) *ProvisionBucketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProvisionBucketUpsert{UpdateSet: update})
	}))
	return u
}

// SetMinAmount sets the "min_amount" field.
func (u *ProvisionBucketUpsertOne) SetMinAmount(v decimal.Decimal) *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.SetMinAmount(v)
	})
}

// AddMinAmount adds v to the "min_amount" field.
func (u *ProvisionBucketUpsertOne) AddMinAmount(v decimal.Decimal) *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.AddMinAmount(v)
	})
}

// UpdateMinAmount sets the "min_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsertOne) UpdateMinAmount() *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.UpdateMinAmount()
	})
}

// SetMaxAmount sets the "max_amount" field.
func (u *ProvisionBucketUpsertOne) SetMaxAmount(v decimal.Decimal) *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.SetMaxAmount(v)
	})
}

// AddMaxAmount adds v to the "max_amount" field.
func (u *ProvisionBucketUpsertOne) AddMaxAmount(v decimal.Decimal) *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.AddMaxAmount(v)
	})
}

// UpdateMaxAmount sets the "max_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsertOne) UpdateMaxAmount() *ProvisionBucketUpsertOne {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.UpdateMaxAmount()
	})
}

// Exec executes the query.
func (u *ProvisionBucketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProvisionBucketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProvisionBucketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProvisionBucketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProvisionBucketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProvisionBucketCreateBulk is the builder for creating many ProvisionBucket entities in bulk.
type ProvisionBucketCreateBulk struct {
	config
	err      error
	builders []*ProvisionBucketCreate
	conflict []sql.ConflictOption
}

// Save creates the ProvisionBucket entities in the database.
func (pbcb *ProvisionBucketCreateBulk) Save(ctx context.Context) ([]*ProvisionBucket, error) {
	if pbcb.err != nil {
		return nil, pbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pbcb.builders))
	nodes := make([]*ProvisionBucket, len(pbcb.builders))
	mutators := make([]Mutator, len(pbcb.builders))
	for i := range pbcb.builders {
		func(i int, root context.Context) {
			builder := pbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProvisionBucketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pbcb *ProvisionBucketCreateBulk) SaveX(ctx context.Context) []*ProvisionBucket {
	v, err := pbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbcb *ProvisionBucketCreateBulk) Exec(ctx context.Context) error {
	_, err := pbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcb *ProvisionBucketCreateBulk) ExecX(ctx context.Context) {
	if err := pbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProvisionBucket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProvisionBucketUpsert) {
//			SetMinAmount(v+v).
//		}).
//		Exec(ctx)
func (pbcb *ProvisionBucketCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProvisionBucketUpsertBulk {
	pbcb.conflict = opts
	return &ProvisionBucketUpsertBulk{
		create: pbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pbcb *ProvisionBucketCreateBulk) OnConflictColumns(columns ...string) *ProvisionBucketUpsertBulk {
	pbcb.conflict = append(pbcb.conflict, sql.ConflictColumns(columns...))
	return &ProvisionBucketUpsertBulk{
		create: pbcb,
	}
}

// ProvisionBucketUpsertBulk is the builder for "upsert"-ing
// a bulk of ProvisionBucket nodes.
type ProvisionBucketUpsertBulk struct {
	create *ProvisionBucketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProvisionBucketUpsertBulk) UpdateNewValues() *ProvisionBucketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(provisionbucket.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProvisionBucket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProvisionBucketUpsertBulk) Ignore() *ProvisionBucketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProvisionBucketUpsertBulk) DoNothing() *ProvisionBucketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProvisionBucketCreateBulk.OnConflict
// documentation for more info.
func (u *ProvisionBucketUpsertBulk) Update(set func(*ProvisionBucketUpsert)) *ProvisionBucketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProvisionBucketUpsert{UpdateSet: update})
	}))
	return u
}

// SetMinAmount sets the "min_amount" field.
func (u *ProvisionBucketUpsertBulk) SetMinAmount(v decimal.Decimal) *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.SetMinAmount(v)
	})
}

// AddMinAmount adds v to the "min_amount" field.
func (u *ProvisionBucketUpsertBulk) AddMinAmount(v decimal.Decimal) *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.AddMinAmount(v)
	})
}

// UpdateMinAmount sets the "min_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsertBulk) UpdateMinAmount() *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.UpdateMinAmount()
	})
}

// SetMaxAmount sets the "max_amount" field.
func (u *ProvisionBucketUpsertBulk) SetMaxAmount(v decimal.Decimal) *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.SetMaxAmount(v)
	})
}

// AddMaxAmount adds v to the "max_amount" field.
func (u *ProvisionBucketUpsertBulk) AddMaxAmount(v decimal.Decimal) *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.AddMaxAmount(v)
	})
}

// UpdateMaxAmount sets the "max_amount" field to the value that was provided on create.
func (u *ProvisionBucketUpsertBulk) UpdateMaxAmount() *ProvisionBucketUpsertBulk {
	return u.Update(func(s *ProvisionBucketUpsert) {
		s.UpdateMaxAmount()
	})
}

// Exec executes the query.
func (u *ProvisionBucketUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProvisionBucketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProvisionBucketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProvisionBucketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
