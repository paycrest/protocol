// Code generated by ent, DO NOT EDIT.

package providerprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldID, id))
}

// TradingName applies equality check predicate on the "trading_name" field. It's identical to TradingNameEQ.
func TradingName(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldTradingName, v))
}

// HostIdentifier applies equality check predicate on the "host_identifier" field. It's identical to HostIdentifierEQ.
func HostIdentifier(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldHostIdentifier, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsAvailable, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldAddress, v))
}

// MobileNumber applies equality check predicate on the "mobile_number" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldMobileNumber, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// BusinessName applies equality check predicate on the "business_name" field. It's identical to BusinessNameEQ.
func BusinessName(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldBusinessName, v))
}

// IdentityDocument applies equality check predicate on the "identity_document" field. It's identical to IdentityDocumentEQ.
func IdentityDocument(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIdentityDocument, v))
}

// BusinessDocument applies equality check predicate on the "business_document" field. It's identical to BusinessDocumentEQ.
func BusinessDocument(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldBusinessDocument, v))
}

// IsKybVerified applies equality check predicate on the "is_kyb_verified" field. It's identical to IsKybVerifiedEQ.
func IsKybVerified(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsKybVerified, v))
}

// TradingNameEQ applies the EQ predicate on the "trading_name" field.
func TradingNameEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldTradingName, v))
}

// TradingNameNEQ applies the NEQ predicate on the "trading_name" field.
func TradingNameNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldTradingName, v))
}

// TradingNameIn applies the In predicate on the "trading_name" field.
func TradingNameIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldTradingName, vs...))
}

// TradingNameNotIn applies the NotIn predicate on the "trading_name" field.
func TradingNameNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldTradingName, vs...))
}

// TradingNameGT applies the GT predicate on the "trading_name" field.
func TradingNameGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldTradingName, v))
}

// TradingNameGTE applies the GTE predicate on the "trading_name" field.
func TradingNameGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldTradingName, v))
}

// TradingNameLT applies the LT predicate on the "trading_name" field.
func TradingNameLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldTradingName, v))
}

// TradingNameLTE applies the LTE predicate on the "trading_name" field.
func TradingNameLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldTradingName, v))
}

// TradingNameContains applies the Contains predicate on the "trading_name" field.
func TradingNameContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldTradingName, v))
}

// TradingNameHasPrefix applies the HasPrefix predicate on the "trading_name" field.
func TradingNameHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldTradingName, v))
}

// TradingNameHasSuffix applies the HasSuffix predicate on the "trading_name" field.
func TradingNameHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldTradingName, v))
}

// TradingNameIsNil applies the IsNil predicate on the "trading_name" field.
func TradingNameIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldTradingName))
}

// TradingNameNotNil applies the NotNil predicate on the "trading_name" field.
func TradingNameNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldTradingName))
}

// TradingNameEqualFold applies the EqualFold predicate on the "trading_name" field.
func TradingNameEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldTradingName, v))
}

// TradingNameContainsFold applies the ContainsFold predicate on the "trading_name" field.
func TradingNameContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldTradingName, v))
}

// HostIdentifierEQ applies the EQ predicate on the "host_identifier" field.
func HostIdentifierEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldHostIdentifier, v))
}

// HostIdentifierNEQ applies the NEQ predicate on the "host_identifier" field.
func HostIdentifierNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldHostIdentifier, v))
}

// HostIdentifierIn applies the In predicate on the "host_identifier" field.
func HostIdentifierIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldHostIdentifier, vs...))
}

// HostIdentifierNotIn applies the NotIn predicate on the "host_identifier" field.
func HostIdentifierNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldHostIdentifier, vs...))
}

// HostIdentifierGT applies the GT predicate on the "host_identifier" field.
func HostIdentifierGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldHostIdentifier, v))
}

// HostIdentifierGTE applies the GTE predicate on the "host_identifier" field.
func HostIdentifierGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldHostIdentifier, v))
}

// HostIdentifierLT applies the LT predicate on the "host_identifier" field.
func HostIdentifierLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldHostIdentifier, v))
}

// HostIdentifierLTE applies the LTE predicate on the "host_identifier" field.
func HostIdentifierLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldHostIdentifier, v))
}

// HostIdentifierContains applies the Contains predicate on the "host_identifier" field.
func HostIdentifierContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldHostIdentifier, v))
}

// HostIdentifierHasPrefix applies the HasPrefix predicate on the "host_identifier" field.
func HostIdentifierHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldHostIdentifier, v))
}

// HostIdentifierHasSuffix applies the HasSuffix predicate on the "host_identifier" field.
func HostIdentifierHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldHostIdentifier, v))
}

// HostIdentifierIsNil applies the IsNil predicate on the "host_identifier" field.
func HostIdentifierIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldHostIdentifier))
}

// HostIdentifierNotNil applies the NotNil predicate on the "host_identifier" field.
func HostIdentifierNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldHostIdentifier))
}

// HostIdentifierEqualFold applies the EqualFold predicate on the "host_identifier" field.
func HostIdentifierEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldHostIdentifier, v))
}

// HostIdentifierContainsFold applies the ContainsFold predicate on the "host_identifier" field.
func HostIdentifierContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldHostIdentifier, v))
}

// ProvisionModeEQ applies the EQ predicate on the "provision_mode" field.
func ProvisionModeEQ(v ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldProvisionMode, v))
}

// ProvisionModeNEQ applies the NEQ predicate on the "provision_mode" field.
func ProvisionModeNEQ(v ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldProvisionMode, v))
}

// ProvisionModeIn applies the In predicate on the "provision_mode" field.
func ProvisionModeIn(vs ...ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldProvisionMode, vs...))
}

// ProvisionModeNotIn applies the NotIn predicate on the "provision_mode" field.
func ProvisionModeNotIn(vs ...ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldProvisionMode, vs...))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIsActive, v))
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIsAvailable, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// VisibilityModeEQ applies the EQ predicate on the "visibility_mode" field.
func VisibilityModeEQ(v VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldVisibilityMode, v))
}

// VisibilityModeNEQ applies the NEQ predicate on the "visibility_mode" field.
func VisibilityModeNEQ(v VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldVisibilityMode, v))
}

// VisibilityModeIn applies the In predicate on the "visibility_mode" field.
func VisibilityModeIn(vs ...VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldVisibilityMode, vs...))
}

// VisibilityModeNotIn applies the NotIn predicate on the "visibility_mode" field.
func VisibilityModeNotIn(vs ...VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldVisibilityMode, vs...))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldAddress, v))
}

// MobileNumberEQ applies the EQ predicate on the "mobile_number" field.
func MobileNumberEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "mobile_number" field.
func MobileNumberNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "mobile_number" field.
func MobileNumberIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "mobile_number" field.
func MobileNumberNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "mobile_number" field.
func MobileNumberGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "mobile_number" field.
func MobileNumberGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "mobile_number" field.
func MobileNumberLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "mobile_number" field.
func MobileNumberLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "mobile_number" field.
func MobileNumberContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "mobile_number" field.
func MobileNumberHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "mobile_number" field.
func MobileNumberHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "mobile_number" field.
func MobileNumberIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "mobile_number" field.
func MobileNumberNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldMobileNumber))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "mobile_number" field.
func MobileNumberEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "mobile_number" field.
func MobileNumberContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldMobileNumber, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldDateOfBirth))
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldDateOfBirth))
}

// BusinessNameEQ applies the EQ predicate on the "business_name" field.
func BusinessNameEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldBusinessName, v))
}

// BusinessNameNEQ applies the NEQ predicate on the "business_name" field.
func BusinessNameNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldBusinessName, v))
}

// BusinessNameIn applies the In predicate on the "business_name" field.
func BusinessNameIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldBusinessName, vs...))
}

// BusinessNameNotIn applies the NotIn predicate on the "business_name" field.
func BusinessNameNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldBusinessName, vs...))
}

// BusinessNameGT applies the GT predicate on the "business_name" field.
func BusinessNameGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldBusinessName, v))
}

// BusinessNameGTE applies the GTE predicate on the "business_name" field.
func BusinessNameGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldBusinessName, v))
}

// BusinessNameLT applies the LT predicate on the "business_name" field.
func BusinessNameLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldBusinessName, v))
}

// BusinessNameLTE applies the LTE predicate on the "business_name" field.
func BusinessNameLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldBusinessName, v))
}

// BusinessNameContains applies the Contains predicate on the "business_name" field.
func BusinessNameContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldBusinessName, v))
}

// BusinessNameHasPrefix applies the HasPrefix predicate on the "business_name" field.
func BusinessNameHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldBusinessName, v))
}

// BusinessNameHasSuffix applies the HasSuffix predicate on the "business_name" field.
func BusinessNameHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldBusinessName, v))
}

// BusinessNameIsNil applies the IsNil predicate on the "business_name" field.
func BusinessNameIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldBusinessName))
}

// BusinessNameNotNil applies the NotNil predicate on the "business_name" field.
func BusinessNameNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldBusinessName))
}

// BusinessNameEqualFold applies the EqualFold predicate on the "business_name" field.
func BusinessNameEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldBusinessName, v))
}

// BusinessNameContainsFold applies the ContainsFold predicate on the "business_name" field.
func BusinessNameContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldBusinessName, v))
}

// IdentityDocumentTypeEQ applies the EQ predicate on the "identity_document_type" field.
func IdentityDocumentTypeEQ(v IdentityDocumentType) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIdentityDocumentType, v))
}

// IdentityDocumentTypeNEQ applies the NEQ predicate on the "identity_document_type" field.
func IdentityDocumentTypeNEQ(v IdentityDocumentType) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIdentityDocumentType, v))
}

// IdentityDocumentTypeIn applies the In predicate on the "identity_document_type" field.
func IdentityDocumentTypeIn(vs ...IdentityDocumentType) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldIdentityDocumentType, vs...))
}

// IdentityDocumentTypeNotIn applies the NotIn predicate on the "identity_document_type" field.
func IdentityDocumentTypeNotIn(vs ...IdentityDocumentType) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldIdentityDocumentType, vs...))
}

// IdentityDocumentTypeIsNil applies the IsNil predicate on the "identity_document_type" field.
func IdentityDocumentTypeIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldIdentityDocumentType))
}

// IdentityDocumentTypeNotNil applies the NotNil predicate on the "identity_document_type" field.
func IdentityDocumentTypeNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldIdentityDocumentType))
}

// IdentityDocumentEQ applies the EQ predicate on the "identity_document" field.
func IdentityDocumentEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIdentityDocument, v))
}

// IdentityDocumentNEQ applies the NEQ predicate on the "identity_document" field.
func IdentityDocumentNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIdentityDocument, v))
}

// IdentityDocumentIn applies the In predicate on the "identity_document" field.
func IdentityDocumentIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldIdentityDocument, vs...))
}

// IdentityDocumentNotIn applies the NotIn predicate on the "identity_document" field.
func IdentityDocumentNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldIdentityDocument, vs...))
}

// IdentityDocumentGT applies the GT predicate on the "identity_document" field.
func IdentityDocumentGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldIdentityDocument, v))
}

// IdentityDocumentGTE applies the GTE predicate on the "identity_document" field.
func IdentityDocumentGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldIdentityDocument, v))
}

// IdentityDocumentLT applies the LT predicate on the "identity_document" field.
func IdentityDocumentLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldIdentityDocument, v))
}

// IdentityDocumentLTE applies the LTE predicate on the "identity_document" field.
func IdentityDocumentLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldIdentityDocument, v))
}

// IdentityDocumentContains applies the Contains predicate on the "identity_document" field.
func IdentityDocumentContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldIdentityDocument, v))
}

// IdentityDocumentHasPrefix applies the HasPrefix predicate on the "identity_document" field.
func IdentityDocumentHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldIdentityDocument, v))
}

// IdentityDocumentHasSuffix applies the HasSuffix predicate on the "identity_document" field.
func IdentityDocumentHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldIdentityDocument, v))
}

// IdentityDocumentIsNil applies the IsNil predicate on the "identity_document" field.
func IdentityDocumentIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldIdentityDocument))
}

// IdentityDocumentNotNil applies the NotNil predicate on the "identity_document" field.
func IdentityDocumentNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldIdentityDocument))
}

// IdentityDocumentEqualFold applies the EqualFold predicate on the "identity_document" field.
func IdentityDocumentEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldIdentityDocument, v))
}

// IdentityDocumentContainsFold applies the ContainsFold predicate on the "identity_document" field.
func IdentityDocumentContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldIdentityDocument, v))
}

// BusinessDocumentEQ applies the EQ predicate on the "business_document" field.
func BusinessDocumentEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldBusinessDocument, v))
}

// BusinessDocumentNEQ applies the NEQ predicate on the "business_document" field.
func BusinessDocumentNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldBusinessDocument, v))
}

// BusinessDocumentIn applies the In predicate on the "business_document" field.
func BusinessDocumentIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldBusinessDocument, vs...))
}

// BusinessDocumentNotIn applies the NotIn predicate on the "business_document" field.
func BusinessDocumentNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldBusinessDocument, vs...))
}

// BusinessDocumentGT applies the GT predicate on the "business_document" field.
func BusinessDocumentGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldBusinessDocument, v))
}

// BusinessDocumentGTE applies the GTE predicate on the "business_document" field.
func BusinessDocumentGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldBusinessDocument, v))
}

// BusinessDocumentLT applies the LT predicate on the "business_document" field.
func BusinessDocumentLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldBusinessDocument, v))
}

// BusinessDocumentLTE applies the LTE predicate on the "business_document" field.
func BusinessDocumentLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldBusinessDocument, v))
}

// BusinessDocumentContains applies the Contains predicate on the "business_document" field.
func BusinessDocumentContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldBusinessDocument, v))
}

// BusinessDocumentHasPrefix applies the HasPrefix predicate on the "business_document" field.
func BusinessDocumentHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldBusinessDocument, v))
}

// BusinessDocumentHasSuffix applies the HasSuffix predicate on the "business_document" field.
func BusinessDocumentHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldBusinessDocument, v))
}

// BusinessDocumentIsNil applies the IsNil predicate on the "business_document" field.
func BusinessDocumentIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldBusinessDocument))
}

// BusinessDocumentNotNil applies the NotNil predicate on the "business_document" field.
func BusinessDocumentNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldBusinessDocument))
}

// BusinessDocumentEqualFold applies the EqualFold predicate on the "business_document" field.
func BusinessDocumentEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldBusinessDocument, v))
}

// BusinessDocumentContainsFold applies the ContainsFold predicate on the "business_document" field.
func BusinessDocumentContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldBusinessDocument, v))
}

// IsKybVerifiedEQ applies the EQ predicate on the "is_kyb_verified" field.
func IsKybVerifiedEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsKybVerified, v))
}

// IsKybVerifiedNEQ applies the NEQ predicate on the "is_kyb_verified" field.
func IsKybVerifiedNEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIsKybVerified, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKey applies the HasEdge predicate on the "api_key" edge.
func HasAPIKey() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, APIKeyTable, APIKeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeyWith applies the HasEdge predicate on the "api_key" edge with a given conditions (other predicates).
func HasAPIKeyWith(preds ...predicate.APIKey) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newAPIKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrencies applies the HasEdge predicate on the "currencies" edge.
func HasCurrencies() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CurrenciesTable, CurrenciesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrenciesWith applies the HasEdge predicate on the "currencies" edge with a given conditions (other predicates).
func HasCurrenciesWith(preds ...predicate.FiatCurrency) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newCurrenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionBuckets applies the HasEdge predicate on the "provision_buckets" edge.
func HasProvisionBuckets() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProvisionBucketsTable, ProvisionBucketsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionBucketsWith applies the HasEdge predicate on the "provision_buckets" edge with a given conditions (other predicates).
func HasProvisionBucketsWith(preds ...predicate.ProvisionBucket) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newProvisionBucketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderTokens applies the HasEdge predicate on the "order_tokens" edge.
func HasOrderTokens() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTokensTable, OrderTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderTokensWith applies the HasEdge predicate on the "order_tokens" edge with a given conditions (other predicates).
func HasOrderTokensWith(preds ...predicate.ProviderOrderToken) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newOrderTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderRating applies the HasEdge predicate on the "provider_rating" edge.
func HasProviderRating() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProviderRatingTable, ProviderRatingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderRatingWith applies the HasEdge predicate on the "provider_rating" edge with a given conditions (other predicates).
func HasProviderRatingWith(preds ...predicate.ProviderRating) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newProviderRatingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedOrders applies the HasEdge predicate on the "assigned_orders" edge.
func HasAssignedOrders() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedOrdersTable, AssignedOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedOrdersWith applies the HasEdge predicate on the "assigned_orders" edge with a given conditions (other predicates).
func HasAssignedOrdersWith(preds ...predicate.LockPaymentOrder) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newAssignedOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.NotPredicates(p))
}
