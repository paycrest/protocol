// Code generated by ent, DO NOT EDIT.

package providerprofile

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the providerprofile type in the database.
	Label = "provider_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTradingName holds the string denoting the trading_name field in the database.
	FieldTradingName = "trading_name"
	// FieldHostIdentifier holds the string denoting the host_identifier field in the database.
	FieldHostIdentifier = "host_identifier"
	// FieldProvisionMode holds the string denoting the provision_mode field in the database.
	FieldProvisionMode = "provision_mode"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsAvailable holds the string denoting the is_available field in the database.
	FieldIsAvailable = "is_available"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVisibilityMode holds the string denoting the visibility_mode field in the database.
	FieldVisibilityMode = "visibility_mode"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldMobileNumber holds the string denoting the mobile_number field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldBusinessName holds the string denoting the business_name field in the database.
	FieldBusinessName = "business_name"
	// FieldIdentityDocumentType holds the string denoting the identity_document_type field in the database.
	FieldIdentityDocumentType = "identity_document_type"
	// FieldIdentityDocument holds the string denoting the identity_document field in the database.
	FieldIdentityDocument = "identity_document"
	// FieldBusinessDocument holds the string denoting the business_document field in the database.
	FieldBusinessDocument = "business_document"
	// FieldIsKybVerified holds the string denoting the is_kyb_verified field in the database.
	FieldIsKybVerified = "is_kyb_verified"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAPIKey holds the string denoting the api_key edge name in mutations.
	EdgeAPIKey = "api_key"
	// EdgeCurrencies holds the string denoting the currencies edge name in mutations.
	EdgeCurrencies = "currencies"
	// EdgeProvisionBuckets holds the string denoting the provision_buckets edge name in mutations.
	EdgeProvisionBuckets = "provision_buckets"
	// EdgeOrderTokens holds the string denoting the order_tokens edge name in mutations.
	EdgeOrderTokens = "order_tokens"
	// EdgeProviderRating holds the string denoting the provider_rating edge name in mutations.
	EdgeProviderRating = "provider_rating"
	// EdgeAssignedOrders holds the string denoting the assigned_orders edge name in mutations.
	EdgeAssignedOrders = "assigned_orders"
	// Table holds the table name of the providerprofile in the database.
	Table = "provider_profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "provider_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_provider_profile"
	// APIKeyTable is the table that holds the api_key relation/edge.
	APIKeyTable = "api_keys"
	// APIKeyInverseTable is the table name for the APIKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeyInverseTable = "api_keys"
	// APIKeyColumn is the table column denoting the api_key relation/edge.
	APIKeyColumn = "provider_profile_api_key"
	// CurrenciesTable is the table that holds the currencies relation/edge. The primary key declared below.
	CurrenciesTable = "fiat_currency_providers"
	// CurrenciesInverseTable is the table name for the FiatCurrency entity.
	// It exists in this package in order to avoid circular dependency with the "fiatcurrency" package.
	CurrenciesInverseTable = "fiat_currencies"
	// ProvisionBucketsTable is the table that holds the provision_buckets relation/edge. The primary key declared below.
	ProvisionBucketsTable = "provision_bucket_provider_profiles"
	// ProvisionBucketsInverseTable is the table name for the ProvisionBucket entity.
	// It exists in this package in order to avoid circular dependency with the "provisionbucket" package.
	ProvisionBucketsInverseTable = "provision_buckets"
	// OrderTokensTable is the table that holds the order_tokens relation/edge.
	OrderTokensTable = "provider_order_tokens"
	// OrderTokensInverseTable is the table name for the ProviderOrderToken entity.
	// It exists in this package in order to avoid circular dependency with the "providerordertoken" package.
	OrderTokensInverseTable = "provider_order_tokens"
	// OrderTokensColumn is the table column denoting the order_tokens relation/edge.
	OrderTokensColumn = "provider_profile_order_tokens"
	// ProviderRatingTable is the table that holds the provider_rating relation/edge.
	ProviderRatingTable = "provider_ratings"
	// ProviderRatingInverseTable is the table name for the ProviderRating entity.
	// It exists in this package in order to avoid circular dependency with the "providerrating" package.
	ProviderRatingInverseTable = "provider_ratings"
	// ProviderRatingColumn is the table column denoting the provider_rating relation/edge.
	ProviderRatingColumn = "provider_profile_provider_rating"
	// AssignedOrdersTable is the table that holds the assigned_orders relation/edge.
	AssignedOrdersTable = "lock_payment_orders"
	// AssignedOrdersInverseTable is the table name for the LockPaymentOrder entity.
	// It exists in this package in order to avoid circular dependency with the "lockpaymentorder" package.
	AssignedOrdersInverseTable = "lock_payment_orders"
	// AssignedOrdersColumn is the table column denoting the assigned_orders relation/edge.
	AssignedOrdersColumn = "provider_profile_assigned_orders"
)

// Columns holds all SQL columns for providerprofile fields.
var Columns = []string{
	FieldID,
	FieldTradingName,
	FieldHostIdentifier,
	FieldProvisionMode,
	FieldIsActive,
	FieldIsAvailable,
	FieldUpdatedAt,
	FieldVisibilityMode,
	FieldAddress,
	FieldMobileNumber,
	FieldDateOfBirth,
	FieldBusinessName,
	FieldIdentityDocumentType,
	FieldIdentityDocument,
	FieldBusinessDocument,
	FieldIsKybVerified,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_provider_profile",
}

var (
	// CurrenciesPrimaryKey and CurrenciesColumn2 are the table columns denoting the
	// primary key for the currencies relation (M2M).
	CurrenciesPrimaryKey = []string{"fiat_currency_id", "provider_profile_id"}
	// ProvisionBucketsPrimaryKey and ProvisionBucketsColumn2 are the table columns denoting the
	// primary key for the provision_buckets relation (M2M).
	ProvisionBucketsPrimaryKey = []string{"provision_bucket_id", "provider_profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TradingNameValidator is a validator for the "trading_name" field. It is called by the builders before save.
	TradingNameValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsAvailable holds the default value on creation for the "is_available" field.
	DefaultIsAvailable bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsKybVerified holds the default value on creation for the "is_kyb_verified" field.
	DefaultIsKybVerified bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// ProvisionMode defines the type for the "provision_mode" enum field.
type ProvisionMode string

// ProvisionModeAuto is the default value of the ProvisionMode enum.
const DefaultProvisionMode = ProvisionModeAuto

// ProvisionMode values.
const (
	ProvisionModeManual ProvisionMode = "manual"
	ProvisionModeAuto   ProvisionMode = "auto"
)

func (pm ProvisionMode) String() string {
	return string(pm)
}

// ProvisionModeValidator is a validator for the "provision_mode" field enum values. It is called by the builders before save.
func ProvisionModeValidator(pm ProvisionMode) error {
	switch pm {
	case ProvisionModeManual, ProvisionModeAuto:
		return nil
	default:
		return fmt.Errorf("providerprofile: invalid enum value for provision_mode field: %q", pm)
	}
}

// VisibilityMode defines the type for the "visibility_mode" enum field.
type VisibilityMode string

// VisibilityModePublic is the default value of the VisibilityMode enum.
const DefaultVisibilityMode = VisibilityModePublic

// VisibilityMode values.
const (
	VisibilityModePrivate VisibilityMode = "private"
	VisibilityModePublic  VisibilityMode = "public"
)

func (vm VisibilityMode) String() string {
	return string(vm)
}

// VisibilityModeValidator is a validator for the "visibility_mode" field enum values. It is called by the builders before save.
func VisibilityModeValidator(vm VisibilityMode) error {
	switch vm {
	case VisibilityModePrivate, VisibilityModePublic:
		return nil
	default:
		return fmt.Errorf("providerprofile: invalid enum value for visibility_mode field: %q", vm)
	}
}

// IdentityDocumentType defines the type for the "identity_document_type" enum field.
type IdentityDocumentType string

// IdentityDocumentType values.
const (
	IdentityDocumentTypePassport       IdentityDocumentType = "passport"
	IdentityDocumentTypeDriversLicense IdentityDocumentType = "drivers_license"
	IdentityDocumentTypeNationalID     IdentityDocumentType = "national_id"
)

func (idt IdentityDocumentType) String() string {
	return string(idt)
}

// IdentityDocumentTypeValidator is a validator for the "identity_document_type" field enum values. It is called by the builders before save.
func IdentityDocumentTypeValidator(idt IdentityDocumentType) error {
	switch idt {
	case IdentityDocumentTypePassport, IdentityDocumentTypeDriversLicense, IdentityDocumentTypeNationalID:
		return nil
	default:
		return fmt.Errorf("providerprofile: invalid enum value for identity_document_type field: %q", idt)
	}
}

// OrderOption defines the ordering options for the ProviderProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTradingName orders the results by the trading_name field.
func ByTradingName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradingName, opts...).ToFunc()
}

// ByHostIdentifier orders the results by the host_identifier field.
func ByHostIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostIdentifier, opts...).ToFunc()
}

// ByProvisionMode orders the results by the provision_mode field.
func ByProvisionMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvisionMode, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsAvailable orders the results by the is_available field.
func ByIsAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAvailable, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVisibilityMode orders the results by the visibility_mode field.
func ByVisibilityMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibilityMode, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByMobileNumber orders the results by the mobile_number field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByBusinessName orders the results by the business_name field.
func ByBusinessName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessName, opts...).ToFunc()
}

// ByIdentityDocumentType orders the results by the identity_document_type field.
func ByIdentityDocumentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityDocumentType, opts...).ToFunc()
}

// ByIdentityDocument orders the results by the identity_document field.
func ByIdentityDocument(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityDocument, opts...).ToFunc()
}

// ByBusinessDocument orders the results by the business_document field.
func ByBusinessDocument(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessDocument, opts...).ToFunc()
}

// ByIsKybVerified orders the results by the is_kyb_verified field.
func ByIsKybVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsKybVerified, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAPIKeyField orders the results by api_key field.
func ByAPIKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrenciesCount orders the results by currencies count.
func ByCurrenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCurrenciesStep(), opts...)
	}
}

// ByCurrencies orders the results by currencies terms.
func ByCurrencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProvisionBucketsCount orders the results by provision_buckets count.
func ByProvisionBucketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProvisionBucketsStep(), opts...)
	}
}

// ByProvisionBuckets orders the results by provision_buckets terms.
func ByProvisionBuckets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionBucketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderTokensCount orders the results by order_tokens count.
func ByOrderTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderTokensStep(), opts...)
	}
}

// ByOrderTokens orders the results by order_tokens terms.
func ByOrderTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProviderRatingField orders the results by provider_rating field.
func ByProviderRatingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderRatingStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignedOrdersCount orders the results by assigned_orders count.
func ByAssignedOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedOrdersStep(), opts...)
	}
}

// ByAssignedOrders orders the results by assigned_orders terms.
func ByAssignedOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newAPIKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, APIKeyTable, APIKeyColumn),
	)
}
func newCurrenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CurrenciesTable, CurrenciesPrimaryKey...),
	)
}
func newProvisionBucketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionBucketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProvisionBucketsTable, ProvisionBucketsPrimaryKey...),
	)
}
func newOrderTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderTokensTable, OrderTokensColumn),
	)
}
func newProviderRatingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderRatingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProviderRatingTable, ProviderRatingColumn),
	)
}
func newAssignedOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignedOrdersTable, AssignedOrdersColumn),
	)
}
