// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/providerordertoken"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/user"
)

// ProviderProfileCreate is the builder for creating a ProviderProfile entity.
type ProviderProfileCreate struct {
	config
	mutation *ProviderProfileMutation
	hooks    []Hook
}

// SetTradingName sets the "trading_name" field.
func (ppc *ProviderProfileCreate) SetTradingName(s string) *ProviderProfileCreate {
	ppc.mutation.SetTradingName(s)
	return ppc
}

// SetNillableTradingName sets the "trading_name" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableTradingName(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetTradingName(*s)
	}
	return ppc
}

// SetHostIdentifier sets the "host_identifier" field.
func (ppc *ProviderProfileCreate) SetHostIdentifier(s string) *ProviderProfileCreate {
	ppc.mutation.SetHostIdentifier(s)
	return ppc
}

// SetNillableHostIdentifier sets the "host_identifier" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableHostIdentifier(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetHostIdentifier(*s)
	}
	return ppc
}

// SetProvisionMode sets the "provision_mode" field.
func (ppc *ProviderProfileCreate) SetProvisionMode(pm providerprofile.ProvisionMode) *ProviderProfileCreate {
	ppc.mutation.SetProvisionMode(pm)
	return ppc
}

// SetNillableProvisionMode sets the "provision_mode" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableProvisionMode(pm *providerprofile.ProvisionMode) *ProviderProfileCreate {
	if pm != nil {
		ppc.SetProvisionMode(*pm)
	}
	return ppc
}

// SetIsActive sets the "is_active" field.
func (ppc *ProviderProfileCreate) SetIsActive(b bool) *ProviderProfileCreate {
	ppc.mutation.SetIsActive(b)
	return ppc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableIsActive(b *bool) *ProviderProfileCreate {
	if b != nil {
		ppc.SetIsActive(*b)
	}
	return ppc
}

// SetIsAvailable sets the "is_available" field.
func (ppc *ProviderProfileCreate) SetIsAvailable(b bool) *ProviderProfileCreate {
	ppc.mutation.SetIsAvailable(b)
	return ppc
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableIsAvailable(b *bool) *ProviderProfileCreate {
	if b != nil {
		ppc.SetIsAvailable(*b)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *ProviderProfileCreate) SetUpdatedAt(t time.Time) *ProviderProfileCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableUpdatedAt(t *time.Time) *ProviderProfileCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetVisibilityMode sets the "visibility_mode" field.
func (ppc *ProviderProfileCreate) SetVisibilityMode(pm providerprofile.VisibilityMode) *ProviderProfileCreate {
	ppc.mutation.SetVisibilityMode(pm)
	return ppc
}

// SetNillableVisibilityMode sets the "visibility_mode" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableVisibilityMode(pm *providerprofile.VisibilityMode) *ProviderProfileCreate {
	if pm != nil {
		ppc.SetVisibilityMode(*pm)
	}
	return ppc
}

// SetAddress sets the "address" field.
func (ppc *ProviderProfileCreate) SetAddress(s string) *ProviderProfileCreate {
	ppc.mutation.SetAddress(s)
	return ppc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableAddress(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetAddress(*s)
	}
	return ppc
}

// SetMobileNumber sets the "mobile_number" field.
func (ppc *ProviderProfileCreate) SetMobileNumber(s string) *ProviderProfileCreate {
	ppc.mutation.SetMobileNumber(s)
	return ppc
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableMobileNumber(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetMobileNumber(*s)
	}
	return ppc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (ppc *ProviderProfileCreate) SetDateOfBirth(t time.Time) *ProviderProfileCreate {
	ppc.mutation.SetDateOfBirth(t)
	return ppc
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableDateOfBirth(t *time.Time) *ProviderProfileCreate {
	if t != nil {
		ppc.SetDateOfBirth(*t)
	}
	return ppc
}

// SetBusinessName sets the "business_name" field.
func (ppc *ProviderProfileCreate) SetBusinessName(s string) *ProviderProfileCreate {
	ppc.mutation.SetBusinessName(s)
	return ppc
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableBusinessName(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetBusinessName(*s)
	}
	return ppc
}

// SetIdentityDocumentType sets the "identity_document_type" field.
func (ppc *ProviderProfileCreate) SetIdentityDocumentType(pdt providerprofile.IdentityDocumentType) *ProviderProfileCreate {
	ppc.mutation.SetIdentityDocumentType(pdt)
	return ppc
}

// SetNillableIdentityDocumentType sets the "identity_document_type" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableIdentityDocumentType(pdt *providerprofile.IdentityDocumentType) *ProviderProfileCreate {
	if pdt != nil {
		ppc.SetIdentityDocumentType(*pdt)
	}
	return ppc
}

// SetIdentityDocument sets the "identity_document" field.
func (ppc *ProviderProfileCreate) SetIdentityDocument(s string) *ProviderProfileCreate {
	ppc.mutation.SetIdentityDocument(s)
	return ppc
}

// SetNillableIdentityDocument sets the "identity_document" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableIdentityDocument(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetIdentityDocument(*s)
	}
	return ppc
}

// SetBusinessDocument sets the "business_document" field.
func (ppc *ProviderProfileCreate) SetBusinessDocument(s string) *ProviderProfileCreate {
	ppc.mutation.SetBusinessDocument(s)
	return ppc
}

// SetNillableBusinessDocument sets the "business_document" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableBusinessDocument(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetBusinessDocument(*s)
	}
	return ppc
}

// SetIsKybVerified sets the "is_kyb_verified" field.
func (ppc *ProviderProfileCreate) SetIsKybVerified(b bool) *ProviderProfileCreate {
	ppc.mutation.SetIsKybVerified(b)
	return ppc
}

// SetNillableIsKybVerified sets the "is_kyb_verified" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableIsKybVerified(b *bool) *ProviderProfileCreate {
	if b != nil {
		ppc.SetIsKybVerified(*b)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *ProviderProfileCreate) SetID(s string) *ProviderProfileCreate {
	ppc.mutation.SetID(s)
	return ppc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableID(s *string) *ProviderProfileCreate {
	if s != nil {
		ppc.SetID(*s)
	}
	return ppc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ppc *ProviderProfileCreate) SetUserID(id uuid.UUID) *ProviderProfileCreate {
	ppc.mutation.SetUserID(id)
	return ppc
}

// SetUser sets the "user" edge to the User entity.
func (ppc *ProviderProfileCreate) SetUser(u *User) *ProviderProfileCreate {
	return ppc.SetUserID(u.ID)
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (ppc *ProviderProfileCreate) SetAPIKeyID(id uuid.UUID) *ProviderProfileCreate {
	ppc.mutation.SetAPIKeyID(id)
	return ppc
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableAPIKeyID(id *uuid.UUID) *ProviderProfileCreate {
	if id != nil {
		ppc = ppc.SetAPIKeyID(*id)
	}
	return ppc
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (ppc *ProviderProfileCreate) SetAPIKey(a *APIKey) *ProviderProfileCreate {
	return ppc.SetAPIKeyID(a.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (ppc *ProviderProfileCreate) SetCurrencyID(id uuid.UUID) *ProviderProfileCreate {
	ppc.mutation.SetCurrencyID(id)
	return ppc
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (ppc *ProviderProfileCreate) SetCurrency(f *FiatCurrency) *ProviderProfileCreate {
	return ppc.SetCurrencyID(f.ID)
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (ppc *ProviderProfileCreate) AddProvisionBucketIDs(ids ...int) *ProviderProfileCreate {
	ppc.mutation.AddProvisionBucketIDs(ids...)
	return ppc
}

// AddProvisionBuckets adds the "provision_buckets" edges to the ProvisionBucket entity.
func (ppc *ProviderProfileCreate) AddProvisionBuckets(p ...*ProvisionBucket) *ProviderProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddProvisionBucketIDs(ids...)
}

// AddOrderTokenIDs adds the "order_tokens" edge to the ProviderOrderToken entity by IDs.
func (ppc *ProviderProfileCreate) AddOrderTokenIDs(ids ...int) *ProviderProfileCreate {
	ppc.mutation.AddOrderTokenIDs(ids...)
	return ppc
}

// AddOrderTokens adds the "order_tokens" edges to the ProviderOrderToken entity.
func (ppc *ProviderProfileCreate) AddOrderTokens(p ...*ProviderOrderToken) *ProviderProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddOrderTokenIDs(ids...)
}

// SetProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID.
func (ppc *ProviderProfileCreate) SetProviderRatingID(id int) *ProviderProfileCreate {
	ppc.mutation.SetProviderRatingID(id)
	return ppc
}

// SetNillableProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by ID if the given value is not nil.
func (ppc *ProviderProfileCreate) SetNillableProviderRatingID(id *int) *ProviderProfileCreate {
	if id != nil {
		ppc = ppc.SetProviderRatingID(*id)
	}
	return ppc
}

// SetProviderRating sets the "provider_rating" edge to the ProviderRating entity.
func (ppc *ProviderProfileCreate) SetProviderRating(p *ProviderRating) *ProviderProfileCreate {
	return ppc.SetProviderRatingID(p.ID)
}

// AddAssignedOrderIDs adds the "assigned_orders" edge to the LockPaymentOrder entity by IDs.
func (ppc *ProviderProfileCreate) AddAssignedOrderIDs(ids ...uuid.UUID) *ProviderProfileCreate {
	ppc.mutation.AddAssignedOrderIDs(ids...)
	return ppc
}

// AddAssignedOrders adds the "assigned_orders" edges to the LockPaymentOrder entity.
func (ppc *ProviderProfileCreate) AddAssignedOrders(l ...*LockPaymentOrder) *ProviderProfileCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ppc.AddAssignedOrderIDs(ids...)
}

// Mutation returns the ProviderProfileMutation object of the builder.
func (ppc *ProviderProfileCreate) Mutation() *ProviderProfileMutation {
	return ppc.mutation
}

// Save creates the ProviderProfile in the database.
func (ppc *ProviderProfileCreate) Save(ctx context.Context) (*ProviderProfile, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *ProviderProfileCreate) SaveX(ctx context.Context) *ProviderProfile {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *ProviderProfileCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *ProviderProfileCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *ProviderProfileCreate) defaults() {
	if _, ok := ppc.mutation.ProvisionMode(); !ok {
		v := providerprofile.DefaultProvisionMode
		ppc.mutation.SetProvisionMode(v)
	}
	if _, ok := ppc.mutation.IsActive(); !ok {
		v := providerprofile.DefaultIsActive
		ppc.mutation.SetIsActive(v)
	}
	if _, ok := ppc.mutation.IsAvailable(); !ok {
		v := providerprofile.DefaultIsAvailable
		ppc.mutation.SetIsAvailable(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		v := providerprofile.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.VisibilityMode(); !ok {
		v := providerprofile.DefaultVisibilityMode
		ppc.mutation.SetVisibilityMode(v)
	}
	if _, ok := ppc.mutation.IsKybVerified(); !ok {
		v := providerprofile.DefaultIsKybVerified
		ppc.mutation.SetIsKybVerified(v)
	}
	if _, ok := ppc.mutation.ID(); !ok {
		v := providerprofile.DefaultID()
		ppc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *ProviderProfileCreate) check() error {
	if v, ok := ppc.mutation.TradingName(); ok {
		if err := providerprofile.TradingNameValidator(v); err != nil {
			return &ValidationError{Name: "trading_name", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.trading_name": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.ProvisionMode(); !ok {
		return &ValidationError{Name: "provision_mode", err: errors.New(`ent: missing required field "ProviderProfile.provision_mode"`)}
	}
	if v, ok := ppc.mutation.ProvisionMode(); ok {
		if err := providerprofile.ProvisionModeValidator(v); err != nil {
			return &ValidationError{Name: "provision_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.provision_mode": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ProviderProfile.is_active"`)}
	}
	if _, ok := ppc.mutation.IsAvailable(); !ok {
		return &ValidationError{Name: "is_available", err: errors.New(`ent: missing required field "ProviderProfile.is_available"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderProfile.updated_at"`)}
	}
	if _, ok := ppc.mutation.VisibilityMode(); !ok {
		return &ValidationError{Name: "visibility_mode", err: errors.New(`ent: missing required field "ProviderProfile.visibility_mode"`)}
	}
	if v, ok := ppc.mutation.VisibilityMode(); ok {
		if err := providerprofile.VisibilityModeValidator(v); err != nil {
			return &ValidationError{Name: "visibility_mode", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.visibility_mode": %w`, err)}
		}
	}
	if v, ok := ppc.mutation.IdentityDocumentType(); ok {
		if err := providerprofile.IdentityDocumentTypeValidator(v); err != nil {
			return &ValidationError{Name: "identity_document_type", err: fmt.Errorf(`ent: validator failed for field "ProviderProfile.identity_document_type": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.IsKybVerified(); !ok {
		return &ValidationError{Name: "is_kyb_verified", err: errors.New(`ent: missing required field "ProviderProfile.is_kyb_verified"`)}
	}
	if len(ppc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ProviderProfile.user"`)}
	}
	if len(ppc.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "ProviderProfile.currency"`)}
	}
	return nil
}

func (ppc *ProviderProfileCreate) sqlSave(ctx context.Context) (*ProviderProfile, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProviderProfile.ID type: %T", _spec.ID.Value)
		}
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *ProviderProfileCreate) createSpec() (*ProviderProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderProfile{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(providerprofile.Table, sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString))
	)
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.TradingName(); ok {
		_spec.SetField(providerprofile.FieldTradingName, field.TypeString, value)
		_node.TradingName = value
	}
	if value, ok := ppc.mutation.HostIdentifier(); ok {
		_spec.SetField(providerprofile.FieldHostIdentifier, field.TypeString, value)
		_node.HostIdentifier = value
	}
	if value, ok := ppc.mutation.ProvisionMode(); ok {
		_spec.SetField(providerprofile.FieldProvisionMode, field.TypeEnum, value)
		_node.ProvisionMode = value
	}
	if value, ok := ppc.mutation.IsActive(); ok {
		_spec.SetField(providerprofile.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ppc.mutation.IsAvailable(); ok {
		_spec.SetField(providerprofile.FieldIsAvailable, field.TypeBool, value)
		_node.IsAvailable = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(providerprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.VisibilityMode(); ok {
		_spec.SetField(providerprofile.FieldVisibilityMode, field.TypeEnum, value)
		_node.VisibilityMode = value
	}
	if value, ok := ppc.mutation.Address(); ok {
		_spec.SetField(providerprofile.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ppc.mutation.MobileNumber(); ok {
		_spec.SetField(providerprofile.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := ppc.mutation.DateOfBirth(); ok {
		_spec.SetField(providerprofile.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := ppc.mutation.BusinessName(); ok {
		_spec.SetField(providerprofile.FieldBusinessName, field.TypeString, value)
		_node.BusinessName = value
	}
	if value, ok := ppc.mutation.IdentityDocumentType(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocumentType, field.TypeEnum, value)
		_node.IdentityDocumentType = value
	}
	if value, ok := ppc.mutation.IdentityDocument(); ok {
		_spec.SetField(providerprofile.FieldIdentityDocument, field.TypeString, value)
		_node.IdentityDocument = value
	}
	if value, ok := ppc.mutation.BusinessDocument(); ok {
		_spec.SetField(providerprofile.FieldBusinessDocument, field.TypeString, value)
		_node.BusinessDocument = value
	}
	if value, ok := ppc.mutation.IsKybVerified(); ok {
		_spec.SetField(providerprofile.FieldIsKybVerified, field.TypeBool, value)
		_node.IsKybVerified = value
	}
	if nodes := ppc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   providerprofile.UserTable,
			Columns: []string{providerprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_provider_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.APIKeyTable,
			Columns: []string{providerprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerprofile.CurrencyTable,
			Columns: []string{providerprofile.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fiat_currency_providers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProvisionBucketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   providerprofile.ProvisionBucketsTable,
			Columns: providerprofile.ProvisionBucketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.OrderTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.OrderTokensTable,
			Columns: []string{providerprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProviderRatingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   providerprofile.ProviderRatingTable,
			Columns: []string{providerprofile.ProviderRatingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerrating.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.AssignedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerprofile.AssignedOrdersTable,
			Columns: []string{providerprofile.AssignedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderProfileCreateBulk is the builder for creating many ProviderProfile entities in bulk.
type ProviderProfileCreateBulk struct {
	config
	err      error
	builders []*ProviderProfileCreate
}

// Save creates the ProviderProfile entities in the database.
func (ppcb *ProviderProfileCreateBulk) Save(ctx context.Context) ([]*ProviderProfile, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*ProviderProfile, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *ProviderProfileCreateBulk) SaveX(ctx context.Context) []*ProviderProfile {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *ProviderProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *ProviderProfileCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
