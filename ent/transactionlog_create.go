// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/transactionlog"
)

// TransactionLogCreate is the builder for creating a TransactionLog entity.
type TransactionLogCreate struct {
	config
	mutation *TransactionLogMutation
	hooks    []Hook
}

// SetGatewayID sets the "gateway_id" field.
func (tlc *TransactionLogCreate) SetGatewayID(s string) *TransactionLogCreate {
	tlc.mutation.SetGatewayID(s)
	return tlc
}

// SetNillableGatewayID sets the "gateway_id" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableGatewayID(s *string) *TransactionLogCreate {
	if s != nil {
		tlc.SetGatewayID(*s)
	}
	return tlc
}

// SetStatus sets the "status" field.
func (tlc *TransactionLogCreate) SetStatus(t transactionlog.Status) *TransactionLogCreate {
	tlc.mutation.SetStatus(t)
	return tlc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableStatus(t *transactionlog.Status) *TransactionLogCreate {
	if t != nil {
		tlc.SetStatus(*t)
	}
	return tlc
}

// SetNetwork sets the "network" field.
func (tlc *TransactionLogCreate) SetNetwork(s string) *TransactionLogCreate {
	tlc.mutation.SetNetwork(s)
	return tlc
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableNetwork(s *string) *TransactionLogCreate {
	if s != nil {
		tlc.SetNetwork(*s)
	}
	return tlc
}

// SetTxHash sets the "tx_hash" field.
func (tlc *TransactionLogCreate) SetTxHash(s string) *TransactionLogCreate {
	tlc.mutation.SetTxHash(s)
	return tlc
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableTxHash(s *string) *TransactionLogCreate {
	if s != nil {
		tlc.SetTxHash(*s)
	}
	return tlc
}

// SetMetadata sets the "metadata" field.
func (tlc *TransactionLogCreate) SetMetadata(m map[string]interface{}) *TransactionLogCreate {
	tlc.mutation.SetMetadata(m)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TransactionLogCreate) SetCreatedAt(t time.Time) *TransactionLogCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableCreatedAt(t *time.Time) *TransactionLogCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TransactionLogCreate) SetID(u uuid.UUID) *TransactionLogCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TransactionLogCreate) SetNillableID(u *uuid.UUID) *TransactionLogCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// Mutation returns the TransactionLogMutation object of the builder.
func (tlc *TransactionLogCreate) Mutation() *TransactionLogMutation {
	return tlc.mutation
}

// Save creates the TransactionLog in the database.
func (tlc *TransactionLogCreate) Save(ctx context.Context) (*TransactionLog, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TransactionLogCreate) SaveX(ctx context.Context) *TransactionLog {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TransactionLogCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TransactionLogCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TransactionLogCreate) defaults() {
	if _, ok := tlc.mutation.Status(); !ok {
		v := transactionlog.DefaultStatus
		tlc.mutation.SetStatus(v)
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := transactionlog.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := transactionlog.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TransactionLogCreate) check() error {
	if _, ok := tlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TransactionLog.status"`)}
	}
	if v, ok := tlc.mutation.Status(); ok {
		if err := transactionlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TransactionLog.status": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "TransactionLog.metadata"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TransactionLog.created_at"`)}
	}
	return nil
}

func (tlc *TransactionLogCreate) sqlSave(ctx context.Context) (*TransactionLog, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TransactionLogCreate) createSpec() (*TransactionLog, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionLog{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(transactionlog.Table, sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID))
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.GatewayID(); ok {
		_spec.SetField(transactionlog.FieldGatewayID, field.TypeString, value)
		_node.GatewayID = value
	}
	if value, ok := tlc.mutation.Status(); ok {
		_spec.SetField(transactionlog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tlc.mutation.Network(); ok {
		_spec.SetField(transactionlog.FieldNetwork, field.TypeString, value)
		_node.Network = value
	}
	if value, ok := tlc.mutation.TxHash(); ok {
		_spec.SetField(transactionlog.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := tlc.mutation.Metadata(); ok {
		_spec.SetField(transactionlog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(transactionlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TransactionLogCreateBulk is the builder for creating many TransactionLog entities in bulk.
type TransactionLogCreateBulk struct {
	config
	err      error
	builders []*TransactionLogCreate
}

// Save creates the TransactionLog entities in the database.
func (tlcb *TransactionLogCreateBulk) Save(ctx context.Context) ([]*TransactionLog, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TransactionLog, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TransactionLogCreateBulk) SaveX(ctx context.Context) []*TransactionLog {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TransactionLogCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TransactionLogCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
