// Code generated by ent, DO NOT EDIT.

package network

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v int64) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldChainID, v))
}

// ChainIDHex applies equality check predicate on the "chain_id_hex" field. It's identical to ChainIDHexEQ.
func ChainIDHex(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldChainIDHex, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldIdentifier, v))
}

// RPCEndpoint applies equality check predicate on the "rpc_endpoint" field. It's identical to RPCEndpointEQ.
func RPCEndpoint(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldRPCEndpoint, v))
}

// GatewayContractAddress applies equality check predicate on the "gateway_contract_address" field. It's identical to GatewayContractAddressEQ.
func GatewayContractAddress(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldGatewayContractAddress, v))
}

// IsTestnet applies equality check predicate on the "is_testnet" field. It's identical to IsTestnetEQ.
func IsTestnet(v bool) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldIsTestnet, v))
}

// BundlerURL applies equality check predicate on the "bundler_url" field. It's identical to BundlerURLEQ.
func BundlerURL(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldBundlerURL, v))
}

// PaymasterURL applies equality check predicate on the "paymaster_url" field. It's identical to PaymasterURLEQ.
func PaymasterURL(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldPaymasterURL, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldFee, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldUpdatedAt, v))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v int64) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v int64) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...int64) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...int64) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v int64) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v int64) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v int64) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v int64) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldChainID, v))
}

// ChainIDHexEQ applies the EQ predicate on the "chain_id_hex" field.
func ChainIDHexEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldChainIDHex, v))
}

// ChainIDHexNEQ applies the NEQ predicate on the "chain_id_hex" field.
func ChainIDHexNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldChainIDHex, v))
}

// ChainIDHexIn applies the In predicate on the "chain_id_hex" field.
func ChainIDHexIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldChainIDHex, vs...))
}

// ChainIDHexNotIn applies the NotIn predicate on the "chain_id_hex" field.
func ChainIDHexNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldChainIDHex, vs...))
}

// ChainIDHexGT applies the GT predicate on the "chain_id_hex" field.
func ChainIDHexGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldChainIDHex, v))
}

// ChainIDHexGTE applies the GTE predicate on the "chain_id_hex" field.
func ChainIDHexGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldChainIDHex, v))
}

// ChainIDHexLT applies the LT predicate on the "chain_id_hex" field.
func ChainIDHexLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldChainIDHex, v))
}

// ChainIDHexLTE applies the LTE predicate on the "chain_id_hex" field.
func ChainIDHexLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldChainIDHex, v))
}

// ChainIDHexContains applies the Contains predicate on the "chain_id_hex" field.
func ChainIDHexContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldChainIDHex, v))
}

// ChainIDHexHasPrefix applies the HasPrefix predicate on the "chain_id_hex" field.
func ChainIDHexHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldChainIDHex, v))
}

// ChainIDHexHasSuffix applies the HasSuffix predicate on the "chain_id_hex" field.
func ChainIDHexHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldChainIDHex, v))
}

// ChainIDHexIsNil applies the IsNil predicate on the "chain_id_hex" field.
func ChainIDHexIsNil() predicate.Network {
	return predicate.Network(sql.FieldIsNull(FieldChainIDHex))
}

// ChainIDHexNotNil applies the NotNil predicate on the "chain_id_hex" field.
func ChainIDHexNotNil() predicate.Network {
	return predicate.Network(sql.FieldNotNull(FieldChainIDHex))
}

// ChainIDHexEqualFold applies the EqualFold predicate on the "chain_id_hex" field.
func ChainIDHexEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldChainIDHex, v))
}

// ChainIDHexContainsFold applies the ContainsFold predicate on the "chain_id_hex" field.
func ChainIDHexContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldChainIDHex, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldIdentifier, v))
}

// RPCEndpointEQ applies the EQ predicate on the "rpc_endpoint" field.
func RPCEndpointEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldRPCEndpoint, v))
}

// RPCEndpointNEQ applies the NEQ predicate on the "rpc_endpoint" field.
func RPCEndpointNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldRPCEndpoint, v))
}

// RPCEndpointIn applies the In predicate on the "rpc_endpoint" field.
func RPCEndpointIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldRPCEndpoint, vs...))
}

// RPCEndpointNotIn applies the NotIn predicate on the "rpc_endpoint" field.
func RPCEndpointNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldRPCEndpoint, vs...))
}

// RPCEndpointGT applies the GT predicate on the "rpc_endpoint" field.
func RPCEndpointGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldRPCEndpoint, v))
}

// RPCEndpointGTE applies the GTE predicate on the "rpc_endpoint" field.
func RPCEndpointGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldRPCEndpoint, v))
}

// RPCEndpointLT applies the LT predicate on the "rpc_endpoint" field.
func RPCEndpointLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldRPCEndpoint, v))
}

// RPCEndpointLTE applies the LTE predicate on the "rpc_endpoint" field.
func RPCEndpointLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldRPCEndpoint, v))
}

// RPCEndpointContains applies the Contains predicate on the "rpc_endpoint" field.
func RPCEndpointContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldRPCEndpoint, v))
}

// RPCEndpointHasPrefix applies the HasPrefix predicate on the "rpc_endpoint" field.
func RPCEndpointHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldRPCEndpoint, v))
}

// RPCEndpointHasSuffix applies the HasSuffix predicate on the "rpc_endpoint" field.
func RPCEndpointHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldRPCEndpoint, v))
}

// RPCEndpointEqualFold applies the EqualFold predicate on the "rpc_endpoint" field.
func RPCEndpointEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldRPCEndpoint, v))
}

// RPCEndpointContainsFold applies the ContainsFold predicate on the "rpc_endpoint" field.
func RPCEndpointContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldRPCEndpoint, v))
}

// GatewayContractAddressEQ applies the EQ predicate on the "gateway_contract_address" field.
func GatewayContractAddressEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldGatewayContractAddress, v))
}

// GatewayContractAddressNEQ applies the NEQ predicate on the "gateway_contract_address" field.
func GatewayContractAddressNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldGatewayContractAddress, v))
}

// GatewayContractAddressIn applies the In predicate on the "gateway_contract_address" field.
func GatewayContractAddressIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldGatewayContractAddress, vs...))
}

// GatewayContractAddressNotIn applies the NotIn predicate on the "gateway_contract_address" field.
func GatewayContractAddressNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldGatewayContractAddress, vs...))
}

// GatewayContractAddressGT applies the GT predicate on the "gateway_contract_address" field.
func GatewayContractAddressGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldGatewayContractAddress, v))
}

// GatewayContractAddressGTE applies the GTE predicate on the "gateway_contract_address" field.
func GatewayContractAddressGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldGatewayContractAddress, v))
}

// GatewayContractAddressLT applies the LT predicate on the "gateway_contract_address" field.
func GatewayContractAddressLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldGatewayContractAddress, v))
}

// GatewayContractAddressLTE applies the LTE predicate on the "gateway_contract_address" field.
func GatewayContractAddressLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldGatewayContractAddress, v))
}

// GatewayContractAddressContains applies the Contains predicate on the "gateway_contract_address" field.
func GatewayContractAddressContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldGatewayContractAddress, v))
}

// GatewayContractAddressHasPrefix applies the HasPrefix predicate on the "gateway_contract_address" field.
func GatewayContractAddressHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldGatewayContractAddress, v))
}

// GatewayContractAddressHasSuffix applies the HasSuffix predicate on the "gateway_contract_address" field.
func GatewayContractAddressHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldGatewayContractAddress, v))
}

// GatewayContractAddressEqualFold applies the EqualFold predicate on the "gateway_contract_address" field.
func GatewayContractAddressEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldGatewayContractAddress, v))
}

// GatewayContractAddressContainsFold applies the ContainsFold predicate on the "gateway_contract_address" field.
func GatewayContractAddressContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldGatewayContractAddress, v))
}

// IsTestnetEQ applies the EQ predicate on the "is_testnet" field.
func IsTestnetEQ(v bool) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldIsTestnet, v))
}

// IsTestnetNEQ applies the NEQ predicate on the "is_testnet" field.
func IsTestnetNEQ(v bool) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldIsTestnet, v))
}

// BundlerURLEQ applies the EQ predicate on the "bundler_url" field.
func BundlerURLEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldBundlerURL, v))
}

// BundlerURLNEQ applies the NEQ predicate on the "bundler_url" field.
func BundlerURLNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldBundlerURL, v))
}

// BundlerURLIn applies the In predicate on the "bundler_url" field.
func BundlerURLIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldBundlerURL, vs...))
}

// BundlerURLNotIn applies the NotIn predicate on the "bundler_url" field.
func BundlerURLNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldBundlerURL, vs...))
}

// BundlerURLGT applies the GT predicate on the "bundler_url" field.
func BundlerURLGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldBundlerURL, v))
}

// BundlerURLGTE applies the GTE predicate on the "bundler_url" field.
func BundlerURLGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldBundlerURL, v))
}

// BundlerURLLT applies the LT predicate on the "bundler_url" field.
func BundlerURLLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldBundlerURL, v))
}

// BundlerURLLTE applies the LTE predicate on the "bundler_url" field.
func BundlerURLLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldBundlerURL, v))
}

// BundlerURLContains applies the Contains predicate on the "bundler_url" field.
func BundlerURLContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldBundlerURL, v))
}

// BundlerURLHasPrefix applies the HasPrefix predicate on the "bundler_url" field.
func BundlerURLHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldBundlerURL, v))
}

// BundlerURLHasSuffix applies the HasSuffix predicate on the "bundler_url" field.
func BundlerURLHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldBundlerURL, v))
}

// BundlerURLIsNil applies the IsNil predicate on the "bundler_url" field.
func BundlerURLIsNil() predicate.Network {
	return predicate.Network(sql.FieldIsNull(FieldBundlerURL))
}

// BundlerURLNotNil applies the NotNil predicate on the "bundler_url" field.
func BundlerURLNotNil() predicate.Network {
	return predicate.Network(sql.FieldNotNull(FieldBundlerURL))
}

// BundlerURLEqualFold applies the EqualFold predicate on the "bundler_url" field.
func BundlerURLEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldBundlerURL, v))
}

// BundlerURLContainsFold applies the ContainsFold predicate on the "bundler_url" field.
func BundlerURLContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldBundlerURL, v))
}

// PaymasterURLEQ applies the EQ predicate on the "paymaster_url" field.
func PaymasterURLEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldPaymasterURL, v))
}

// PaymasterURLNEQ applies the NEQ predicate on the "paymaster_url" field.
func PaymasterURLNEQ(v string) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldPaymasterURL, v))
}

// PaymasterURLIn applies the In predicate on the "paymaster_url" field.
func PaymasterURLIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldPaymasterURL, vs...))
}

// PaymasterURLNotIn applies the NotIn predicate on the "paymaster_url" field.
func PaymasterURLNotIn(vs ...string) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldPaymasterURL, vs...))
}

// PaymasterURLGT applies the GT predicate on the "paymaster_url" field.
func PaymasterURLGT(v string) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldPaymasterURL, v))
}

// PaymasterURLGTE applies the GTE predicate on the "paymaster_url" field.
func PaymasterURLGTE(v string) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldPaymasterURL, v))
}

// PaymasterURLLT applies the LT predicate on the "paymaster_url" field.
func PaymasterURLLT(v string) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldPaymasterURL, v))
}

// PaymasterURLLTE applies the LTE predicate on the "paymaster_url" field.
func PaymasterURLLTE(v string) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldPaymasterURL, v))
}

// PaymasterURLContains applies the Contains predicate on the "paymaster_url" field.
func PaymasterURLContains(v string) predicate.Network {
	return predicate.Network(sql.FieldContains(FieldPaymasterURL, v))
}

// PaymasterURLHasPrefix applies the HasPrefix predicate on the "paymaster_url" field.
func PaymasterURLHasPrefix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasPrefix(FieldPaymasterURL, v))
}

// PaymasterURLHasSuffix applies the HasSuffix predicate on the "paymaster_url" field.
func PaymasterURLHasSuffix(v string) predicate.Network {
	return predicate.Network(sql.FieldHasSuffix(FieldPaymasterURL, v))
}

// PaymasterURLIsNil applies the IsNil predicate on the "paymaster_url" field.
func PaymasterURLIsNil() predicate.Network {
	return predicate.Network(sql.FieldIsNull(FieldPaymasterURL))
}

// PaymasterURLNotNil applies the NotNil predicate on the "paymaster_url" field.
func PaymasterURLNotNil() predicate.Network {
	return predicate.Network(sql.FieldNotNull(FieldPaymasterURL))
}

// PaymasterURLEqualFold applies the EqualFold predicate on the "paymaster_url" field.
func PaymasterURLEqualFold(v string) predicate.Network {
	return predicate.Network(sql.FieldEqualFold(FieldPaymasterURL, v))
}

// PaymasterURLContainsFold applies the ContainsFold predicate on the "paymaster_url" field.
func PaymasterURLContainsFold(v string) predicate.Network {
	return predicate.Network(sql.FieldContainsFold(FieldPaymasterURL, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v decimal.Decimal) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldFee, v))
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Network) predicate.Network {
	return predicate.Network(sql.NotPredicates(p))
}
