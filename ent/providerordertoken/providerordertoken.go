// Code generated by ent, DO NOT EDIT.

package providerordertoken

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the providerordertoken type in the database.
	Label = "provider_order_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldFixedConversionRate holds the string denoting the fixed_conversion_rate field in the database.
	FieldFixedConversionRate = "fixed_conversion_rate"
	// FieldFloatingConversionRate holds the string denoting the floating_conversion_rate field in the database.
	FieldFloatingConversionRate = "floating_conversion_rate"
	// FieldConversionRateType holds the string denoting the conversion_rate_type field in the database.
	FieldConversionRateType = "conversion_rate_type"
	// FieldMaxOrderAmount holds the string denoting the max_order_amount field in the database.
	FieldMaxOrderAmount = "max_order_amount"
	// FieldMinOrderAmount holds the string denoting the min_order_amount field in the database.
	FieldMinOrderAmount = "min_order_amount"
	// FieldRateSlippage holds the string denoting the rate_slippage field in the database.
	FieldRateSlippage = "rate_slippage"
	// FieldAddresses holds the string denoting the addresses field in the database.
	FieldAddresses = "addresses"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// Table holds the table name of the providerordertoken in the database.
	Table = "provider_order_tokens"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "provider_order_tokens"
	// ProviderInverseTable is the table name for the ProviderProfile entity.
	// It exists in this package in order to avoid circular dependency with the "providerprofile" package.
	ProviderInverseTable = "provider_profiles"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_profile_order_tokens"
)

// Columns holds all SQL columns for providerordertoken fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSymbol,
	FieldFixedConversionRate,
	FieldFloatingConversionRate,
	FieldConversionRateType,
	FieldMaxOrderAmount,
	FieldMinOrderAmount,
	FieldRateSlippage,
	FieldAddresses,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_order_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_profile_order_tokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// ConversionRateType defines the type for the "conversion_rate_type" enum field.
type ConversionRateType string

// ConversionRateType values.
const (
	ConversionRateTypeFixed    ConversionRateType = "fixed"
	ConversionRateTypeFloating ConversionRateType = "floating"
)

func (crt ConversionRateType) String() string {
	return string(crt)
}

// ConversionRateTypeValidator is a validator for the "conversion_rate_type" field enum values. It is called by the builders before save.
func ConversionRateTypeValidator(crt ConversionRateType) error {
	switch crt {
	case ConversionRateTypeFixed, ConversionRateTypeFloating:
		return nil
	default:
		return fmt.Errorf("providerordertoken: invalid enum value for conversion_rate_type field: %q", crt)
	}
}

// OrderOption defines the ordering options for the ProviderOrderToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByFixedConversionRate orders the results by the fixed_conversion_rate field.
func ByFixedConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedConversionRate, opts...).ToFunc()
}

// ByFloatingConversionRate orders the results by the floating_conversion_rate field.
func ByFloatingConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloatingConversionRate, opts...).ToFunc()
}

// ByConversionRateType orders the results by the conversion_rate_type field.
func ByConversionRateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversionRateType, opts...).ToFunc()
}

// ByMaxOrderAmount orders the results by the max_order_amount field.
func ByMaxOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxOrderAmount, opts...).ToFunc()
}

// ByMinOrderAmount orders the results by the min_order_amount field.
func ByMinOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinOrderAmount, opts...).ToFunc()
}

// ByRateSlippage orders the results by the rate_slippage field.
func ByRateSlippage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateSlippage, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
