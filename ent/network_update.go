// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/shopspring/decimal"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NetworkUpdate) SetUpdatedAt(t time.Time) *NetworkUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetChainID sets the "chain_id" field.
func (nu *NetworkUpdate) SetChainID(i int64) *NetworkUpdate {
	nu.mutation.ResetChainID()
	nu.mutation.SetChainID(i)
	return nu
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableChainID(i *int64) *NetworkUpdate {
	if i != nil {
		nu.SetChainID(*i)
	}
	return nu
}

// AddChainID adds i to the "chain_id" field.
func (nu *NetworkUpdate) AddChainID(i int64) *NetworkUpdate {
	nu.mutation.AddChainID(i)
	return nu
}

// SetChainIDHex sets the "chain_id_hex" field.
func (nu *NetworkUpdate) SetChainIDHex(s string) *NetworkUpdate {
	nu.mutation.SetChainIDHex(s)
	return nu
}

// SetNillableChainIDHex sets the "chain_id_hex" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableChainIDHex(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetChainIDHex(*s)
	}
	return nu
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (nu *NetworkUpdate) ClearChainIDHex() *NetworkUpdate {
	nu.mutation.ClearChainIDHex()
	return nu
}

// SetIdentifier sets the "identifier" field.
func (nu *NetworkUpdate) SetIdentifier(s string) *NetworkUpdate {
	nu.mutation.SetIdentifier(s)
	return nu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableIdentifier(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetIdentifier(*s)
	}
	return nu
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (nu *NetworkUpdate) SetRPCEndpoint(s string) *NetworkUpdate {
	nu.mutation.SetRPCEndpoint(s)
	return nu
}

// SetNillableRPCEndpoint sets the "rpc_endpoint" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableRPCEndpoint(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetRPCEndpoint(*s)
	}
	return nu
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (nu *NetworkUpdate) SetGatewayContractAddress(s string) *NetworkUpdate {
	nu.mutation.SetGatewayContractAddress(s)
	return nu
}

// SetNillableGatewayContractAddress sets the "gateway_contract_address" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableGatewayContractAddress(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetGatewayContractAddress(*s)
	}
	return nu
}

// SetIsTestnet sets the "is_testnet" field.
func (nu *NetworkUpdate) SetIsTestnet(b bool) *NetworkUpdate {
	nu.mutation.SetIsTestnet(b)
	return nu
}

// SetNillableIsTestnet sets the "is_testnet" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableIsTestnet(b *bool) *NetworkUpdate {
	if b != nil {
		nu.SetIsTestnet(*b)
	}
	return nu
}

// SetFee sets the "fee" field.
func (nu *NetworkUpdate) SetFee(d decimal.Decimal) *NetworkUpdate {
	nu.mutation.ResetFee()
	nu.mutation.SetFee(d)
	return nu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableFee(d *decimal.Decimal) *NetworkUpdate {
	if d != nil {
		nu.SetFee(*d)
	}
	return nu
}

// AddFee adds d to the "fee" field.
func (nu *NetworkUpdate) AddFee(d decimal.Decimal) *NetworkUpdate {
	nu.mutation.AddFee(d)
	return nu
}

// SetIsEnabled sets the "is_enabled" field.
func (nu *NetworkUpdate) SetIsEnabled(b bool) *NetworkUpdate {
	nu.mutation.SetIsEnabled(b)
	return nu
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableIsEnabled(b *bool) *NetworkUpdate {
	if b != nil {
		nu.SetIsEnabled(*b)
	}
	return nu
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (nu *NetworkUpdate) AddTokenIDs(ids ...int) *NetworkUpdate {
	nu.mutation.AddTokenIDs(ids...)
	return nu
}

// AddTokens adds the "tokens" edges to the Token entity.
func (nu *NetworkUpdate) AddTokens(t ...*Token) *NetworkUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddTokenIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (nu *NetworkUpdate) ClearTokens() *NetworkUpdate {
	nu.mutation.ClearTokens()
	return nu
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (nu *NetworkUpdate) RemoveTokenIDs(ids ...int) *NetworkUpdate {
	nu.mutation.RemoveTokenIDs(ids...)
	return nu
}

// RemoveTokens removes "tokens" edges to Token entities.
func (nu *NetworkUpdate) RemoveTokens(t ...*Token) *NetworkUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NetworkUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := network.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.ChainID(); ok {
		_spec.SetField(network.FieldChainID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedChainID(); ok {
		_spec.AddField(network.FieldChainID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.ChainIDHex(); ok {
		_spec.SetField(network.FieldChainIDHex, field.TypeString, value)
	}
	if nu.mutation.ChainIDHexCleared() {
		_spec.ClearField(network.FieldChainIDHex, field.TypeString)
	}
	if value, ok := nu.mutation.Identifier(); ok {
		_spec.SetField(network.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := nu.mutation.RPCEndpoint(); ok {
		_spec.SetField(network.FieldRPCEndpoint, field.TypeString, value)
	}
	if value, ok := nu.mutation.GatewayContractAddress(); ok {
		_spec.SetField(network.FieldGatewayContractAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.IsTestnet(); ok {
		_spec.SetField(network.FieldIsTestnet, field.TypeBool, value)
	}
	if value, ok := nu.mutation.Fee(); ok {
		_spec.SetField(network.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := nu.mutation.AddedFee(); ok {
		_spec.AddField(network.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := nu.mutation.IsEnabled(); ok {
		_spec.SetField(network.FieldIsEnabled, field.TypeBool, value)
	}
	if nu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !nu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NetworkUpdateOne) SetUpdatedAt(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetChainID sets the "chain_id" field.
func (nuo *NetworkUpdateOne) SetChainID(i int64) *NetworkUpdateOne {
	nuo.mutation.ResetChainID()
	nuo.mutation.SetChainID(i)
	return nuo
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableChainID(i *int64) *NetworkUpdateOne {
	if i != nil {
		nuo.SetChainID(*i)
	}
	return nuo
}

// AddChainID adds i to the "chain_id" field.
func (nuo *NetworkUpdateOne) AddChainID(i int64) *NetworkUpdateOne {
	nuo.mutation.AddChainID(i)
	return nuo
}

// SetChainIDHex sets the "chain_id_hex" field.
func (nuo *NetworkUpdateOne) SetChainIDHex(s string) *NetworkUpdateOne {
	nuo.mutation.SetChainIDHex(s)
	return nuo
}

// SetNillableChainIDHex sets the "chain_id_hex" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableChainIDHex(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetChainIDHex(*s)
	}
	return nuo
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (nuo *NetworkUpdateOne) ClearChainIDHex() *NetworkUpdateOne {
	nuo.mutation.ClearChainIDHex()
	return nuo
}

// SetIdentifier sets the "identifier" field.
func (nuo *NetworkUpdateOne) SetIdentifier(s string) *NetworkUpdateOne {
	nuo.mutation.SetIdentifier(s)
	return nuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableIdentifier(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetIdentifier(*s)
	}
	return nuo
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (nuo *NetworkUpdateOne) SetRPCEndpoint(s string) *NetworkUpdateOne {
	nuo.mutation.SetRPCEndpoint(s)
	return nuo
}

// SetNillableRPCEndpoint sets the "rpc_endpoint" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableRPCEndpoint(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetRPCEndpoint(*s)
	}
	return nuo
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (nuo *NetworkUpdateOne) SetGatewayContractAddress(s string) *NetworkUpdateOne {
	nuo.mutation.SetGatewayContractAddress(s)
	return nuo
}

// SetNillableGatewayContractAddress sets the "gateway_contract_address" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableGatewayContractAddress(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetGatewayContractAddress(*s)
	}
	return nuo
}

// SetIsTestnet sets the "is_testnet" field.
func (nuo *NetworkUpdateOne) SetIsTestnet(b bool) *NetworkUpdateOne {
	nuo.mutation.SetIsTestnet(b)
	return nuo
}

// SetNillableIsTestnet sets the "is_testnet" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableIsTestnet(b *bool) *NetworkUpdateOne {
	if b != nil {
		nuo.SetIsTestnet(*b)
	}
	return nuo
}

// SetFee sets the "fee" field.
func (nuo *NetworkUpdateOne) SetFee(d decimal.Decimal) *NetworkUpdateOne {
	nuo.mutation.ResetFee()
	nuo.mutation.SetFee(d)
	return nuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableFee(d *decimal.Decimal) *NetworkUpdateOne {
	if d != nil {
		nuo.SetFee(*d)
	}
	return nuo
}

// AddFee adds d to the "fee" field.
func (nuo *NetworkUpdateOne) AddFee(d decimal.Decimal) *NetworkUpdateOne {
	nuo.mutation.AddFee(d)
	return nuo
}

// SetIsEnabled sets the "is_enabled" field.
func (nuo *NetworkUpdateOne) SetIsEnabled(b bool) *NetworkUpdateOne {
	nuo.mutation.SetIsEnabled(b)
	return nuo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableIsEnabled(b *bool) *NetworkUpdateOne {
	if b != nil {
		nuo.SetIsEnabled(*b)
	}
	return nuo
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (nuo *NetworkUpdateOne) AddTokenIDs(ids ...int) *NetworkUpdateOne {
	nuo.mutation.AddTokenIDs(ids...)
	return nuo
}

// AddTokens adds the "tokens" edges to the Token entity.
func (nuo *NetworkUpdateOne) AddTokens(t ...*Token) *NetworkUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddTokenIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (nuo *NetworkUpdateOne) ClearTokens() *NetworkUpdateOne {
	nuo.mutation.ClearTokens()
	return nuo
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (nuo *NetworkUpdateOne) RemoveTokenIDs(ids ...int) *NetworkUpdateOne {
	nuo.mutation.RemoveTokenIDs(ids...)
	return nuo
}

// RemoveTokens removes "tokens" edges to Token entities.
func (nuo *NetworkUpdateOne) RemoveTokens(t ...*Token) *NetworkUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveTokenIDs(ids...)
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nuo *NetworkUpdateOne) Where(ps ...predicate.Network) *NetworkUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkUpdateOne) Select(field string, fields ...string) *NetworkUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Network entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NetworkUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := network.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (_node *Network, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Network.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for _, f := range fields {
			if !network.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.ChainID(); ok {
		_spec.SetField(network.FieldChainID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedChainID(); ok {
		_spec.AddField(network.FieldChainID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.ChainIDHex(); ok {
		_spec.SetField(network.FieldChainIDHex, field.TypeString, value)
	}
	if nuo.mutation.ChainIDHexCleared() {
		_spec.ClearField(network.FieldChainIDHex, field.TypeString)
	}
	if value, ok := nuo.mutation.Identifier(); ok {
		_spec.SetField(network.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RPCEndpoint(); ok {
		_spec.SetField(network.FieldRPCEndpoint, field.TypeString, value)
	}
	if value, ok := nuo.mutation.GatewayContractAddress(); ok {
		_spec.SetField(network.FieldGatewayContractAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.IsTestnet(); ok {
		_spec.SetField(network.FieldIsTestnet, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.Fee(); ok {
		_spec.SetField(network.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := nuo.mutation.AddedFee(); ok {
		_spec.AddField(network.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := nuo.mutation.IsEnabled(); ok {
		_spec.SetField(network.FieldIsEnabled, field.TypeBool, value)
	}
	if nuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !nuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Network{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
