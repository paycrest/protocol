// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/apikey"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/senderordertoken"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/user"
)

// SenderProfileCreate is the builder for creating a SenderProfile entity.
type SenderProfileCreate struct {
	config
	mutation *SenderProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWebhookURL sets the "webhook_url" field.
func (spc *SenderProfileCreate) SetWebhookURL(s string) *SenderProfileCreate {
	spc.mutation.SetWebhookURL(s)
	return spc
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableWebhookURL(s *string) *SenderProfileCreate {
	if s != nil {
		spc.SetWebhookURL(*s)
	}
	return spc
}

// SetDomainWhitelist sets the "domain_whitelist" field.
func (spc *SenderProfileCreate) SetDomainWhitelist(s []string) *SenderProfileCreate {
	spc.mutation.SetDomainWhitelist(s)
	return spc
}

// SetProviderID sets the "provider_id" field.
func (spc *SenderProfileCreate) SetProviderID(s string) *SenderProfileCreate {
	spc.mutation.SetProviderID(s)
	return spc
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableProviderID(s *string) *SenderProfileCreate {
	if s != nil {
		spc.SetProviderID(*s)
	}
	return spc
}

// SetIsPartner sets the "is_partner" field.
func (spc *SenderProfileCreate) SetIsPartner(b bool) *SenderProfileCreate {
	spc.mutation.SetIsPartner(b)
	return spc
}

// SetNillableIsPartner sets the "is_partner" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableIsPartner(b *bool) *SenderProfileCreate {
	if b != nil {
		spc.SetIsPartner(*b)
	}
	return spc
}

// SetIsActive sets the "is_active" field.
func (spc *SenderProfileCreate) SetIsActive(b bool) *SenderProfileCreate {
	spc.mutation.SetIsActive(b)
	return spc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableIsActive(b *bool) *SenderProfileCreate {
	if b != nil {
		spc.SetIsActive(*b)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SenderProfileCreate) SetUpdatedAt(t time.Time) *SenderProfileCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableUpdatedAt(t *time.Time) *SenderProfileCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SenderProfileCreate) SetID(u uuid.UUID) *SenderProfileCreate {
	spc.mutation.SetID(u)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableID(u *uuid.UUID) *SenderProfileCreate {
	if u != nil {
		spc.SetID(*u)
	}
	return spc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spc *SenderProfileCreate) SetUserID(id uuid.UUID) *SenderProfileCreate {
	spc.mutation.SetUserID(id)
	return spc
}

// SetUser sets the "user" edge to the User entity.
func (spc *SenderProfileCreate) SetUser(u *User) *SenderProfileCreate {
	return spc.SetUserID(u.ID)
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (spc *SenderProfileCreate) SetAPIKeyID(id uuid.UUID) *SenderProfileCreate {
	spc.mutation.SetAPIKeyID(id)
	return spc
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (spc *SenderProfileCreate) SetNillableAPIKeyID(id *uuid.UUID) *SenderProfileCreate {
	if id != nil {
		spc = spc.SetAPIKeyID(*id)
	}
	return spc
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (spc *SenderProfileCreate) SetAPIKey(a *APIKey) *SenderProfileCreate {
	return spc.SetAPIKeyID(a.ID)
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by IDs.
func (spc *SenderProfileCreate) AddPaymentOrderIDs(ids ...uuid.UUID) *SenderProfileCreate {
	spc.mutation.AddPaymentOrderIDs(ids...)
	return spc
}

// AddPaymentOrders adds the "payment_orders" edges to the PaymentOrder entity.
func (spc *SenderProfileCreate) AddPaymentOrders(p ...*PaymentOrder) *SenderProfileCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spc.AddPaymentOrderIDs(ids...)
}

// AddOrderTokenIDs adds the "order_tokens" edge to the SenderOrderToken entity by IDs.
func (spc *SenderProfileCreate) AddOrderTokenIDs(ids ...int) *SenderProfileCreate {
	spc.mutation.AddOrderTokenIDs(ids...)
	return spc
}

// AddOrderTokens adds the "order_tokens" edges to the SenderOrderToken entity.
func (spc *SenderProfileCreate) AddOrderTokens(s ...*SenderOrderToken) *SenderProfileCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddOrderTokenIDs(ids...)
}

// AddLinkedAddresIDs adds the "linked_address" edge to the LinkedAddress entity by IDs.
func (spc *SenderProfileCreate) AddLinkedAddresIDs(ids ...int) *SenderProfileCreate {
	spc.mutation.AddLinkedAddresIDs(ids...)
	return spc
}

// AddLinkedAddress adds the "linked_address" edges to the LinkedAddress entity.
func (spc *SenderProfileCreate) AddLinkedAddress(l ...*LinkedAddress) *SenderProfileCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return spc.AddLinkedAddresIDs(ids...)
}

// Mutation returns the SenderProfileMutation object of the builder.
func (spc *SenderProfileCreate) Mutation() *SenderProfileMutation {
	return spc.mutation
}

// Save creates the SenderProfile in the database.
func (spc *SenderProfileCreate) Save(ctx context.Context) (*SenderProfile, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SenderProfileCreate) SaveX(ctx context.Context) *SenderProfile {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SenderProfileCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SenderProfileCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SenderProfileCreate) defaults() {
	if _, ok := spc.mutation.DomainWhitelist(); !ok {
		v := senderprofile.DefaultDomainWhitelist
		spc.mutation.SetDomainWhitelist(v)
	}
	if _, ok := spc.mutation.IsPartner(); !ok {
		v := senderprofile.DefaultIsPartner
		spc.mutation.SetIsPartner(v)
	}
	if _, ok := spc.mutation.IsActive(); !ok {
		v := senderprofile.DefaultIsActive
		spc.mutation.SetIsActive(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := senderprofile.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		v := senderprofile.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SenderProfileCreate) check() error {
	if _, ok := spc.mutation.DomainWhitelist(); !ok {
		return &ValidationError{Name: "domain_whitelist", err: errors.New(`ent: missing required field "SenderProfile.domain_whitelist"`)}
	}
	if _, ok := spc.mutation.IsPartner(); !ok {
		return &ValidationError{Name: "is_partner", err: errors.New(`ent: missing required field "SenderProfile.is_partner"`)}
	}
	if _, ok := spc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SenderProfile.is_active"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SenderProfile.updated_at"`)}
	}
	if len(spc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "SenderProfile.user"`)}
	}
	return nil
}

func (spc *SenderProfileCreate) sqlSave(ctx context.Context) (*SenderProfile, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SenderProfileCreate) createSpec() (*SenderProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &SenderProfile{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(senderprofile.Table, sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.WebhookURL(); ok {
		_spec.SetField(senderprofile.FieldWebhookURL, field.TypeString, value)
		_node.WebhookURL = value
	}
	if value, ok := spc.mutation.DomainWhitelist(); ok {
		_spec.SetField(senderprofile.FieldDomainWhitelist, field.TypeJSON, value)
		_node.DomainWhitelist = value
	}
	if value, ok := spc.mutation.ProviderID(); ok {
		_spec.SetField(senderprofile.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := spc.mutation.IsPartner(); ok {
		_spec.SetField(senderprofile.FieldIsPartner, field.TypeBool, value)
		_node.IsPartner = value
	}
	if value, ok := spc.mutation.IsActive(); ok {
		_spec.SetField(senderprofile.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(senderprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := spc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   senderprofile.UserTable,
			Columns: []string{senderprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_sender_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   senderprofile.APIKeyTable,
			Columns: []string{senderprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   senderprofile.PaymentOrdersTable,
			Columns: []string{senderprofile.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.OrderTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   senderprofile.OrderTokensTable,
			Columns: []string{senderprofile.OrderTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.LinkedAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   senderprofile.LinkedAddressTable,
			Columns: []string{senderprofile.LinkedAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SenderProfile.Create().
//		SetWebhookURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SenderProfileUpsert) {
//			SetWebhookURL(v+v).
//		}).
//		Exec(ctx)
func (spc *SenderProfileCreate) OnConflict(opts ...sql.ConflictOption) *SenderProfileUpsertOne {
	spc.conflict = opts
	return &SenderProfileUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *SenderProfileCreate) OnConflictColumns(columns ...string) *SenderProfileUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SenderProfileUpsertOne{
		create: spc,
	}
}

type (
	// SenderProfileUpsertOne is the builder for "upsert"-ing
	//  one SenderProfile node.
	SenderProfileUpsertOne struct {
		create *SenderProfileCreate
	}

	// SenderProfileUpsert is the "OnConflict" setter.
	SenderProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetWebhookURL sets the "webhook_url" field.
func (u *SenderProfileUpsert) SetWebhookURL(v string) *SenderProfileUpsert {
	u.Set(senderprofile.FieldWebhookURL, v)
	return u
}

// UpdateWebhookURL sets the "webhook_url" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateWebhookURL() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldWebhookURL)
	return u
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (u *SenderProfileUpsert) ClearWebhookURL() *SenderProfileUpsert {
	u.SetNull(senderprofile.FieldWebhookURL)
	return u
}

// SetDomainWhitelist sets the "domain_whitelist" field.
func (u *SenderProfileUpsert) SetDomainWhitelist(v []string) *SenderProfileUpsert {
	u.Set(senderprofile.FieldDomainWhitelist, v)
	return u
}

// UpdateDomainWhitelist sets the "domain_whitelist" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateDomainWhitelist() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldDomainWhitelist)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *SenderProfileUpsert) SetProviderID(v string) *SenderProfileUpsert {
	u.Set(senderprofile.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateProviderID() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldProviderID)
	return u
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *SenderProfileUpsert) ClearProviderID() *SenderProfileUpsert {
	u.SetNull(senderprofile.FieldProviderID)
	return u
}

// SetIsPartner sets the "is_partner" field.
func (u *SenderProfileUpsert) SetIsPartner(v bool) *SenderProfileUpsert {
	u.Set(senderprofile.FieldIsPartner, v)
	return u
}

// UpdateIsPartner sets the "is_partner" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateIsPartner() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldIsPartner)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SenderProfileUpsert) SetIsActive(v bool) *SenderProfileUpsert {
	u.Set(senderprofile.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateIsActive() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldIsActive)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SenderProfileUpsert) SetUpdatedAt(v time.Time) *SenderProfileUpsert {
	u.Set(senderprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SenderProfileUpsert) UpdateUpdatedAt() *SenderProfileUpsert {
	u.SetExcluded(senderprofile.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(senderprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SenderProfileUpsertOne) UpdateNewValues() *SenderProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(senderprofile.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SenderProfileUpsertOne) Ignore() *SenderProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SenderProfileUpsertOne) DoNothing() *SenderProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SenderProfileCreate.OnConflict
// documentation for more info.
func (u *SenderProfileUpsertOne) Update(set func(*SenderProfileUpsert)) *SenderProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SenderProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetWebhookURL sets the "webhook_url" field.
func (u *SenderProfileUpsertOne) SetWebhookURL(v string) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetWebhookURL(v)
	})
}

// UpdateWebhookURL sets the "webhook_url" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateWebhookURL() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateWebhookURL()
	})
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (u *SenderProfileUpsertOne) ClearWebhookURL() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.ClearWebhookURL()
	})
}

// SetDomainWhitelist sets the "domain_whitelist" field.
func (u *SenderProfileUpsertOne) SetDomainWhitelist(v []string) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetDomainWhitelist(v)
	})
}

// UpdateDomainWhitelist sets the "domain_whitelist" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateDomainWhitelist() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateDomainWhitelist()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *SenderProfileUpsertOne) SetProviderID(v string) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateProviderID() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *SenderProfileUpsertOne) ClearProviderID() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.ClearProviderID()
	})
}

// SetIsPartner sets the "is_partner" field.
func (u *SenderProfileUpsertOne) SetIsPartner(v bool) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetIsPartner(v)
	})
}

// UpdateIsPartner sets the "is_partner" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateIsPartner() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateIsPartner()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SenderProfileUpsertOne) SetIsActive(v bool) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateIsActive() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SenderProfileUpsertOne) SetUpdatedAt(v time.Time) *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SenderProfileUpsertOne) UpdateUpdatedAt() *SenderProfileUpsertOne {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SenderProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SenderProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SenderProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SenderProfileUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SenderProfileUpsertOne.ID is not supported by MySQL driver. Use SenderProfileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SenderProfileUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SenderProfileCreateBulk is the builder for creating many SenderProfile entities in bulk.
type SenderProfileCreateBulk struct {
	config
	err      error
	builders []*SenderProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the SenderProfile entities in the database.
func (spcb *SenderProfileCreateBulk) Save(ctx context.Context) ([]*SenderProfile, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SenderProfile, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SenderProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SenderProfileCreateBulk) SaveX(ctx context.Context) []*SenderProfile {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SenderProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SenderProfileCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SenderProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SenderProfileUpsert) {
//			SetWebhookURL(v+v).
//		}).
//		Exec(ctx)
func (spcb *SenderProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *SenderProfileUpsertBulk {
	spcb.conflict = opts
	return &SenderProfileUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *SenderProfileCreateBulk) OnConflictColumns(columns ...string) *SenderProfileUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SenderProfileUpsertBulk{
		create: spcb,
	}
}

// SenderProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of SenderProfile nodes.
type SenderProfileUpsertBulk struct {
	create *SenderProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(senderprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SenderProfileUpsertBulk) UpdateNewValues() *SenderProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(senderprofile.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SenderProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SenderProfileUpsertBulk) Ignore() *SenderProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SenderProfileUpsertBulk) DoNothing() *SenderProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SenderProfileCreateBulk.OnConflict
// documentation for more info.
func (u *SenderProfileUpsertBulk) Update(set func(*SenderProfileUpsert)) *SenderProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SenderProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetWebhookURL sets the "webhook_url" field.
func (u *SenderProfileUpsertBulk) SetWebhookURL(v string) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetWebhookURL(v)
	})
}

// UpdateWebhookURL sets the "webhook_url" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateWebhookURL() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateWebhookURL()
	})
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (u *SenderProfileUpsertBulk) ClearWebhookURL() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.ClearWebhookURL()
	})
}

// SetDomainWhitelist sets the "domain_whitelist" field.
func (u *SenderProfileUpsertBulk) SetDomainWhitelist(v []string) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetDomainWhitelist(v)
	})
}

// UpdateDomainWhitelist sets the "domain_whitelist" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateDomainWhitelist() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateDomainWhitelist()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *SenderProfileUpsertBulk) SetProviderID(v string) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateProviderID() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *SenderProfileUpsertBulk) ClearProviderID() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.ClearProviderID()
	})
}

// SetIsPartner sets the "is_partner" field.
func (u *SenderProfileUpsertBulk) SetIsPartner(v bool) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetIsPartner(v)
	})
}

// UpdateIsPartner sets the "is_partner" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateIsPartner() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateIsPartner()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SenderProfileUpsertBulk) SetIsActive(v bool) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateIsActive() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SenderProfileUpsertBulk) SetUpdatedAt(v time.Time) *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SenderProfileUpsertBulk) UpdateUpdatedAt() *SenderProfileUpsertBulk {
	return u.Update(func(s *SenderProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SenderProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SenderProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SenderProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SenderProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
