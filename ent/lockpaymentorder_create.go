// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/paycrest/aggregator/ent/transactionlog"
	"github.com/shopspring/decimal"
)

// LockPaymentOrderCreate is the builder for creating a LockPaymentOrder entity.
type LockPaymentOrderCreate struct {
	config
	mutation *LockPaymentOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lpoc *LockPaymentOrderCreate) SetCreatedAt(t time.Time) *LockPaymentOrderCreate {
	lpoc.mutation.SetCreatedAt(t)
	return lpoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableCreatedAt(t *time.Time) *LockPaymentOrderCreate {
	if t != nil {
		lpoc.SetCreatedAt(*t)
	}
	return lpoc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpoc *LockPaymentOrderCreate) SetUpdatedAt(t time.Time) *LockPaymentOrderCreate {
	lpoc.mutation.SetUpdatedAt(t)
	return lpoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableUpdatedAt(t *time.Time) *LockPaymentOrderCreate {
	if t != nil {
		lpoc.SetUpdatedAt(*t)
	}
	return lpoc
}

// SetGatewayID sets the "gateway_id" field.
func (lpoc *LockPaymentOrderCreate) SetGatewayID(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetGatewayID(s)
	return lpoc
}

// SetAmount sets the "amount" field.
func (lpoc *LockPaymentOrderCreate) SetAmount(d decimal.Decimal) *LockPaymentOrderCreate {
	lpoc.mutation.SetAmount(d)
	return lpoc
}

// SetRate sets the "rate" field.
func (lpoc *LockPaymentOrderCreate) SetRate(d decimal.Decimal) *LockPaymentOrderCreate {
	lpoc.mutation.SetRate(d)
	return lpoc
}

// SetOrderPercent sets the "order_percent" field.
func (lpoc *LockPaymentOrderCreate) SetOrderPercent(d decimal.Decimal) *LockPaymentOrderCreate {
	lpoc.mutation.SetOrderPercent(d)
	return lpoc
}

// SetTxHash sets the "tx_hash" field.
func (lpoc *LockPaymentOrderCreate) SetTxHash(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetTxHash(s)
	return lpoc
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableTxHash(s *string) *LockPaymentOrderCreate {
	if s != nil {
		lpoc.SetTxHash(*s)
	}
	return lpoc
}

// SetStatus sets the "status" field.
func (lpoc *LockPaymentOrderCreate) SetStatus(l lockpaymentorder.Status) *LockPaymentOrderCreate {
	lpoc.mutation.SetStatus(l)
	return lpoc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableStatus(l *lockpaymentorder.Status) *LockPaymentOrderCreate {
	if l != nil {
		lpoc.SetStatus(*l)
	}
	return lpoc
}

// SetBlockNumber sets the "block_number" field.
func (lpoc *LockPaymentOrderCreate) SetBlockNumber(i int64) *LockPaymentOrderCreate {
	lpoc.mutation.SetBlockNumber(i)
	return lpoc
}

// SetInstitution sets the "institution" field.
func (lpoc *LockPaymentOrderCreate) SetInstitution(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetInstitution(s)
	return lpoc
}

// SetAccountIdentifier sets the "account_identifier" field.
func (lpoc *LockPaymentOrderCreate) SetAccountIdentifier(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetAccountIdentifier(s)
	return lpoc
}

// SetAccountName sets the "account_name" field.
func (lpoc *LockPaymentOrderCreate) SetAccountName(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetAccountName(s)
	return lpoc
}

// SetMemo sets the "memo" field.
func (lpoc *LockPaymentOrderCreate) SetMemo(s string) *LockPaymentOrderCreate {
	lpoc.mutation.SetMemo(s)
	return lpoc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableMemo(s *string) *LockPaymentOrderCreate {
	if s != nil {
		lpoc.SetMemo(*s)
	}
	return lpoc
}

// SetCancellationCount sets the "cancellation_count" field.
func (lpoc *LockPaymentOrderCreate) SetCancellationCount(i int) *LockPaymentOrderCreate {
	lpoc.mutation.SetCancellationCount(i)
	return lpoc
}

// SetNillableCancellationCount sets the "cancellation_count" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableCancellationCount(i *int) *LockPaymentOrderCreate {
	if i != nil {
		lpoc.SetCancellationCount(*i)
	}
	return lpoc
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (lpoc *LockPaymentOrderCreate) SetCancellationReasons(s []string) *LockPaymentOrderCreate {
	lpoc.mutation.SetCancellationReasons(s)
	return lpoc
}

// SetID sets the "id" field.
func (lpoc *LockPaymentOrderCreate) SetID(u uuid.UUID) *LockPaymentOrderCreate {
	lpoc.mutation.SetID(u)
	return lpoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableID(u *uuid.UUID) *LockPaymentOrderCreate {
	if u != nil {
		lpoc.SetID(*u)
	}
	return lpoc
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (lpoc *LockPaymentOrderCreate) SetTokenID(id int) *LockPaymentOrderCreate {
	lpoc.mutation.SetTokenID(id)
	return lpoc
}

// SetToken sets the "token" edge to the Token entity.
func (lpoc *LockPaymentOrderCreate) SetToken(t *Token) *LockPaymentOrderCreate {
	return lpoc.SetTokenID(t.ID)
}

// SetProvisionBucketID sets the "provision_bucket" edge to the ProvisionBucket entity by ID.
func (lpoc *LockPaymentOrderCreate) SetProvisionBucketID(id int) *LockPaymentOrderCreate {
	lpoc.mutation.SetProvisionBucketID(id)
	return lpoc
}

// SetNillableProvisionBucketID sets the "provision_bucket" edge to the ProvisionBucket entity by ID if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableProvisionBucketID(id *int) *LockPaymentOrderCreate {
	if id != nil {
		lpoc = lpoc.SetProvisionBucketID(*id)
	}
	return lpoc
}

// SetProvisionBucket sets the "provision_bucket" edge to the ProvisionBucket entity.
func (lpoc *LockPaymentOrderCreate) SetProvisionBucket(p *ProvisionBucket) *LockPaymentOrderCreate {
	return lpoc.SetProvisionBucketID(p.ID)
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (lpoc *LockPaymentOrderCreate) SetProviderID(id string) *LockPaymentOrderCreate {
	lpoc.mutation.SetProviderID(id)
	return lpoc
}

// SetNillableProviderID sets the "provider" edge to the ProviderProfile entity by ID if the given value is not nil.
func (lpoc *LockPaymentOrderCreate) SetNillableProviderID(id *string) *LockPaymentOrderCreate {
	if id != nil {
		lpoc = lpoc.SetProviderID(*id)
	}
	return lpoc
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (lpoc *LockPaymentOrderCreate) SetProvider(p *ProviderProfile) *LockPaymentOrderCreate {
	return lpoc.SetProviderID(p.ID)
}

// AddFulfillmentIDs adds the "fulfillments" edge to the LockOrderFulfillment entity by IDs.
func (lpoc *LockPaymentOrderCreate) AddFulfillmentIDs(ids ...uuid.UUID) *LockPaymentOrderCreate {
	lpoc.mutation.AddFulfillmentIDs(ids...)
	return lpoc
}

// AddFulfillments adds the "fulfillments" edges to the LockOrderFulfillment entity.
func (lpoc *LockPaymentOrderCreate) AddFulfillments(l ...*LockOrderFulfillment) *LockPaymentOrderCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpoc.AddFulfillmentIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the TransactionLog entity by IDs.
func (lpoc *LockPaymentOrderCreate) AddTransactionIDs(ids ...uuid.UUID) *LockPaymentOrderCreate {
	lpoc.mutation.AddTransactionIDs(ids...)
	return lpoc
}

// AddTransactions adds the "transactions" edges to the TransactionLog entity.
func (lpoc *LockPaymentOrderCreate) AddTransactions(t ...*TransactionLog) *LockPaymentOrderCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpoc.AddTransactionIDs(ids...)
}

// Mutation returns the LockPaymentOrderMutation object of the builder.
func (lpoc *LockPaymentOrderCreate) Mutation() *LockPaymentOrderMutation {
	return lpoc.mutation
}

// Save creates the LockPaymentOrder in the database.
func (lpoc *LockPaymentOrderCreate) Save(ctx context.Context) (*LockPaymentOrder, error) {
	lpoc.defaults()
	return withHooks(ctx, lpoc.sqlSave, lpoc.mutation, lpoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpoc *LockPaymentOrderCreate) SaveX(ctx context.Context) *LockPaymentOrder {
	v, err := lpoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpoc *LockPaymentOrderCreate) Exec(ctx context.Context) error {
	_, err := lpoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpoc *LockPaymentOrderCreate) ExecX(ctx context.Context) {
	if err := lpoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpoc *LockPaymentOrderCreate) defaults() {
	if _, ok := lpoc.mutation.CreatedAt(); !ok {
		v := lockpaymentorder.DefaultCreatedAt()
		lpoc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpoc.mutation.UpdatedAt(); !ok {
		v := lockpaymentorder.DefaultUpdatedAt()
		lpoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lpoc.mutation.Status(); !ok {
		v := lockpaymentorder.DefaultStatus
		lpoc.mutation.SetStatus(v)
	}
	if _, ok := lpoc.mutation.CancellationCount(); !ok {
		v := lockpaymentorder.DefaultCancellationCount
		lpoc.mutation.SetCancellationCount(v)
	}
	if _, ok := lpoc.mutation.CancellationReasons(); !ok {
		v := lockpaymentorder.DefaultCancellationReasons
		lpoc.mutation.SetCancellationReasons(v)
	}
	if _, ok := lpoc.mutation.ID(); !ok {
		v := lockpaymentorder.DefaultID()
		lpoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpoc *LockPaymentOrderCreate) check() error {
	if _, ok := lpoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LockPaymentOrder.created_at"`)}
	}
	if _, ok := lpoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LockPaymentOrder.updated_at"`)}
	}
	if _, ok := lpoc.mutation.GatewayID(); !ok {
		return &ValidationError{Name: "gateway_id", err: errors.New(`ent: missing required field "LockPaymentOrder.gateway_id"`)}
	}
	if _, ok := lpoc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "LockPaymentOrder.amount"`)}
	}
	if _, ok := lpoc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "LockPaymentOrder.rate"`)}
	}
	if _, ok := lpoc.mutation.OrderPercent(); !ok {
		return &ValidationError{Name: "order_percent", err: errors.New(`ent: missing required field "LockPaymentOrder.order_percent"`)}
	}
	if v, ok := lpoc.mutation.TxHash(); ok {
		if err := lockpaymentorder.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "LockPaymentOrder.tx_hash": %w`, err)}
		}
	}
	if _, ok := lpoc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LockPaymentOrder.status"`)}
	}
	if v, ok := lpoc.mutation.Status(); ok {
		if err := lockpaymentorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LockPaymentOrder.status": %w`, err)}
		}
	}
	if _, ok := lpoc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "LockPaymentOrder.block_number"`)}
	}
	if _, ok := lpoc.mutation.Institution(); !ok {
		return &ValidationError{Name: "institution", err: errors.New(`ent: missing required field "LockPaymentOrder.institution"`)}
	}
	if _, ok := lpoc.mutation.AccountIdentifier(); !ok {
		return &ValidationError{Name: "account_identifier", err: errors.New(`ent: missing required field "LockPaymentOrder.account_identifier"`)}
	}
	if _, ok := lpoc.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "LockPaymentOrder.account_name"`)}
	}
	if _, ok := lpoc.mutation.CancellationCount(); !ok {
		return &ValidationError{Name: "cancellation_count", err: errors.New(`ent: missing required field "LockPaymentOrder.cancellation_count"`)}
	}
	if _, ok := lpoc.mutation.CancellationReasons(); !ok {
		return &ValidationError{Name: "cancellation_reasons", err: errors.New(`ent: missing required field "LockPaymentOrder.cancellation_reasons"`)}
	}
	if len(lpoc.mutation.TokenIDs()) == 0 {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required edge "LockPaymentOrder.token"`)}
	}
	return nil
}

func (lpoc *LockPaymentOrderCreate) sqlSave(ctx context.Context) (*LockPaymentOrder, error) {
	if err := lpoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lpoc.mutation.id = &_node.ID
	lpoc.mutation.done = true
	return _node, nil
}

func (lpoc *LockPaymentOrderCreate) createSpec() (*LockPaymentOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &LockPaymentOrder{config: lpoc.config}
		_spec = sqlgraph.NewCreateSpec(lockpaymentorder.Table, sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = lpoc.conflict
	if id, ok := lpoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lpoc.mutation.CreatedAt(); ok {
		_spec.SetField(lockpaymentorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpoc.mutation.UpdatedAt(); ok {
		_spec.SetField(lockpaymentorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lpoc.mutation.GatewayID(); ok {
		_spec.SetField(lockpaymentorder.FieldGatewayID, field.TypeString, value)
		_node.GatewayID = value
	}
	if value, ok := lpoc.mutation.Amount(); ok {
		_spec.SetField(lockpaymentorder.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := lpoc.mutation.Rate(); ok {
		_spec.SetField(lockpaymentorder.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := lpoc.mutation.OrderPercent(); ok {
		_spec.SetField(lockpaymentorder.FieldOrderPercent, field.TypeFloat64, value)
		_node.OrderPercent = value
	}
	if value, ok := lpoc.mutation.TxHash(); ok {
		_spec.SetField(lockpaymentorder.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := lpoc.mutation.Status(); ok {
		_spec.SetField(lockpaymentorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lpoc.mutation.BlockNumber(); ok {
		_spec.SetField(lockpaymentorder.FieldBlockNumber, field.TypeInt64, value)
		_node.BlockNumber = value
	}
	if value, ok := lpoc.mutation.Institution(); ok {
		_spec.SetField(lockpaymentorder.FieldInstitution, field.TypeString, value)
		_node.Institution = value
	}
	if value, ok := lpoc.mutation.AccountIdentifier(); ok {
		_spec.SetField(lockpaymentorder.FieldAccountIdentifier, field.TypeString, value)
		_node.AccountIdentifier = value
	}
	if value, ok := lpoc.mutation.AccountName(); ok {
		_spec.SetField(lockpaymentorder.FieldAccountName, field.TypeString, value)
		_node.AccountName = value
	}
	if value, ok := lpoc.mutation.Memo(); ok {
		_spec.SetField(lockpaymentorder.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := lpoc.mutation.CancellationCount(); ok {
		_spec.SetField(lockpaymentorder.FieldCancellationCount, field.TypeInt, value)
		_node.CancellationCount = value
	}
	if value, ok := lpoc.mutation.CancellationReasons(); ok {
		_spec.SetField(lockpaymentorder.FieldCancellationReasons, field.TypeJSON, value)
		_node.CancellationReasons = value
	}
	if nodes := lpoc.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lockpaymentorder.TokenTable,
			Columns: []string{lockpaymentorder.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.token_lock_payment_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpoc.mutation.ProvisionBucketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lockpaymentorder.ProvisionBucketTable,
			Columns: []string{lockpaymentorder.ProvisionBucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provision_bucket_lock_payment_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpoc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lockpaymentorder.ProviderTable,
			Columns: []string{lockpaymentorder.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_profile_assigned_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpoc.mutation.FulfillmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lockpaymentorder.FulfillmentsTable,
			Columns: []string{lockpaymentorder.FulfillmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpoc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lockpaymentorder.TransactionsTable,
			Columns: []string{lockpaymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LockPaymentOrder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LockPaymentOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lpoc *LockPaymentOrderCreate) OnConflict(opts ...sql.ConflictOption) *LockPaymentOrderUpsertOne {
	lpoc.conflict = opts
	return &LockPaymentOrderUpsertOne{
		create: lpoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpoc *LockPaymentOrderCreate) OnConflictColumns(columns ...string) *LockPaymentOrderUpsertOne {
	lpoc.conflict = append(lpoc.conflict, sql.ConflictColumns(columns...))
	return &LockPaymentOrderUpsertOne{
		create: lpoc,
	}
}

type (
	// LockPaymentOrderUpsertOne is the builder for "upsert"-ing
	//  one LockPaymentOrder node.
	LockPaymentOrderUpsertOne struct {
		create *LockPaymentOrderCreate
	}

	// LockPaymentOrderUpsert is the "OnConflict" setter.
	LockPaymentOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *LockPaymentOrderUpsert) SetUpdatedAt(v time.Time) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateUpdatedAt() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldUpdatedAt)
	return u
}

// SetGatewayID sets the "gateway_id" field.
func (u *LockPaymentOrderUpsert) SetGatewayID(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldGatewayID, v)
	return u
}

// UpdateGatewayID sets the "gateway_id" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateGatewayID() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldGatewayID)
	return u
}

// SetAmount sets the "amount" field.
func (u *LockPaymentOrderUpsert) SetAmount(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateAmount() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *LockPaymentOrderUpsert) AddAmount(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Add(lockpaymentorder.FieldAmount, v)
	return u
}

// SetRate sets the "rate" field.
func (u *LockPaymentOrderUpsert) SetRate(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateRate() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldRate)
	return u
}

// AddRate adds v to the "rate" field.
func (u *LockPaymentOrderUpsert) AddRate(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Add(lockpaymentorder.FieldRate, v)
	return u
}

// SetOrderPercent sets the "order_percent" field.
func (u *LockPaymentOrderUpsert) SetOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldOrderPercent, v)
	return u
}

// UpdateOrderPercent sets the "order_percent" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateOrderPercent() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldOrderPercent)
	return u
}

// AddOrderPercent adds v to the "order_percent" field.
func (u *LockPaymentOrderUpsert) AddOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsert {
	u.Add(lockpaymentorder.FieldOrderPercent, v)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *LockPaymentOrderUpsert) SetTxHash(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateTxHash() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldTxHash)
	return u
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *LockPaymentOrderUpsert) ClearTxHash() *LockPaymentOrderUpsert {
	u.SetNull(lockpaymentorder.FieldTxHash)
	return u
}

// SetStatus sets the "status" field.
func (u *LockPaymentOrderUpsert) SetStatus(v lockpaymentorder.Status) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateStatus() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldStatus)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *LockPaymentOrderUpsert) SetBlockNumber(v int64) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateBlockNumber() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *LockPaymentOrderUpsert) AddBlockNumber(v int64) *LockPaymentOrderUpsert {
	u.Add(lockpaymentorder.FieldBlockNumber, v)
	return u
}

// SetInstitution sets the "institution" field.
func (u *LockPaymentOrderUpsert) SetInstitution(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldInstitution, v)
	return u
}

// UpdateInstitution sets the "institution" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateInstitution() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldInstitution)
	return u
}

// SetAccountIdentifier sets the "account_identifier" field.
func (u *LockPaymentOrderUpsert) SetAccountIdentifier(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldAccountIdentifier, v)
	return u
}

// UpdateAccountIdentifier sets the "account_identifier" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateAccountIdentifier() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldAccountIdentifier)
	return u
}

// SetAccountName sets the "account_name" field.
func (u *LockPaymentOrderUpsert) SetAccountName(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldAccountName, v)
	return u
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateAccountName() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldAccountName)
	return u
}

// SetMemo sets the "memo" field.
func (u *LockPaymentOrderUpsert) SetMemo(v string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateMemo() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *LockPaymentOrderUpsert) ClearMemo() *LockPaymentOrderUpsert {
	u.SetNull(lockpaymentorder.FieldMemo)
	return u
}

// SetCancellationCount sets the "cancellation_count" field.
func (u *LockPaymentOrderUpsert) SetCancellationCount(v int) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldCancellationCount, v)
	return u
}

// UpdateCancellationCount sets the "cancellation_count" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateCancellationCount() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldCancellationCount)
	return u
}

// AddCancellationCount adds v to the "cancellation_count" field.
func (u *LockPaymentOrderUpsert) AddCancellationCount(v int) *LockPaymentOrderUpsert {
	u.Add(lockpaymentorder.FieldCancellationCount, v)
	return u
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (u *LockPaymentOrderUpsert) SetCancellationReasons(v []string) *LockPaymentOrderUpsert {
	u.Set(lockpaymentorder.FieldCancellationReasons, v)
	return u
}

// UpdateCancellationReasons sets the "cancellation_reasons" field to the value that was provided on create.
func (u *LockPaymentOrderUpsert) UpdateCancellationReasons() *LockPaymentOrderUpsert {
	u.SetExcluded(lockpaymentorder.FieldCancellationReasons)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lockpaymentorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LockPaymentOrderUpsertOne) UpdateNewValues() *LockPaymentOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lockpaymentorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lockpaymentorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LockPaymentOrderUpsertOne) Ignore() *LockPaymentOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LockPaymentOrderUpsertOne) DoNothing() *LockPaymentOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LockPaymentOrderCreate.OnConflict
// documentation for more info.
func (u *LockPaymentOrderUpsertOne) Update(set func(*LockPaymentOrderUpsert)) *LockPaymentOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LockPaymentOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LockPaymentOrderUpsertOne) SetUpdatedAt(v time.Time) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateUpdatedAt() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGatewayID sets the "gateway_id" field.
func (u *LockPaymentOrderUpsertOne) SetGatewayID(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetGatewayID(v)
	})
}

// UpdateGatewayID sets the "gateway_id" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateGatewayID() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateGatewayID()
	})
}

// SetAmount sets the "amount" field.
func (u *LockPaymentOrderUpsertOne) SetAmount(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *LockPaymentOrderUpsertOne) AddAmount(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateAmount() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetRate sets the "rate" field.
func (u *LockPaymentOrderUpsertOne) SetRate(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *LockPaymentOrderUpsertOne) AddRate(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateRate() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateRate()
	})
}

// SetOrderPercent sets the "order_percent" field.
func (u *LockPaymentOrderUpsertOne) SetOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetOrderPercent(v)
	})
}

// AddOrderPercent adds v to the "order_percent" field.
func (u *LockPaymentOrderUpsertOne) AddOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddOrderPercent(v)
	})
}

// UpdateOrderPercent sets the "order_percent" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateOrderPercent() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateOrderPercent()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *LockPaymentOrderUpsertOne) SetTxHash(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateTxHash() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *LockPaymentOrderUpsertOne) ClearTxHash() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.ClearTxHash()
	})
}

// SetStatus sets the "status" field.
func (u *LockPaymentOrderUpsertOne) SetStatus(v lockpaymentorder.Status) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateStatus() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *LockPaymentOrderUpsertOne) SetBlockNumber(v int64) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *LockPaymentOrderUpsertOne) AddBlockNumber(v int64) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateBlockNumber() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetInstitution sets the "institution" field.
func (u *LockPaymentOrderUpsertOne) SetInstitution(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetInstitution(v)
	})
}

// UpdateInstitution sets the "institution" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateInstitution() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateInstitution()
	})
}

// SetAccountIdentifier sets the "account_identifier" field.
func (u *LockPaymentOrderUpsertOne) SetAccountIdentifier(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAccountIdentifier(v)
	})
}

// UpdateAccountIdentifier sets the "account_identifier" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateAccountIdentifier() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAccountIdentifier()
	})
}

// SetAccountName sets the "account_name" field.
func (u *LockPaymentOrderUpsertOne) SetAccountName(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateAccountName() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAccountName()
	})
}

// SetMemo sets the "memo" field.
func (u *LockPaymentOrderUpsertOne) SetMemo(v string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateMemo() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *LockPaymentOrderUpsertOne) ClearMemo() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.ClearMemo()
	})
}

// SetCancellationCount sets the "cancellation_count" field.
func (u *LockPaymentOrderUpsertOne) SetCancellationCount(v int) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetCancellationCount(v)
	})
}

// AddCancellationCount adds v to the "cancellation_count" field.
func (u *LockPaymentOrderUpsertOne) AddCancellationCount(v int) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddCancellationCount(v)
	})
}

// UpdateCancellationCount sets the "cancellation_count" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateCancellationCount() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateCancellationCount()
	})
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (u *LockPaymentOrderUpsertOne) SetCancellationReasons(v []string) *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetCancellationReasons(v)
	})
}

// UpdateCancellationReasons sets the "cancellation_reasons" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertOne) UpdateCancellationReasons() *LockPaymentOrderUpsertOne {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateCancellationReasons()
	})
}

// Exec executes the query.
func (u *LockPaymentOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LockPaymentOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LockPaymentOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LockPaymentOrderUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LockPaymentOrderUpsertOne.ID is not supported by MySQL driver. Use LockPaymentOrderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LockPaymentOrderUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LockPaymentOrderCreateBulk is the builder for creating many LockPaymentOrder entities in bulk.
type LockPaymentOrderCreateBulk struct {
	config
	err      error
	builders []*LockPaymentOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the LockPaymentOrder entities in the database.
func (lpocb *LockPaymentOrderCreateBulk) Save(ctx context.Context) ([]*LockPaymentOrder, error) {
	if lpocb.err != nil {
		return nil, lpocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpocb.builders))
	nodes := make([]*LockPaymentOrder, len(lpocb.builders))
	mutators := make([]Mutator, len(lpocb.builders))
	for i := range lpocb.builders {
		func(i int, root context.Context) {
			builder := lpocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LockPaymentOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lpocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpocb *LockPaymentOrderCreateBulk) SaveX(ctx context.Context) []*LockPaymentOrder {
	v, err := lpocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpocb *LockPaymentOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := lpocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpocb *LockPaymentOrderCreateBulk) ExecX(ctx context.Context) {
	if err := lpocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LockPaymentOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LockPaymentOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lpocb *LockPaymentOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *LockPaymentOrderUpsertBulk {
	lpocb.conflict = opts
	return &LockPaymentOrderUpsertBulk{
		create: lpocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpocb *LockPaymentOrderCreateBulk) OnConflictColumns(columns ...string) *LockPaymentOrderUpsertBulk {
	lpocb.conflict = append(lpocb.conflict, sql.ConflictColumns(columns...))
	return &LockPaymentOrderUpsertBulk{
		create: lpocb,
	}
}

// LockPaymentOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of LockPaymentOrder nodes.
type LockPaymentOrderUpsertBulk struct {
	create *LockPaymentOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lockpaymentorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LockPaymentOrderUpsertBulk) UpdateNewValues() *LockPaymentOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lockpaymentorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lockpaymentorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LockPaymentOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LockPaymentOrderUpsertBulk) Ignore() *LockPaymentOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LockPaymentOrderUpsertBulk) DoNothing() *LockPaymentOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LockPaymentOrderCreateBulk.OnConflict
// documentation for more info.
func (u *LockPaymentOrderUpsertBulk) Update(set func(*LockPaymentOrderUpsert)) *LockPaymentOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LockPaymentOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LockPaymentOrderUpsertBulk) SetUpdatedAt(v time.Time) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateUpdatedAt() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGatewayID sets the "gateway_id" field.
func (u *LockPaymentOrderUpsertBulk) SetGatewayID(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetGatewayID(v)
	})
}

// UpdateGatewayID sets the "gateway_id" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateGatewayID() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateGatewayID()
	})
}

// SetAmount sets the "amount" field.
func (u *LockPaymentOrderUpsertBulk) SetAmount(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *LockPaymentOrderUpsertBulk) AddAmount(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateAmount() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetRate sets the "rate" field.
func (u *LockPaymentOrderUpsertBulk) SetRate(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *LockPaymentOrderUpsertBulk) AddRate(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateRate() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateRate()
	})
}

// SetOrderPercent sets the "order_percent" field.
func (u *LockPaymentOrderUpsertBulk) SetOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetOrderPercent(v)
	})
}

// AddOrderPercent adds v to the "order_percent" field.
func (u *LockPaymentOrderUpsertBulk) AddOrderPercent(v decimal.Decimal) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddOrderPercent(v)
	})
}

// UpdateOrderPercent sets the "order_percent" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateOrderPercent() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateOrderPercent()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *LockPaymentOrderUpsertBulk) SetTxHash(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateTxHash() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *LockPaymentOrderUpsertBulk) ClearTxHash() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.ClearTxHash()
	})
}

// SetStatus sets the "status" field.
func (u *LockPaymentOrderUpsertBulk) SetStatus(v lockpaymentorder.Status) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateStatus() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *LockPaymentOrderUpsertBulk) SetBlockNumber(v int64) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *LockPaymentOrderUpsertBulk) AddBlockNumber(v int64) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateBlockNumber() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetInstitution sets the "institution" field.
func (u *LockPaymentOrderUpsertBulk) SetInstitution(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetInstitution(v)
	})
}

// UpdateInstitution sets the "institution" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateInstitution() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateInstitution()
	})
}

// SetAccountIdentifier sets the "account_identifier" field.
func (u *LockPaymentOrderUpsertBulk) SetAccountIdentifier(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAccountIdentifier(v)
	})
}

// UpdateAccountIdentifier sets the "account_identifier" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateAccountIdentifier() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAccountIdentifier()
	})
}

// SetAccountName sets the "account_name" field.
func (u *LockPaymentOrderUpsertBulk) SetAccountName(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateAccountName() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateAccountName()
	})
}

// SetMemo sets the "memo" field.
func (u *LockPaymentOrderUpsertBulk) SetMemo(v string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateMemo() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *LockPaymentOrderUpsertBulk) ClearMemo() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.ClearMemo()
	})
}

// SetCancellationCount sets the "cancellation_count" field.
func (u *LockPaymentOrderUpsertBulk) SetCancellationCount(v int) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetCancellationCount(v)
	})
}

// AddCancellationCount adds v to the "cancellation_count" field.
func (u *LockPaymentOrderUpsertBulk) AddCancellationCount(v int) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.AddCancellationCount(v)
	})
}

// UpdateCancellationCount sets the "cancellation_count" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateCancellationCount() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateCancellationCount()
	})
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (u *LockPaymentOrderUpsertBulk) SetCancellationReasons(v []string) *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.SetCancellationReasons(v)
	})
}

// UpdateCancellationReasons sets the "cancellation_reasons" field to the value that was provided on create.
func (u *LockPaymentOrderUpsertBulk) UpdateCancellationReasons() *LockPaymentOrderUpsertBulk {
	return u.Update(func(s *LockPaymentOrderUpsert) {
		s.UpdateCancellationReasons()
	})
}

// Exec executes the query.
func (u *LockPaymentOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LockPaymentOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LockPaymentOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LockPaymentOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
