// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/shopspring/decimal"
)

// NetworkCreate is the builder for creating a Network entity.
type NetworkCreate struct {
	config
	mutation *NetworkMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (nc *NetworkCreate) SetCreatedAt(t time.Time) *NetworkCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableCreatedAt(t *time.Time) *NetworkCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NetworkCreate) SetUpdatedAt(t time.Time) *NetworkCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableUpdatedAt(t *time.Time) *NetworkCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetChainID sets the "chain_id" field.
func (nc *NetworkCreate) SetChainID(i int64) *NetworkCreate {
	nc.mutation.SetChainID(i)
	return nc
}

// SetChainIDHex sets the "chain_id_hex" field.
func (nc *NetworkCreate) SetChainIDHex(s string) *NetworkCreate {
	nc.mutation.SetChainIDHex(s)
	return nc
}

// SetNillableChainIDHex sets the "chain_id_hex" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableChainIDHex(s *string) *NetworkCreate {
	if s != nil {
		nc.SetChainIDHex(*s)
	}
	return nc
}

// SetIdentifier sets the "identifier" field.
func (nc *NetworkCreate) SetIdentifier(s string) *NetworkCreate {
	nc.mutation.SetIdentifier(s)
	return nc
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (nc *NetworkCreate) SetRPCEndpoint(s string) *NetworkCreate {
	nc.mutation.SetRPCEndpoint(s)
	return nc
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (nc *NetworkCreate) SetGatewayContractAddress(s string) *NetworkCreate {
	nc.mutation.SetGatewayContractAddress(s)
	return nc
}

// SetNillableGatewayContractAddress sets the "gateway_contract_address" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableGatewayContractAddress(s *string) *NetworkCreate {
	if s != nil {
		nc.SetGatewayContractAddress(*s)
	}
	return nc
}

// SetIsTestnet sets the "is_testnet" field.
func (nc *NetworkCreate) SetIsTestnet(b bool) *NetworkCreate {
	nc.mutation.SetIsTestnet(b)
	return nc
}

// SetBundlerURL sets the "bundler_url" field.
func (nc *NetworkCreate) SetBundlerURL(s string) *NetworkCreate {
	nc.mutation.SetBundlerURL(s)
	return nc
}

// SetNillableBundlerURL sets the "bundler_url" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableBundlerURL(s *string) *NetworkCreate {
	if s != nil {
		nc.SetBundlerURL(*s)
	}
	return nc
}

// SetPaymasterURL sets the "paymaster_url" field.
func (nc *NetworkCreate) SetPaymasterURL(s string) *NetworkCreate {
	nc.mutation.SetPaymasterURL(s)
	return nc
}

// SetNillablePaymasterURL sets the "paymaster_url" field if the given value is not nil.
func (nc *NetworkCreate) SetNillablePaymasterURL(s *string) *NetworkCreate {
	if s != nil {
		nc.SetPaymasterURL(*s)
	}
	return nc
}

// SetFee sets the "fee" field.
func (nc *NetworkCreate) SetFee(d decimal.Decimal) *NetworkCreate {
	nc.mutation.SetFee(d)
	return nc
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (nc *NetworkCreate) AddTokenIDs(ids ...int) *NetworkCreate {
	nc.mutation.AddTokenIDs(ids...)
	return nc
}

// AddTokens adds the "tokens" edges to the Token entity.
func (nc *NetworkCreate) AddTokens(t ...*Token) *NetworkCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddTokenIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nc *NetworkCreate) Mutation() *NetworkMutation {
	return nc.mutation
}

// Save creates the Network in the database.
func (nc *NetworkCreate) Save(ctx context.Context) (*Network, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NetworkCreate) SaveX(ctx context.Context) *Network {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NetworkCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NetworkCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NetworkCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := network.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := network.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.GatewayContractAddress(); !ok {
		v := network.DefaultGatewayContractAddress
		nc.mutation.SetGatewayContractAddress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NetworkCreate) check() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Network.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Network.updated_at"`)}
	}
	if _, ok := nc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Network.chain_id"`)}
	}
	if _, ok := nc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Network.identifier"`)}
	}
	if _, ok := nc.mutation.RPCEndpoint(); !ok {
		return &ValidationError{Name: "rpc_endpoint", err: errors.New(`ent: missing required field "Network.rpc_endpoint"`)}
	}
	if _, ok := nc.mutation.GatewayContractAddress(); !ok {
		return &ValidationError{Name: "gateway_contract_address", err: errors.New(`ent: missing required field "Network.gateway_contract_address"`)}
	}
	if _, ok := nc.mutation.IsTestnet(); !ok {
		return &ValidationError{Name: "is_testnet", err: errors.New(`ent: missing required field "Network.is_testnet"`)}
	}
	if _, ok := nc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "Network.fee"`)}
	}
	return nil
}

func (nc *NetworkCreate) sqlSave(ctx context.Context) (*Network, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NetworkCreate) createSpec() (*Network, *sqlgraph.CreateSpec) {
	var (
		_node = &Network{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(network.Table, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(network.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.ChainID(); ok {
		_spec.SetField(network.FieldChainID, field.TypeInt64, value)
		_node.ChainID = value
	}
	if value, ok := nc.mutation.ChainIDHex(); ok {
		_spec.SetField(network.FieldChainIDHex, field.TypeString, value)
		_node.ChainIDHex = value
	}
	if value, ok := nc.mutation.Identifier(); ok {
		_spec.SetField(network.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := nc.mutation.RPCEndpoint(); ok {
		_spec.SetField(network.FieldRPCEndpoint, field.TypeString, value)
		_node.RPCEndpoint = value
	}
	if value, ok := nc.mutation.GatewayContractAddress(); ok {
		_spec.SetField(network.FieldGatewayContractAddress, field.TypeString, value)
		_node.GatewayContractAddress = value
	}
	if value, ok := nc.mutation.IsTestnet(); ok {
		_spec.SetField(network.FieldIsTestnet, field.TypeBool, value)
		_node.IsTestnet = value
	}
	if value, ok := nc.mutation.BundlerURL(); ok {
		_spec.SetField(network.FieldBundlerURL, field.TypeString, value)
		_node.BundlerURL = value
	}
	if value, ok := nc.mutation.PaymasterURL(); ok {
		_spec.SetField(network.FieldPaymasterURL, field.TypeString, value)
		_node.PaymasterURL = value
	}
	if value, ok := nc.mutation.Fee(); ok {
		_spec.SetField(network.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if nodes := nc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetworkCreateBulk is the builder for creating many Network entities in bulk.
type NetworkCreateBulk struct {
	config
	err      error
	builders []*NetworkCreate
}

// Save creates the Network entities in the database.
func (ncb *NetworkCreateBulk) Save(ctx context.Context) ([]*Network, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Network, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NetworkCreateBulk) SaveX(ctx context.Context) []*Network {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NetworkCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NetworkCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
