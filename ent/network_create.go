// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/shopspring/decimal"
)

// NetworkCreate is the builder for creating a Network entity.
type NetworkCreate struct {
	config
	mutation *NetworkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (nc *NetworkCreate) SetCreatedAt(t time.Time) *NetworkCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableCreatedAt(t *time.Time) *NetworkCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NetworkCreate) SetUpdatedAt(t time.Time) *NetworkCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableUpdatedAt(t *time.Time) *NetworkCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetChainID sets the "chain_id" field.
func (nc *NetworkCreate) SetChainID(i int64) *NetworkCreate {
	nc.mutation.SetChainID(i)
	return nc
}

// SetChainIDHex sets the "chain_id_hex" field.
func (nc *NetworkCreate) SetChainIDHex(s string) *NetworkCreate {
	nc.mutation.SetChainIDHex(s)
	return nc
}

// SetNillableChainIDHex sets the "chain_id_hex" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableChainIDHex(s *string) *NetworkCreate {
	if s != nil {
		nc.SetChainIDHex(*s)
	}
	return nc
}

// SetIdentifier sets the "identifier" field.
func (nc *NetworkCreate) SetIdentifier(s string) *NetworkCreate {
	nc.mutation.SetIdentifier(s)
	return nc
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (nc *NetworkCreate) SetRPCEndpoint(s string) *NetworkCreate {
	nc.mutation.SetRPCEndpoint(s)
	return nc
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (nc *NetworkCreate) SetGatewayContractAddress(s string) *NetworkCreate {
	nc.mutation.SetGatewayContractAddress(s)
	return nc
}

// SetNillableGatewayContractAddress sets the "gateway_contract_address" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableGatewayContractAddress(s *string) *NetworkCreate {
	if s != nil {
		nc.SetGatewayContractAddress(*s)
	}
	return nc
}

// SetIsTestnet sets the "is_testnet" field.
func (nc *NetworkCreate) SetIsTestnet(b bool) *NetworkCreate {
	nc.mutation.SetIsTestnet(b)
	return nc
}

// SetFee sets the "fee" field.
func (nc *NetworkCreate) SetFee(d decimal.Decimal) *NetworkCreate {
	nc.mutation.SetFee(d)
	return nc
}

// SetIsEnabled sets the "is_enabled" field.
func (nc *NetworkCreate) SetIsEnabled(b bool) *NetworkCreate {
	nc.mutation.SetIsEnabled(b)
	return nc
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (nc *NetworkCreate) SetNillableIsEnabled(b *bool) *NetworkCreate {
	if b != nil {
		nc.SetIsEnabled(*b)
	}
	return nc
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (nc *NetworkCreate) AddTokenIDs(ids ...int) *NetworkCreate {
	nc.mutation.AddTokenIDs(ids...)
	return nc
}

// AddTokens adds the "tokens" edges to the Token entity.
func (nc *NetworkCreate) AddTokens(t ...*Token) *NetworkCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddTokenIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nc *NetworkCreate) Mutation() *NetworkMutation {
	return nc.mutation
}

// Save creates the Network in the database.
func (nc *NetworkCreate) Save(ctx context.Context) (*Network, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NetworkCreate) SaveX(ctx context.Context) *Network {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NetworkCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NetworkCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NetworkCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := network.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := network.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.GatewayContractAddress(); !ok {
		v := network.DefaultGatewayContractAddress
		nc.mutation.SetGatewayContractAddress(v)
	}
	if _, ok := nc.mutation.IsEnabled(); !ok {
		v := network.DefaultIsEnabled
		nc.mutation.SetIsEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NetworkCreate) check() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Network.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Network.updated_at"`)}
	}
	if _, ok := nc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Network.chain_id"`)}
	}
	if _, ok := nc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Network.identifier"`)}
	}
	if _, ok := nc.mutation.RPCEndpoint(); !ok {
		return &ValidationError{Name: "rpc_endpoint", err: errors.New(`ent: missing required field "Network.rpc_endpoint"`)}
	}
	if _, ok := nc.mutation.GatewayContractAddress(); !ok {
		return &ValidationError{Name: "gateway_contract_address", err: errors.New(`ent: missing required field "Network.gateway_contract_address"`)}
	}
	if _, ok := nc.mutation.IsTestnet(); !ok {
		return &ValidationError{Name: "is_testnet", err: errors.New(`ent: missing required field "Network.is_testnet"`)}
	}
	if _, ok := nc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "Network.fee"`)}
	}
	if _, ok := nc.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "Network.is_enabled"`)}
	}
	return nil
}

func (nc *NetworkCreate) sqlSave(ctx context.Context) (*Network, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NetworkCreate) createSpec() (*Network, *sqlgraph.CreateSpec) {
	var (
		_node = &Network{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(network.Table, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	)
	_spec.OnConflict = nc.conflict
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(network.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.ChainID(); ok {
		_spec.SetField(network.FieldChainID, field.TypeInt64, value)
		_node.ChainID = value
	}
	if value, ok := nc.mutation.ChainIDHex(); ok {
		_spec.SetField(network.FieldChainIDHex, field.TypeString, value)
		_node.ChainIDHex = value
	}
	if value, ok := nc.mutation.Identifier(); ok {
		_spec.SetField(network.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := nc.mutation.RPCEndpoint(); ok {
		_spec.SetField(network.FieldRPCEndpoint, field.TypeString, value)
		_node.RPCEndpoint = value
	}
	if value, ok := nc.mutation.GatewayContractAddress(); ok {
		_spec.SetField(network.FieldGatewayContractAddress, field.TypeString, value)
		_node.GatewayContractAddress = value
	}
	if value, ok := nc.mutation.IsTestnet(); ok {
		_spec.SetField(network.FieldIsTestnet, field.TypeBool, value)
		_node.IsTestnet = value
	}
	if value, ok := nc.mutation.Fee(); ok {
		_spec.SetField(network.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := nc.mutation.IsEnabled(); ok {
		_spec.SetField(network.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if nodes := nc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.TokensTable,
			Columns: []string{network.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Network.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NetworkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (nc *NetworkCreate) OnConflict(opts ...sql.ConflictOption) *NetworkUpsertOne {
	nc.conflict = opts
	return &NetworkUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Network.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NetworkCreate) OnConflictColumns(columns ...string) *NetworkUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NetworkUpsertOne{
		create: nc,
	}
}

type (
	// NetworkUpsertOne is the builder for "upsert"-ing
	//  one Network node.
	NetworkUpsertOne struct {
		create *NetworkCreate
	}

	// NetworkUpsert is the "OnConflict" setter.
	NetworkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NetworkUpsert) SetUpdatedAt(v time.Time) *NetworkUpsert {
	u.Set(network.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateUpdatedAt() *NetworkUpsert {
	u.SetExcluded(network.FieldUpdatedAt)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *NetworkUpsert) SetChainID(v int64) *NetworkUpsert {
	u.Set(network.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateChainID() *NetworkUpsert {
	u.SetExcluded(network.FieldChainID)
	return u
}

// AddChainID adds v to the "chain_id" field.
func (u *NetworkUpsert) AddChainID(v int64) *NetworkUpsert {
	u.Add(network.FieldChainID, v)
	return u
}

// SetChainIDHex sets the "chain_id_hex" field.
func (u *NetworkUpsert) SetChainIDHex(v string) *NetworkUpsert {
	u.Set(network.FieldChainIDHex, v)
	return u
}

// UpdateChainIDHex sets the "chain_id_hex" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateChainIDHex() *NetworkUpsert {
	u.SetExcluded(network.FieldChainIDHex)
	return u
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (u *NetworkUpsert) ClearChainIDHex() *NetworkUpsert {
	u.SetNull(network.FieldChainIDHex)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *NetworkUpsert) SetIdentifier(v string) *NetworkUpsert {
	u.Set(network.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateIdentifier() *NetworkUpsert {
	u.SetExcluded(network.FieldIdentifier)
	return u
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (u *NetworkUpsert) SetRPCEndpoint(v string) *NetworkUpsert {
	u.Set(network.FieldRPCEndpoint, v)
	return u
}

// UpdateRPCEndpoint sets the "rpc_endpoint" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateRPCEndpoint() *NetworkUpsert {
	u.SetExcluded(network.FieldRPCEndpoint)
	return u
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (u *NetworkUpsert) SetGatewayContractAddress(v string) *NetworkUpsert {
	u.Set(network.FieldGatewayContractAddress, v)
	return u
}

// UpdateGatewayContractAddress sets the "gateway_contract_address" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateGatewayContractAddress() *NetworkUpsert {
	u.SetExcluded(network.FieldGatewayContractAddress)
	return u
}

// SetIsTestnet sets the "is_testnet" field.
func (u *NetworkUpsert) SetIsTestnet(v bool) *NetworkUpsert {
	u.Set(network.FieldIsTestnet, v)
	return u
}

// UpdateIsTestnet sets the "is_testnet" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateIsTestnet() *NetworkUpsert {
	u.SetExcluded(network.FieldIsTestnet)
	return u
}

// SetFee sets the "fee" field.
func (u *NetworkUpsert) SetFee(v decimal.Decimal) *NetworkUpsert {
	u.Set(network.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateFee() *NetworkUpsert {
	u.SetExcluded(network.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *NetworkUpsert) AddFee(v decimal.Decimal) *NetworkUpsert {
	u.Add(network.FieldFee, v)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *NetworkUpsert) SetIsEnabled(v bool) *NetworkUpsert {
	u.Set(network.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *NetworkUpsert) UpdateIsEnabled() *NetworkUpsert {
	u.SetExcluded(network.FieldIsEnabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Network.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NetworkUpsertOne) UpdateNewValues() *NetworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(network.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Network.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NetworkUpsertOne) Ignore() *NetworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NetworkUpsertOne) DoNothing() *NetworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NetworkCreate.OnConflict
// documentation for more info.
func (u *NetworkUpsertOne) Update(set func(*NetworkUpsert)) *NetworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NetworkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NetworkUpsertOne) SetUpdatedAt(v time.Time) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateUpdatedAt() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetChainID sets the "chain_id" field.
func (u *NetworkUpsertOne) SetChainID(v int64) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *NetworkUpsertOne) AddChainID(v int64) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateChainID() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateChainID()
	})
}

// SetChainIDHex sets the "chain_id_hex" field.
func (u *NetworkUpsertOne) SetChainIDHex(v string) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetChainIDHex(v)
	})
}

// UpdateChainIDHex sets the "chain_id_hex" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateChainIDHex() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateChainIDHex()
	})
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (u *NetworkUpsertOne) ClearChainIDHex() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.ClearChainIDHex()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *NetworkUpsertOne) SetIdentifier(v string) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateIdentifier() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIdentifier()
	})
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (u *NetworkUpsertOne) SetRPCEndpoint(v string) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetRPCEndpoint(v)
	})
}

// UpdateRPCEndpoint sets the "rpc_endpoint" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateRPCEndpoint() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateRPCEndpoint()
	})
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (u *NetworkUpsertOne) SetGatewayContractAddress(v string) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetGatewayContractAddress(v)
	})
}

// UpdateGatewayContractAddress sets the "gateway_contract_address" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateGatewayContractAddress() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateGatewayContractAddress()
	})
}

// SetIsTestnet sets the "is_testnet" field.
func (u *NetworkUpsertOne) SetIsTestnet(v bool) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIsTestnet(v)
	})
}

// UpdateIsTestnet sets the "is_testnet" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateIsTestnet() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIsTestnet()
	})
}

// SetFee sets the "fee" field.
func (u *NetworkUpsertOne) SetFee(v decimal.Decimal) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *NetworkUpsertOne) AddFee(v decimal.Decimal) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateFee() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateFee()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *NetworkUpsertOne) SetIsEnabled(v bool) *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *NetworkUpsertOne) UpdateIsEnabled() *NetworkUpsertOne {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIsEnabled()
	})
}

// Exec executes the query.
func (u *NetworkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NetworkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NetworkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NetworkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NetworkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NetworkCreateBulk is the builder for creating many Network entities in bulk.
type NetworkCreateBulk struct {
	config
	err      error
	builders []*NetworkCreate
	conflict []sql.ConflictOption
}

// Save creates the Network entities in the database.
func (ncb *NetworkCreateBulk) Save(ctx context.Context) ([]*Network, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Network, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NetworkCreateBulk) SaveX(ctx context.Context) []*Network {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NetworkCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NetworkCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Network.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NetworkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ncb *NetworkCreateBulk) OnConflict(opts ...sql.ConflictOption) *NetworkUpsertBulk {
	ncb.conflict = opts
	return &NetworkUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Network.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NetworkCreateBulk) OnConflictColumns(columns ...string) *NetworkUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NetworkUpsertBulk{
		create: ncb,
	}
}

// NetworkUpsertBulk is the builder for "upsert"-ing
// a bulk of Network nodes.
type NetworkUpsertBulk struct {
	create *NetworkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Network.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NetworkUpsertBulk) UpdateNewValues() *NetworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(network.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Network.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NetworkUpsertBulk) Ignore() *NetworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NetworkUpsertBulk) DoNothing() *NetworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NetworkCreateBulk.OnConflict
// documentation for more info.
func (u *NetworkUpsertBulk) Update(set func(*NetworkUpsert)) *NetworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NetworkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NetworkUpsertBulk) SetUpdatedAt(v time.Time) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateUpdatedAt() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetChainID sets the "chain_id" field.
func (u *NetworkUpsertBulk) SetChainID(v int64) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *NetworkUpsertBulk) AddChainID(v int64) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateChainID() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateChainID()
	})
}

// SetChainIDHex sets the "chain_id_hex" field.
func (u *NetworkUpsertBulk) SetChainIDHex(v string) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetChainIDHex(v)
	})
}

// UpdateChainIDHex sets the "chain_id_hex" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateChainIDHex() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateChainIDHex()
	})
}

// ClearChainIDHex clears the value of the "chain_id_hex" field.
func (u *NetworkUpsertBulk) ClearChainIDHex() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.ClearChainIDHex()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *NetworkUpsertBulk) SetIdentifier(v string) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateIdentifier() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIdentifier()
	})
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (u *NetworkUpsertBulk) SetRPCEndpoint(v string) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetRPCEndpoint(v)
	})
}

// UpdateRPCEndpoint sets the "rpc_endpoint" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateRPCEndpoint() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateRPCEndpoint()
	})
}

// SetGatewayContractAddress sets the "gateway_contract_address" field.
func (u *NetworkUpsertBulk) SetGatewayContractAddress(v string) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetGatewayContractAddress(v)
	})
}

// UpdateGatewayContractAddress sets the "gateway_contract_address" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateGatewayContractAddress() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateGatewayContractAddress()
	})
}

// SetIsTestnet sets the "is_testnet" field.
func (u *NetworkUpsertBulk) SetIsTestnet(v bool) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIsTestnet(v)
	})
}

// UpdateIsTestnet sets the "is_testnet" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateIsTestnet() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIsTestnet()
	})
}

// SetFee sets the "fee" field.
func (u *NetworkUpsertBulk) SetFee(v decimal.Decimal) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *NetworkUpsertBulk) AddFee(v decimal.Decimal) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateFee() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateFee()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *NetworkUpsertBulk) SetIsEnabled(v bool) *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *NetworkUpsertBulk) UpdateIsEnabled() *NetworkUpsertBulk {
	return u.Update(func(s *NetworkUpsert) {
		s.UpdateIsEnabled()
	})
}

// Exec executes the query.
func (u *NetworkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NetworkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NetworkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NetworkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
